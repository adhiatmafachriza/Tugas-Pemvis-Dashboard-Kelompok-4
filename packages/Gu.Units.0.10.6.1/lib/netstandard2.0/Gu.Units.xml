<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gu.Units</name>
    </assembly>
    <members>
        <member name="T:Gu.Units.Acceleration">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Acceleration.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.AccelerationUnit.MetresPerSecondSquared"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Acceleration.metresPerSecondSquared">
            <summary>
            The quantity in <see cref="F:Gu.Units.AccelerationUnit.MetresPerSecondSquared"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Acceleration.#ctor(System.Double,Gu.Units.AccelerationUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Acceleration"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.AccelerationUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Acceleration.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.AccelerationUnit.MetresPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.AccelerationUnit"/> for the <see cref="P:Gu.Units.Acceleration.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Acceleration.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.MetresPerSecondSquared">
            <summary>
            Gets the quantity in metresPerSecondSquared".
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.CentimetresPerSecondSquared">
            <summary>
            Gets the quantity in CentimetresPerSecondSquared
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.MillimetresPerSecondSquared">
            <summary>
            Gets the quantity in MillimetresPerSecondSquared
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.MillimetresPerHourSquared">
            <summary>
            Gets the quantity in MillimetresPerHourSquared
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.CentimetresPerHourSquared">
            <summary>
            Gets the quantity in CentimetresPerHourSquared
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.MetresPerHourSquared">
            <summary>
            Gets the quantity in MetresPerHourSquared
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.MetresPerMinuteSquared">
            <summary>
            Gets the quantity in MetresPerMinuteSquared
            </summary>
        </member>
        <member name="P:Gu.Units.Acceleration.MillimetresPerMinuteSquared">
            <summary>
            Gets the quantity in MillimetresPerMinuteSquared
            </summary>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Multiply(Gu.Units.Acceleration,Gu.Units.Mass)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Multiply(Gu.Units.Acceleration,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Multiply(Gu.Units.Acceleration,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Division(Gu.Units.Acceleration,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Jerk"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Division(Gu.Units.Acceleration,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Multiply(Gu.Units.Acceleration,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Jerk"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Division(Gu.Units.Acceleration,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Division(Gu.Units.Acceleration,Gu.Units.SpecificEnergy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Division(Gu.Units.Acceleration,Gu.Units.Jerk)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Multiply(Gu.Units.Acceleration,Gu.Units.Momentum)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Division(Gu.Units.Acceleration,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Multiply(Gu.Units.Acceleration,Gu.Units.AreaDensity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Division(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Equality(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Acceleration"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Inequality(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Acceleration"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.op_LessThan(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Acceleration"/> is less than another specified <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.op_GreaterThan(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Acceleration"/> is greater than another specified <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.op_LessThanOrEqual(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Acceleration"/> is less than or equal to another specified <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.op_GreaterThanOrEqual(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Acceleration"/> is greater than or equal to another specified <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Multiply(System.Double,Gu.Units.Acceleration)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Acceleration"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Acceleration"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Multiply(Gu.Units.Acceleration,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Acceleration"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Acceleration"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Division(Gu.Units.Acceleration,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Acceleration"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Acceleration"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Addition(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Acceleration"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Acceleration"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Acceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.op_Subtraction(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Subtracts an Acceleration from another Acceleration and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Acceleration"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Acceleration"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Acceleration"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Acceleration.op_UnaryNegation(Gu.Units.Acceleration)">
            <summary>
            Returns an <see cref="T:Gu.Units.Acceleration"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Acceleration"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="acceleration">An instance of <see cref="T:Gu.Units.Acceleration"/></param>
        </member>
        <member name="M:Gu.Units.Acceleration.op_UnaryPlus(Gu.Units.Acceleration)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <returns>
            Returns <paramref name="acceleration"/>.
            </returns>
            <param name="acceleration">An instance of <see cref="T:Gu.Units.Acceleration"/></param>
        </member>
        <member name="M:Gu.Units.Acceleration.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Acceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Acceleration"/></param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Acceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Acceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Acceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.TryParse(System.String,Gu.Units.Acceleration@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Acceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Acceleration"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Acceleration"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.TryParse(System.String,System.IFormatProvider,Gu.Units.Acceleration@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Acceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Acceleration"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Acceleration"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Acceleration@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Acceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Acceleration"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Acceleration"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Acceleration@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Acceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Acceleration"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Acceleration"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Acceleration"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Acceleration"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.From(System.Double,Gu.Units.AccelerationUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.FromMetresPerSecondSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <param name="metresPerSecondSquared">The value in <see cref="F:Gu.Units.AccelerationUnit.MetresPerSecondSquared"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.FromCentimetresPerSecondSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <param name="centimetresPerSecondSquared">The value in cm/s².</param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.FromMillimetresPerSecondSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <param name="millimetresPerSecondSquared">The value in mm/s².</param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.FromMillimetresPerHourSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <param name="millimetresPerHourSquared">The value in mm/h².</param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.FromCentimetresPerHourSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <param name="centimetresPerHourSquared">The value in cm/h².</param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.FromMetresPerHourSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <param name="metresPerHourSquared">The value in m/h².</param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.FromMetresPerMinuteSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <param name="metresPerMinuteSquared">The value in m/min².</param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.FromMillimetresPerMinuteSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Acceleration"/>.
            </summary>
            <param name="millimetresPerMinuteSquared">The value in mm/min².</param>
            <returns>An instance of <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.GetValue(Gu.Units.AccelerationUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Acceleration.SiValue"/> and <see cref="P:Gu.Units.Acceleration.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Acceleration.SiValue"/> and <see cref="P:Gu.Units.Acceleration.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/s²\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/s²\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m/s²</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m/s²</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Acceleration"/></returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(Gu.Units.AccelerationUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(Gu.Units.AccelerationUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(Gu.Units.AccelerationUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(Gu.Units.AccelerationUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(System.String,Gu.Units.AccelerationUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(System.String,Gu.Units.AccelerationUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(System.String,Gu.Units.AccelerationUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ToString(System.String,Gu.Units.AccelerationUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.CompareTo(Gu.Units.Acceleration)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Acceleration"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Acceleration"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Acceleration"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.Equals(Gu.Units.Acceleration)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Acceleration"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Acceleration as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Acceleration"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.Equals(Gu.Units.Acceleration,Gu.Units.Acceleration)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Acceleration"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Acceleration as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Acceleration"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Acceleration.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Acceleration"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Acceleration"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Acceleration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Acceleration.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Acceleration.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Acceleration.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.AccelerationTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Acceleration'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AccelerationTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AccelerationTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AccelerationTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AccelerationTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AccelerationUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Acceleration"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AccelerationUnit.MetresPerSecondSquared">
            <summary>
            The MetresPerSecondSquared unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AccelerationUnit.CentimetresPerSecondSquared">
            <summary>
            The CentimetresPerSecondSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AccelerationUnit.MillimetresPerSecondSquared">
            <summary>
            The MillimetresPerSecondSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AccelerationUnit.MillimetresPerHourSquared">
            <summary>
            The MillimetresPerHourSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AccelerationUnit.CentimetresPerHourSquared">
            <summary>
            The CentimetresPerHourSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AccelerationUnit.MetresPerHourSquared">
            <summary>
            The MetresPerHourSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AccelerationUnit.MetresPerMinuteSquared">
            <summary>
            The MetresPerMinuteSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AccelerationUnit.MillimetresPerMinuteSquared">
            <summary>
            The MillimetresPerMinuteSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AccelerationUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AccelerationUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AccelerationUnit"/> struct.
            </summary>
            <param name="toMetresPerSecondSquared">The conversion to <see cref="F:Gu.Units.AccelerationUnit.MetresPerSecondSquared"/></param>
            <param name="fromMetresPerSecondSquared">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.AccelerationUnit.MetresPerSecondSquared"/></param>
        </member>
        <member name="P:Gu.Units.AccelerationUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AccelerationUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.AccelerationUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.AccelerationUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AccelerationUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AccelerationUnit.op_Multiply(System.Double,Gu.Units.AccelerationUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.op_Equality(Gu.Units.AccelerationUnit,Gu.Units.AccelerationUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AccelerationUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AccelerationUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AccelerationUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.op_Inequality(Gu.Units.AccelerationUnit,Gu.Units.AccelerationUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AccelerationUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AccelerationUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AccelerationUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.AccelerationUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AccelerationUnit"/></returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.TryParse(System.String,Gu.Units.AccelerationUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AccelerationUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AccelerationUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AccelerationUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AccelerationUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to MetresPerSecondSquared.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from metresPerSecondSquared.
            </summary>
            <param name="metresPerSecondSquared">The value in MetresPerSecondSquared</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Acceleration(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.GetScalarValue(Gu.Units.Acceleration)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in MetresPerSecondSquared
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AccelerationUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.Equals(Gu.Units.AccelerationUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AccelerationUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.AccelerationUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same AccelerationUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AccelerationUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AccelerationUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AccelerationUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AccelerationUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AccelerationUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AccelerationUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AccelerationUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AccelerationUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AmountOfSubstance">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.AmountOfSubstance"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.AmountOfSubstance.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.AmountOfSubstanceUnit.Moles"/>
            </summary>
        </member>
        <member name="F:Gu.Units.AmountOfSubstance.moles">
            <summary>
            The quantity in <see cref="F:Gu.Units.AmountOfSubstanceUnit.Moles"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.#ctor(System.Double,Gu.Units.AmountOfSubstanceUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AmountOfSubstance"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.AmountOfSubstanceUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.AmountOfSubstance.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.AmountOfSubstanceUnit.Moles"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AmountOfSubstance.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.AmountOfSubstanceUnit"/> for the <see cref="P:Gu.Units.AmountOfSubstance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AmountOfSubstance.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.AmountOfSubstance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AmountOfSubstance.Moles">
            <summary>
            Gets the quantity in moles".
            </summary>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Division(Gu.Units.AmountOfSubstance,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.CatalyticActivity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Multiply(Gu.Units.AmountOfSubstance,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.CatalyticActivity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Division(Gu.Units.AmountOfSubstance,Gu.Units.CatalyticActivity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Multiply(Gu.Units.AmountOfSubstance,Gu.Units.MolarMass)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Division(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Equality(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AmountOfSubstance"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Inequality(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AmountOfSubstance"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_LessThan(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AmountOfSubstance"/> is less than another specified <see cref="T:Gu.Units.AmountOfSubstance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_GreaterThan(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AmountOfSubstance"/> is greater than another specified <see cref="T:Gu.Units.AmountOfSubstance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_LessThanOrEqual(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AmountOfSubstance"/> is less than or equal to another specified <see cref="T:Gu.Units.AmountOfSubstance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_GreaterThanOrEqual(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AmountOfSubstance"/> is greater than or equal to another specified <see cref="T:Gu.Units.AmountOfSubstance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Multiply(System.Double,Gu.Units.AmountOfSubstance)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.AmountOfSubstance"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Multiply(Gu.Units.AmountOfSubstance,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.AmountOfSubstance"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Division(Gu.Units.AmountOfSubstance,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Addition(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.AmountOfSubstance"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AmountOfSubstance"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_Subtraction(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Subtracts an AmountOfSubstance from another AmountOfSubstance and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AmountOfSubstance"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstance"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstance"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_UnaryNegation(Gu.Units.AmountOfSubstance)">
            <summary>
            Returns an <see cref="T:Gu.Units.AmountOfSubstance"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AmountOfSubstance"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="amountOfSubstance">An instance of <see cref="T:Gu.Units.AmountOfSubstance"/></param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.op_UnaryPlus(Gu.Units.AmountOfSubstance)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.
            </summary>
            <returns>
            Returns <paramref name="amountOfSubstance"/>.
            </returns>
            <param name="amountOfSubstance">An instance of <see cref="T:Gu.Units.AmountOfSubstance"/></param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <returns>The <see cref="T:Gu.Units.AmountOfSubstance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AmountOfSubstance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.AmountOfSubstance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AmountOfSubstance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.TryParse(System.String,Gu.Units.AmountOfSubstance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.TryParse(System.String,System.IFormatProvider,Gu.Units.AmountOfSubstance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.AmountOfSubstance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.AmountOfSubstance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AmountOfSubstance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.AmountOfSubstance"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.AmountOfSubstance"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.From(System.Double,Gu.Units.AmountOfSubstanceUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AmountOfSubstance"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.FromMoles(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AmountOfSubstance"/>.
            </summary>
            <param name="moles">The value in <see cref="F:Gu.Units.AmountOfSubstanceUnit.Moles"/></param>
            <returns>An instance of <see cref="T:Gu.Units.AmountOfSubstance"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.GetValue(Gu.Units.AmountOfSubstanceUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AmountOfSubstance.SiValue"/> and <see cref="P:Gu.Units.AmountOfSubstance.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AmountOfSubstance.SiValue"/> and <see cref="P:Gu.Units.AmountOfSubstance.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 mol\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 mol\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex mol</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex mol</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AmountOfSubstance"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(Gu.Units.AmountOfSubstanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(Gu.Units.AmountOfSubstanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(Gu.Units.AmountOfSubstanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(Gu.Units.AmountOfSubstanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(System.String,Gu.Units.AmountOfSubstanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(System.String,Gu.Units.AmountOfSubstanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(System.String,Gu.Units.AmountOfSubstanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ToString(System.String,Gu.Units.AmountOfSubstanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.CompareTo(Gu.Units.AmountOfSubstance)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.AmountOfSubstance"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.AmountOfSubstance"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.AmountOfSubstance"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.Equals(Gu.Units.AmountOfSubstance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AmountOfSubstance"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AmountOfSubstance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AmountOfSubstance"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.Equals(Gu.Units.AmountOfSubstance,Gu.Units.AmountOfSubstance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AmountOfSubstance"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AmountOfSubstance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AmountOfSubstance"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AmountOfSubstance"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.AmountOfSubstance"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstance.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.AmountOfSubstanceTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AmountOfSubstance'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AmountOfSubstanceUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.AmountOfSubstance"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AmountOfSubstanceUnit.Moles">
            <summary>
            The Moles unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AmountOfSubstanceUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AmountOfSubstanceUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AmountOfSubstanceUnit"/> struct.
            </summary>
            <param name="toMoles">The conversion to <see cref="F:Gu.Units.AmountOfSubstanceUnit.Moles"/></param>
            <param name="fromMoles">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.AmountOfSubstanceUnit.Moles"/></param>
        </member>
        <member name="P:Gu.Units.AmountOfSubstanceUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AmountOfSubstanceUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.AmountOfSubstanceUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.AmountOfSubstanceUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AmountOfSubstanceUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.op_Multiply(System.Double,Gu.Units.AmountOfSubstanceUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AmountOfSubstance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.op_Equality(Gu.Units.AmountOfSubstanceUnit,Gu.Units.AmountOfSubstanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AmountOfSubstanceUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.op_Inequality(Gu.Units.AmountOfSubstanceUnit,Gu.Units.AmountOfSubstanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AmountOfSubstanceUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AmountOfSubstanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AmountOfSubstanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.AmountOfSubstanceUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AmountOfSubstanceUnit"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.TryParse(System.String,Gu.Units.AmountOfSubstanceUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AmountOfSubstanceUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AmountOfSubstanceUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AmountOfSubstanceUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AmountOfSubstanceUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Moles.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from moles.
            </summary>
            <param name="moles">The value in Moles</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new AmountOfSubstance(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.GetScalarValue(Gu.Units.AmountOfSubstance)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Moles
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.Equals(Gu.Units.AmountOfSubstanceUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AmountOfSubstanceUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.AmountOfSubstanceUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same AmountOfSubstanceUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AmountOfSubstanceUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AmountOfSubstanceUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AmountOfSubstanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Angle">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Angle"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Angle.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.AngleUnit.Radians"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Angle.radians">
            <summary>
            The quantity in <see cref="F:Gu.Units.AngleUnit.Radians"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Angle.#ctor(System.Double,Gu.Units.AngleUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Angle"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.AngleUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Angle.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.AngleUnit.Radians"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Angle.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.AngleUnit"/> for the <see cref="P:Gu.Units.Angle.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Angle.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Angle.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Angle.Radians">
            <summary>
            Gets the quantity in radians".
            </summary>
        </member>
        <member name="P:Gu.Units.Angle.Degrees">
            <summary>
            Gets the quantity in Degrees
            </summary>
        </member>
        <member name="M:Gu.Units.Angle.op_Division(Gu.Units.Angle,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Division(Gu.Units.Angle,Gu.Units.Unitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AnglePerUnitless"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Division(Gu.Units.Angle,Gu.Units.AngularSpeed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Multiply(Gu.Units.Angle,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Multiply(Gu.Units.Angle,Gu.Units.Torque)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Division(Gu.Units.Angle,Gu.Units.AnglePerUnitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Unitless"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Division(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Equality(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Angle"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Angle"/>.</param>
        </member>
        <member name="M:Gu.Units.Angle.op_Inequality(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Angle"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Angle"/>.</param>
        </member>
        <member name="M:Gu.Units.Angle.op_LessThan(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Angle"/> is less than another specified <see cref="T:Gu.Units.Angle"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Angle"/>.</param>
        </member>
        <member name="M:Gu.Units.Angle.op_GreaterThan(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Angle"/> is greater than another specified <see cref="T:Gu.Units.Angle"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Angle"/>.</param>
        </member>
        <member name="M:Gu.Units.Angle.op_LessThanOrEqual(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Angle"/> is less than or equal to another specified <see cref="T:Gu.Units.Angle"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Angle"/>.</param>
        </member>
        <member name="M:Gu.Units.Angle.op_GreaterThanOrEqual(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Angle"/> is greater than or equal to another specified <see cref="T:Gu.Units.Angle"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Angle"/>.</param>
        </member>
        <member name="M:Gu.Units.Angle.op_Multiply(System.Double,Gu.Units.Angle)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Angle"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Angle"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Angle"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Multiply(Gu.Units.Angle,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Angle"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Angle"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Division(Gu.Units.Angle,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Angle"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Angle"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Angle.op_Addition(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Angle"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Angle"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Angle"/>.</param>
        </member>
        <member name="M:Gu.Units.Angle.op_Subtraction(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Subtracts an Angle from another Angle and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Angle"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Angle"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Angle"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Angle.op_UnaryNegation(Gu.Units.Angle)">
            <summary>
            Returns an <see cref="T:Gu.Units.Angle"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Angle"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="angle">An instance of <see cref="T:Gu.Units.Angle"/></param>
        </member>
        <member name="M:Gu.Units.Angle.op_UnaryPlus(Gu.Units.Angle)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Angle"/>.
            </summary>
            <returns>
            Returns <paramref name="angle"/>.
            </returns>
            <param name="angle">An instance of <see cref="T:Gu.Units.Angle"/></param>
        </member>
        <member name="M:Gu.Units.Angle.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Angle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Angle"/></param>
            <returns>The <see cref="T:Gu.Units.Angle"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Angle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Angle"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Angle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Angle"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Angle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Angle"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.TryParse(System.String,Gu.Units.Angle@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Angle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Angle"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Angle"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Angle"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.TryParse(System.String,System.IFormatProvider,Gu.Units.Angle@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Angle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Angle"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Angle"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Angle"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Angle@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Angle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Angle"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Angle"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Angle"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Angle@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Angle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Angle"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Angle"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Angle"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Angle"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.From(System.Double,Gu.Units.AngleUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Angle"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.FromRadians(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Angle"/>.
            </summary>
            <param name="radians">The value in <see cref="F:Gu.Units.AngleUnit.Radians"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.FromDegrees(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Angle"/>.
            </summary>
            <param name="degrees">The value in °.</param>
            <returns>An instance of <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.GetValue(Gu.Units.AngleUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Angle.SiValue"/> and <see cref="P:Gu.Units.Angle.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Angle.SiValue"/> and <see cref="P:Gu.Units.Angle.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex rad</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex rad</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Angle"/></returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(Gu.Units.AngleUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(Gu.Units.AngleUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(Gu.Units.AngleUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(Gu.Units.AngleUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(System.String,Gu.Units.AngleUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(System.String,Gu.Units.AngleUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(System.String,Gu.Units.AngleUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Angle.ToString(System.String,Gu.Units.AngleUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Angle.CompareTo(Gu.Units.Angle)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Angle"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Angle"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Angle"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Angle.Equals(Gu.Units.Angle)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Angle"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Angle as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Angle"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Angle.Equals(Gu.Units.Angle,Gu.Units.Angle)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Angle"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Angle as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Angle"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Angle.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Angle"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Angle"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Angle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Angle.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Angle.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Angle.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.AnglePerUnitless">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.AnglePerUnitless.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.AnglePerUnitlessUnit.RadiansPerUnitless"/>
            </summary>
        </member>
        <member name="F:Gu.Units.AnglePerUnitless.radiansPerUnitless">
            <summary>
            The quantity in <see cref="F:Gu.Units.AnglePerUnitlessUnit.RadiansPerUnitless"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.#ctor(System.Double,Gu.Units.AnglePerUnitlessUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AnglePerUnitless"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.AnglePerUnitlessUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.AnglePerUnitless.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.AnglePerUnitlessUnit.RadiansPerUnitless"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AnglePerUnitless.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.AnglePerUnitlessUnit"/> for the <see cref="P:Gu.Units.AnglePerUnitless.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AnglePerUnitless.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.AnglePerUnitless.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AnglePerUnitless.RadiansPerUnitless">
            <summary>
            Gets the quantity in radiansPerUnitless".
            </summary>
        </member>
        <member name="P:Gu.Units.AnglePerUnitless.DegreesPerPercent">
            <summary>
            Gets the quantity in DegreesPerPercent
            </summary>
        </member>
        <member name="P:Gu.Units.AnglePerUnitless.RadiansPerPercent">
            <summary>
            Gets the quantity in RadiansPerPercent
            </summary>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_Multiply(Gu.Units.AnglePerUnitless,Gu.Units.Unitless)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_Division(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_Equality(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AnglePerUnitless"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_Inequality(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AnglePerUnitless"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_LessThan(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AnglePerUnitless"/> is less than another specified <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_GreaterThan(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AnglePerUnitless"/> is greater than another specified <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_LessThanOrEqual(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AnglePerUnitless"/> is less than or equal to another specified <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_GreaterThanOrEqual(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AnglePerUnitless"/> is greater than or equal to another specified <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_Multiply(System.Double,Gu.Units.AnglePerUnitless)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.AnglePerUnitless"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_Multiply(Gu.Units.AnglePerUnitless,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.AnglePerUnitless"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_Division(Gu.Units.AnglePerUnitless,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_Addition(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.AnglePerUnitless"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AnglePerUnitless"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_Subtraction(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Subtracts an AnglePerUnitless from another AnglePerUnitless and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AnglePerUnitless"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitless"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitless"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_UnaryNegation(Gu.Units.AnglePerUnitless)">
            <summary>
            Returns an <see cref="T:Gu.Units.AnglePerUnitless"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AnglePerUnitless"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="anglePerUnitless">An instance of <see cref="T:Gu.Units.AnglePerUnitless"/></param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.op_UnaryPlus(Gu.Units.AnglePerUnitless)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
            <returns>
            Returns <paramref name="anglePerUnitless"/>.
            </returns>
            <param name="anglePerUnitless">An instance of <see cref="T:Gu.Units.AnglePerUnitless"/></param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <returns>The <see cref="T:Gu.Units.AnglePerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AnglePerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.AnglePerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AnglePerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.TryParse(System.String,Gu.Units.AnglePerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.TryParse(System.String,System.IFormatProvider,Gu.Units.AnglePerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.AnglePerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.AnglePerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AnglePerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.AnglePerUnitless"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.From(System.Double,Gu.Units.AnglePerUnitlessUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.FromRadiansPerUnitless(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
            <param name="radiansPerUnitless">The value in <see cref="F:Gu.Units.AnglePerUnitlessUnit.RadiansPerUnitless"/></param>
            <returns>An instance of <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.FromDegreesPerPercent(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
            <param name="degreesPerPercent">The value in °/%.</param>
            <returns>An instance of <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.FromRadiansPerPercent(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AnglePerUnitless"/>.
            </summary>
            <param name="radiansPerPercent">The value in rad/%.</param>
            <returns>An instance of <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.GetValue(Gu.Units.AnglePerUnitlessUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AnglePerUnitless.SiValue"/> and <see cref="P:Gu.Units.AnglePerUnitless.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AnglePerUnitless.SiValue"/> and <see cref="P:Gu.Units.AnglePerUnitless.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad/ul\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad/ul\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex rad/ul</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex rad/ul</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AnglePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(Gu.Units.AnglePerUnitlessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(Gu.Units.AnglePerUnitlessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(Gu.Units.AnglePerUnitlessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(Gu.Units.AnglePerUnitlessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(System.String,Gu.Units.AnglePerUnitlessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(System.String,Gu.Units.AnglePerUnitlessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(System.String,Gu.Units.AnglePerUnitlessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ToString(System.String,Gu.Units.AnglePerUnitlessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.CompareTo(Gu.Units.AnglePerUnitless)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.AnglePerUnitless"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.AnglePerUnitless"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.AnglePerUnitless"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.Equals(Gu.Units.AnglePerUnitless)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AnglePerUnitless"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AnglePerUnitless as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AnglePerUnitless"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.Equals(Gu.Units.AnglePerUnitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AnglePerUnitless"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AnglePerUnitless as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AnglePerUnitless"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AnglePerUnitless"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.AnglePerUnitless"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitless.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.AnglePerUnitlessTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AnglePerUnitless'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AnglePerUnitlessUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.AnglePerUnitless"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AnglePerUnitlessUnit.RadiansPerUnitless">
            <summary>
            The RadiansPerUnitless unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AnglePerUnitlessUnit.DegreesPerPercent">
            <summary>
            The DegreesPerPercent unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AnglePerUnitlessUnit.RadiansPerPercent">
            <summary>
            The RadiansPerPercent unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AnglePerUnitlessUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AnglePerUnitlessUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AnglePerUnitlessUnit"/> struct.
            </summary>
            <param name="toRadiansPerUnitless">The conversion to <see cref="F:Gu.Units.AnglePerUnitlessUnit.RadiansPerUnitless"/></param>
            <param name="fromRadiansPerUnitless">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.AnglePerUnitlessUnit.RadiansPerUnitless"/></param>
        </member>
        <member name="P:Gu.Units.AnglePerUnitlessUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AnglePerUnitlessUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.AnglePerUnitlessUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.AnglePerUnitlessUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AnglePerUnitlessUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.op_Multiply(System.Double,Gu.Units.AnglePerUnitlessUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AnglePerUnitless"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.op_Equality(Gu.Units.AnglePerUnitlessUnit,Gu.Units.AnglePerUnitlessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AnglePerUnitlessUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitlessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitlessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.op_Inequality(Gu.Units.AnglePerUnitlessUnit,Gu.Units.AnglePerUnitlessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AnglePerUnitlessUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AnglePerUnitlessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AnglePerUnitlessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.AnglePerUnitlessUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AnglePerUnitlessUnit"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.TryParse(System.String,Gu.Units.AnglePerUnitlessUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AnglePerUnitlessUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AnglePerUnitlessUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AnglePerUnitlessUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AnglePerUnitlessUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to RadiansPerUnitless.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from radiansPerUnitless.
            </summary>
            <param name="radiansPerUnitless">The value in RadiansPerUnitless</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new AnglePerUnitless(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.GetScalarValue(Gu.Units.AnglePerUnitless)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in RadiansPerUnitless
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.Equals(Gu.Units.AnglePerUnitlessUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AnglePerUnitlessUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.AnglePerUnitlessUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same AnglePerUnitlessUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AnglePerUnitlessUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AnglePerUnitlessUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AnglePerUnitlessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngleTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Angle'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AngleTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngleTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngleTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngleTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngleUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Angle"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngleUnit.Radians">
            <summary>
            The Radians unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngleUnit.Degrees">
            <summary>
            The Degrees unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngleUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AngleUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AngleUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AngleUnit"/> struct.
            </summary>
            <param name="toRadians">The conversion to <see cref="F:Gu.Units.AngleUnit.Radians"/></param>
            <param name="fromRadians">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.AngleUnit.Radians"/></param>
        </member>
        <member name="P:Gu.Units.AngleUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AngleUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.AngleUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.AngleUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngleUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngleUnit.op_Multiply(System.Double,Gu.Units.AngleUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.op_Equality(Gu.Units.AngleUnit,Gu.Units.AngleUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngleUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngleUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngleUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AngleUnit.op_Inequality(Gu.Units.AngleUnit,Gu.Units.AngleUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngleUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngleUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngleUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AngleUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.AngleUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngleUnit"/></returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.TryParse(System.String,Gu.Units.AngleUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngleUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngleUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngleUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngleUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Radians.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from radians.
            </summary>
            <param name="radians">The value in Radians</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Angle(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.GetScalarValue(Gu.Units.Angle)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Radians
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngleUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.Equals(Gu.Units.AngleUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngleUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.AngleUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same AngleUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AngleUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngleUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngleUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AngleUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AngleUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngleUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngleUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngleUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngularAcceleration">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularAcceleration.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.AngularAccelerationUnit.RadiansPerSecondSquared"/>
            </summary>
        </member>
        <member name="F:Gu.Units.AngularAcceleration.radiansPerSecondSquared">
            <summary>
            The quantity in <see cref="F:Gu.Units.AngularAccelerationUnit.RadiansPerSecondSquared"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.#ctor(System.Double,Gu.Units.AngularAccelerationUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AngularAcceleration"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.AngularAccelerationUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.AngularAcceleration.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.AngularAccelerationUnit.RadiansPerSecondSquared"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAcceleration.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.AngularAccelerationUnit"/> for the <see cref="P:Gu.Units.AngularAcceleration.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAcceleration.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.AngularAcceleration.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAcceleration.RadiansPerSecondSquared">
            <summary>
            Gets the quantity in radiansPerSecondSquared".
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAcceleration.DegreesPerSecondSquared">
            <summary>
            Gets the quantity in DegreesPerSecondSquared
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAcceleration.RadiansPerHourSquared">
            <summary>
            Gets the quantity in RadiansPerHourSquared
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAcceleration.DegreesPerHourSquared">
            <summary>
            Gets the quantity in DegreesPerHourSquared
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAcceleration.DegreesPerMinuteSquared">
            <summary>
            Gets the quantity in DegreesPerMinuteSquared
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAcceleration.RadiansPerMinuteSquared">
            <summary>
            Gets the quantity in RadiansPerMinuteSquared
            </summary>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Multiply(Gu.Units.AngularAcceleration,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Division(Gu.Units.AngularAcceleration,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularJerk"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Division(Gu.Units.AngularAcceleration,Gu.Units.AngularSpeed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Multiply(Gu.Units.AngularAcceleration,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularJerk"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Division(Gu.Units.AngularAcceleration,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Division(Gu.Units.AngularAcceleration,Gu.Units.AngularJerk)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Division(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Equality(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularAcceleration"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Inequality(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularAcceleration"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_LessThan(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularAcceleration"/> is less than another specified <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_GreaterThan(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularAcceleration"/> is greater than another specified <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_LessThanOrEqual(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularAcceleration"/> is less than or equal to another specified <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_GreaterThanOrEqual(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularAcceleration"/> is greater than or equal to another specified <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Multiply(System.Double,Gu.Units.AngularAcceleration)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AngularAcceleration"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.AngularAcceleration"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Multiply(Gu.Units.AngularAcceleration,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AngularAcceleration"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.AngularAcceleration"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Division(Gu.Units.AngularAcceleration,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.AngularAcceleration"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.AngularAcceleration"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Addition(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.AngularAcceleration"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AngularAcceleration"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAcceleration"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_Subtraction(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Subtracts an AngularAcceleration from another AngularAcceleration and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AngularAcceleration"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAcceleration"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAcceleration"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_UnaryNegation(Gu.Units.AngularAcceleration)">
            <summary>
            Returns an <see cref="T:Gu.Units.AngularAcceleration"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AngularAcceleration"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="angularAcceleration">An instance of <see cref="T:Gu.Units.AngularAcceleration"/></param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.op_UnaryPlus(Gu.Units.AngularAcceleration)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <returns>
            Returns <paramref name="angularAcceleration"/>.
            </returns>
            <param name="angularAcceleration">An instance of <see cref="T:Gu.Units.AngularAcceleration"/></param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularAcceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularAcceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularAcceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularAcceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.TryParse(System.String,Gu.Units.AngularAcceleration@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularAcceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularAcceleration"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.TryParse(System.String,System.IFormatProvider,Gu.Units.AngularAcceleration@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularAcceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularAcceleration"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.AngularAcceleration@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularAcceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularAcceleration"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.AngularAcceleration@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularAcceleration"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularAcceleration"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularAcceleration"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.AngularAcceleration"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.From(System.Double,Gu.Units.AngularAccelerationUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.FromRadiansPerSecondSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <param name="radiansPerSecondSquared">The value in <see cref="F:Gu.Units.AngularAccelerationUnit.RadiansPerSecondSquared"/></param>
            <returns>An instance of <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.FromDegreesPerSecondSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <param name="degreesPerSecondSquared">The value in °⋅s⁻².</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.FromRadiansPerHourSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <param name="radiansPerHourSquared">The value in h⁻²⋅rad.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.FromDegreesPerHourSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <param name="degreesPerHourSquared">The value in h⁻²⋅°.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.FromDegreesPerMinuteSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <param name="degreesPerMinuteSquared">The value in min⁻²⋅°.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.FromRadiansPerMinuteSquared(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularAcceleration"/>.
            </summary>
            <param name="radiansPerMinuteSquared">The value in min⁻²⋅rad.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.GetValue(Gu.Units.AngularAccelerationUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AngularAcceleration.SiValue"/> and <see cref="P:Gu.Units.AngularAcceleration.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AngularAcceleration.SiValue"/> and <see cref="P:Gu.Units.AngularAcceleration.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad/s²\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad/s²\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex rad/s²</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex rad/s²</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularAcceleration"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(Gu.Units.AngularAccelerationUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(Gu.Units.AngularAccelerationUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(Gu.Units.AngularAccelerationUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(Gu.Units.AngularAccelerationUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(System.String,Gu.Units.AngularAccelerationUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(System.String,Gu.Units.AngularAccelerationUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(System.String,Gu.Units.AngularAccelerationUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ToString(System.String,Gu.Units.AngularAccelerationUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.CompareTo(Gu.Units.AngularAcceleration)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.AngularAcceleration"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.AngularAcceleration"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.AngularAcceleration"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.Equals(Gu.Units.AngularAcceleration)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularAcceleration"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AngularAcceleration as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AngularAcceleration"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.Equals(Gu.Units.AngularAcceleration,Gu.Units.AngularAcceleration)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularAcceleration"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AngularAcceleration as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AngularAcceleration"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularAcceleration"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.AngularAcceleration"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.AngularAcceleration.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.AngularAccelerationTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AngularAcceleration'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AngularAccelerationTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularAccelerationTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularAccelerationTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularAccelerationTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngularAccelerationUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.AngularAcceleration"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularAccelerationUnit.RadiansPerSecondSquared">
            <summary>
            The RadiansPerSecondSquared unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularAccelerationUnit.DegreesPerSecondSquared">
            <summary>
            The DegreesPerSecondSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularAccelerationUnit.RadiansPerHourSquared">
            <summary>
            The RadiansPerHourSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularAccelerationUnit.DegreesPerHourSquared">
            <summary>
            The DegreesPerHourSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularAccelerationUnit.DegreesPerMinuteSquared">
            <summary>
            The DegreesPerMinuteSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularAccelerationUnit.RadiansPerMinuteSquared">
            <summary>
            The RadiansPerMinuteSquared unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularAccelerationUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AngularAccelerationUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AngularAccelerationUnit"/> struct.
            </summary>
            <param name="toRadiansPerSecondSquared">The conversion to <see cref="F:Gu.Units.AngularAccelerationUnit.RadiansPerSecondSquared"/></param>
            <param name="fromRadiansPerSecondSquared">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.AngularAccelerationUnit.RadiansPerSecondSquared"/></param>
        </member>
        <member name="P:Gu.Units.AngularAccelerationUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AngularAccelerationUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAccelerationUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.AngularAccelerationUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularAccelerationUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.op_Multiply(System.Double,Gu.Units.AngularAccelerationUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.op_Equality(Gu.Units.AngularAccelerationUnit,Gu.Units.AngularAccelerationUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularAccelerationUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAccelerationUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAccelerationUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.op_Inequality(Gu.Units.AngularAccelerationUnit,Gu.Units.AngularAccelerationUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularAccelerationUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularAccelerationUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularAccelerationUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.AngularAccelerationUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularAccelerationUnit"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.TryParse(System.String,Gu.Units.AngularAccelerationUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularAccelerationUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularAccelerationUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularAccelerationUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularAccelerationUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to RadiansPerSecondSquared.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from radiansPerSecondSquared.
            </summary>
            <param name="radiansPerSecondSquared">The value in RadiansPerSecondSquared</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new AngularAcceleration(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.GetScalarValue(Gu.Units.AngularAcceleration)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in RadiansPerSecondSquared
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.Equals(Gu.Units.AngularAccelerationUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularAccelerationUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.AngularAccelerationUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same AngularAccelerationUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngularAccelerationUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AngularAccelerationUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularAccelerationUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngularJerk">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularJerk.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.AngularJerkUnit.RadiansPerSecondCubed"/>
            </summary>
        </member>
        <member name="F:Gu.Units.AngularJerk.radiansPerSecondCubed">
            <summary>
            The quantity in <see cref="F:Gu.Units.AngularJerkUnit.RadiansPerSecondCubed"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AngularJerk.#ctor(System.Double,Gu.Units.AngularJerkUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AngularJerk"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.AngularJerkUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.AngularJerk.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.AngularJerkUnit.RadiansPerSecondCubed"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerk.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.AngularJerkUnit"/> for the <see cref="P:Gu.Units.AngularJerk.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerk.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.AngularJerk.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerk.RadiansPerSecondCubed">
            <summary>
            Gets the quantity in radiansPerSecondCubed".
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerk.DegreesPerSecondCubed">
            <summary>
            Gets the quantity in DegreesPerSecondCubed
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerk.RadiansPerHourCubed">
            <summary>
            Gets the quantity in RadiansPerHourCubed
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerk.DegreesPerHourCubed">
            <summary>
            Gets the quantity in DegreesPerHourCubed
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerk.RadiansPerMinuteCubed">
            <summary>
            Gets the quantity in RadiansPerMinuteCubed
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerk.DegreesPerMinuteCubed">
            <summary>
            Gets the quantity in DegreesPerMinuteCubed
            </summary>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Multiply(Gu.Units.AngularJerk,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Division(Gu.Units.AngularJerk,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Division(Gu.Units.AngularJerk,Gu.Units.AngularAcceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Division(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Equality(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularJerk"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Inequality(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularJerk"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_LessThan(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularJerk"/> is less than another specified <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_GreaterThan(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularJerk"/> is greater than another specified <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_LessThanOrEqual(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularJerk"/> is less than or equal to another specified <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_GreaterThanOrEqual(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularJerk"/> is greater than or equal to another specified <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Multiply(System.Double,Gu.Units.AngularJerk)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AngularJerk"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.AngularJerk"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Multiply(Gu.Units.AngularJerk,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AngularJerk"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.AngularJerk"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Division(Gu.Units.AngularJerk,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.AngularJerk"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.AngularJerk"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Addition(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.AngularJerk"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AngularJerk"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerk"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_Subtraction(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Subtracts an AngularJerk from another AngularJerk and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AngularJerk"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerk"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerk"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_UnaryNegation(Gu.Units.AngularJerk)">
            <summary>
            Returns an <see cref="T:Gu.Units.AngularJerk"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AngularJerk"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="angularJerk">An instance of <see cref="T:Gu.Units.AngularJerk"/></param>
        </member>
        <member name="M:Gu.Units.AngularJerk.op_UnaryPlus(Gu.Units.AngularJerk)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <returns>
            Returns <paramref name="angularJerk"/>.
            </returns>
            <param name="angularJerk">An instance of <see cref="T:Gu.Units.AngularJerk"/></param>
        </member>
        <member name="M:Gu.Units.AngularJerk.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularJerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularJerk"/></param>
            <returns>The <see cref="T:Gu.Units.AngularJerk"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularJerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AngularJerk"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularJerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.AngularJerk"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularJerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AngularJerk"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.TryParse(System.String,Gu.Units.AngularJerk@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularJerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularJerk"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularJerk"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.TryParse(System.String,System.IFormatProvider,Gu.Units.AngularJerk@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularJerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularJerk"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularJerk"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.AngularJerk@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularJerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularJerk"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularJerk"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.AngularJerk@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularJerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularJerk"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularJerk"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularJerk"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.AngularJerk"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.From(System.Double,Gu.Units.AngularJerkUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.FromRadiansPerSecondCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <param name="radiansPerSecondCubed">The value in <see cref="F:Gu.Units.AngularJerkUnit.RadiansPerSecondCubed"/></param>
            <returns>An instance of <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.FromDegreesPerSecondCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <param name="degreesPerSecondCubed">The value in °⋅s⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.FromRadiansPerHourCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <param name="radiansPerHourCubed">The value in rad⋅h⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.FromDegreesPerHourCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <param name="degreesPerHourCubed">The value in °⋅h⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.FromRadiansPerMinuteCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <param name="radiansPerMinuteCubed">The value in rad⋅min⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.FromDegreesPerMinuteCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularJerk"/>.
            </summary>
            <param name="degreesPerMinuteCubed">The value in °⋅min⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.GetValue(Gu.Units.AngularJerkUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AngularJerk.SiValue"/> and <see cref="P:Gu.Units.AngularJerk.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AngularJerk.SiValue"/> and <see cref="P:Gu.Units.AngularJerk.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad/s³\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad/s³\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex rad/s³</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex rad/s³</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularJerk"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(Gu.Units.AngularJerkUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(Gu.Units.AngularJerkUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(Gu.Units.AngularJerkUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(Gu.Units.AngularJerkUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(System.String,Gu.Units.AngularJerkUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(System.String,Gu.Units.AngularJerkUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(System.String,Gu.Units.AngularJerkUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ToString(System.String,Gu.Units.AngularJerkUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.CompareTo(Gu.Units.AngularJerk)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.AngularJerk"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.AngularJerk"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.AngularJerk"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.Equals(Gu.Units.AngularJerk)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularJerk"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AngularJerk as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AngularJerk"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.Equals(Gu.Units.AngularJerk,Gu.Units.AngularJerk)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularJerk"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AngularJerk as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AngularJerk"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.AngularJerk.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularJerk"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.AngularJerk"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.AngularJerk.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.AngularJerk.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.AngularJerkTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AngularJerk'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AngularJerkTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularJerkTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularJerkTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularJerkTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngularJerkUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.AngularJerk"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularJerkUnit.RadiansPerSecondCubed">
            <summary>
            The RadiansPerSecondCubed unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularJerkUnit.DegreesPerSecondCubed">
            <summary>
            The DegreesPerSecondCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularJerkUnit.RadiansPerHourCubed">
            <summary>
            The RadiansPerHourCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularJerkUnit.DegreesPerHourCubed">
            <summary>
            The DegreesPerHourCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularJerkUnit.RadiansPerMinuteCubed">
            <summary>
            The RadiansPerMinuteCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularJerkUnit.DegreesPerMinuteCubed">
            <summary>
            The DegreesPerMinuteCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularJerkUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AngularJerkUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AngularJerkUnit"/> struct.
            </summary>
            <param name="toRadiansPerSecondCubed">The conversion to <see cref="F:Gu.Units.AngularJerkUnit.RadiansPerSecondCubed"/></param>
            <param name="fromRadiansPerSecondCubed">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.AngularJerkUnit.RadiansPerSecondCubed"/></param>
        </member>
        <member name="P:Gu.Units.AngularJerkUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AngularJerkUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerkUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.AngularJerkUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularJerkUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.op_Multiply(System.Double,Gu.Units.AngularJerkUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularJerk"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.op_Equality(Gu.Units.AngularJerkUnit,Gu.Units.AngularJerkUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularJerkUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerkUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerkUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.op_Inequality(Gu.Units.AngularJerkUnit,Gu.Units.AngularJerkUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularJerkUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularJerkUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularJerkUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.AngularJerkUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularJerkUnit"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.TryParse(System.String,Gu.Units.AngularJerkUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularJerkUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularJerkUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularJerkUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularJerkUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to RadiansPerSecondCubed.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from radiansPerSecondCubed.
            </summary>
            <param name="radiansPerSecondCubed">The value in RadiansPerSecondCubed</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new AngularJerk(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.GetScalarValue(Gu.Units.AngularJerk)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in RadiansPerSecondCubed
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.Equals(Gu.Units.AngularJerkUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularJerkUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.AngularJerkUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same AngularJerkUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularJerkUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngularJerkUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AngularJerkUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AngularJerkUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularJerkUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularJerkUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularJerkUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngularSpeed">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeed.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.AngularSpeedUnit.RadiansPerSecond"/>
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeed.radiansPerSecond">
            <summary>
            The quantity in <see cref="F:Gu.Units.AngularSpeedUnit.RadiansPerSecond"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AngularSpeed.#ctor(System.Double,Gu.Units.AngularSpeedUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AngularSpeed"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.AngularSpeedUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.AngularSpeed.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.AngularSpeedUnit.RadiansPerSecond"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeed.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.AngularSpeedUnit"/> for the <see cref="P:Gu.Units.AngularSpeed.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeed.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.AngularSpeed.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeed.RadiansPerSecond">
            <summary>
            Gets the quantity in radiansPerSecond".
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeed.RevolutionsPerMinute">
            <summary>
            Gets the quantity in RevolutionsPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeed.DegreesPerSecond">
            <summary>
            Gets the quantity in DegreesPerSecond
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeed.DegreesPerMinute">
            <summary>
            Gets the quantity in DegreesPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeed.RadiansPerMinute">
            <summary>
            Gets the quantity in RadiansPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeed.DegreesPerHour">
            <summary>
            Gets the quantity in DegreesPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeed.RadiansPerHour">
            <summary>
            Gets the quantity in RadiansPerHour
            </summary>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Multiply(Gu.Units.AngularSpeed,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Division(Gu.Units.AngularSpeed,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Division(Gu.Units.AngularSpeed,Gu.Units.Angle)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Multiply(Gu.Units.AngularSpeed,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Division(Gu.Units.AngularSpeed,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Multiply(Gu.Units.AngularSpeed,Gu.Units.Torque)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Division(Gu.Units.AngularSpeed,Gu.Units.AngularAcceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Division(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Equality(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularSpeed"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Inequality(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularSpeed"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_LessThan(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularSpeed"/> is less than another specified <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_GreaterThan(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularSpeed"/> is greater than another specified <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_LessThanOrEqual(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularSpeed"/> is less than or equal to another specified <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_GreaterThanOrEqual(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AngularSpeed"/> is greater than or equal to another specified <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Multiply(System.Double,Gu.Units.AngularSpeed)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AngularSpeed"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.AngularSpeed"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Multiply(Gu.Units.AngularSpeed,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AngularSpeed"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.AngularSpeed"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Division(Gu.Units.AngularSpeed,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.AngularSpeed"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.AngularSpeed"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Addition(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.AngularSpeed"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AngularSpeed"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeed"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_Subtraction(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Subtracts an AngularSpeed from another AngularSpeed and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AngularSpeed"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeed"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeed"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_UnaryNegation(Gu.Units.AngularSpeed)">
            <summary>
            Returns an <see cref="T:Gu.Units.AngularSpeed"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AngularSpeed"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="angularSpeed">An instance of <see cref="T:Gu.Units.AngularSpeed"/></param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.op_UnaryPlus(Gu.Units.AngularSpeed)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <returns>
            Returns <paramref name="angularSpeed"/>.
            </returns>
            <param name="angularSpeed">An instance of <see cref="T:Gu.Units.AngularSpeed"/></param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularSpeed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularSpeed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularSpeed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularSpeed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.TryParse(System.String,Gu.Units.AngularSpeed@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularSpeed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularSpeed"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularSpeed"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.TryParse(System.String,System.IFormatProvider,Gu.Units.AngularSpeed@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularSpeed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularSpeed"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularSpeed"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.AngularSpeed@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularSpeed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularSpeed"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularSpeed"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.AngularSpeed@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularSpeed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularSpeed"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularSpeed"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.AngularSpeed"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.From(System.Double,Gu.Units.AngularSpeedUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.FromRadiansPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <param name="radiansPerSecond">The value in <see cref="F:Gu.Units.AngularSpeedUnit.RadiansPerSecond"/></param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.FromRevolutionsPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <param name="revolutionsPerMinute">The value in rpm.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.FromDegreesPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <param name="degreesPerSecond">The value in °⋅s⁻¹.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.FromDegreesPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <param name="degreesPerMinute">The value in min⁻¹⋅°.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.FromRadiansPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <param name="radiansPerMinute">The value in min⁻¹⋅rad.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.FromDegreesPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <param name="degreesPerHour">The value in h⁻¹⋅°.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.FromRadiansPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AngularSpeed"/>.
            </summary>
            <param name="radiansPerHour">The value in h⁻¹⋅rad.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.GetValue(Gu.Units.AngularSpeedUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AngularSpeed.SiValue"/> and <see cref="P:Gu.Units.AngularSpeed.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AngularSpeed.SiValue"/> and <see cref="P:Gu.Units.AngularSpeed.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad/s\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 rad/s\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex rad/s</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex rad/s</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AngularSpeed"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(Gu.Units.AngularSpeedUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(Gu.Units.AngularSpeedUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(Gu.Units.AngularSpeedUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(Gu.Units.AngularSpeedUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(System.String,Gu.Units.AngularSpeedUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(System.String,Gu.Units.AngularSpeedUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(System.String,Gu.Units.AngularSpeedUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ToString(System.String,Gu.Units.AngularSpeedUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.CompareTo(Gu.Units.AngularSpeed)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.AngularSpeed"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.AngularSpeed"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.AngularSpeed"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.Equals(Gu.Units.AngularSpeed)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularSpeed"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AngularSpeed as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AngularSpeed"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.Equals(Gu.Units.AngularSpeed,Gu.Units.AngularSpeed)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularSpeed"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AngularSpeed as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AngularSpeed"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularSpeed"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.AngularSpeed"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.AngularSpeed.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.AngularSpeed.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.AngularSpeedTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AngularSpeed'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AngularSpeedTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularSpeedTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularSpeedTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularSpeedTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngularSpeedUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.AngularSpeed"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeedUnit.RadiansPerSecond">
            <summary>
            The RadiansPerSecond unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeedUnit.RevolutionsPerMinute">
            <summary>
            The RevolutionsPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeedUnit.DegreesPerSecond">
            <summary>
            The DegreesPerSecond unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeedUnit.DegreesPerMinute">
            <summary>
            The DegreesPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeedUnit.RadiansPerMinute">
            <summary>
            The RadiansPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeedUnit.DegreesPerHour">
            <summary>
            The DegreesPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeedUnit.RadiansPerHour">
            <summary>
            The RadiansPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AngularSpeedUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AngularSpeedUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AngularSpeedUnit"/> struct.
            </summary>
            <param name="toRadiansPerSecond">The conversion to <see cref="F:Gu.Units.AngularSpeedUnit.RadiansPerSecond"/></param>
            <param name="fromRadiansPerSecond">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.AngularSpeedUnit.RadiansPerSecond"/></param>
        </member>
        <member name="P:Gu.Units.AngularSpeedUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AngularSpeedUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeedUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.AngularSpeedUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AngularSpeedUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.op_Multiply(System.Double,Gu.Units.AngularSpeedUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.op_Equality(Gu.Units.AngularSpeedUnit,Gu.Units.AngularSpeedUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularSpeedUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeedUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeedUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.op_Inequality(Gu.Units.AngularSpeedUnit,Gu.Units.AngularSpeedUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AngularSpeedUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AngularSpeedUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AngularSpeedUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.AngularSpeedUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AngularSpeedUnit"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.TryParse(System.String,Gu.Units.AngularSpeedUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AngularSpeedUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AngularSpeedUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AngularSpeedUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AngularSpeedUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to RadiansPerSecond.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from radiansPerSecond.
            </summary>
            <param name="radiansPerSecond">The value in RadiansPerSecond</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new AngularSpeed(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.GetScalarValue(Gu.Units.AngularSpeed)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in RadiansPerSecond
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.Equals(Gu.Units.AngularSpeedUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AngularSpeedUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.AngularSpeedUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same AngularSpeedUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularSpeedUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AngularSpeedUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AngularSpeedUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AngularSpeedUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularSpeedUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularSpeedUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AngularSpeedUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Area">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Area"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Area.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.AreaUnit.SquareMetres"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Area.squareMetres">
            <summary>
            The quantity in <see cref="F:Gu.Units.AreaUnit.SquareMetres"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Area.#ctor(System.Double,Gu.Units.AreaUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Area"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.AreaUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Area.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.AreaUnit.SquareMetres"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.AreaUnit"/> for the <see cref="P:Gu.Units.Area.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Area.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Area.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SquareMetres">
            <summary>
            Gets the quantity in squareMetres".
            </summary>
        </member>
        <member name="P:Gu.Units.Area.Hectares">
            <summary>
            Gets the quantity in Hectares
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SquareMillimetres">
            <summary>
            Gets the quantity in SquareMillimetres
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SquareCentimetres">
            <summary>
            Gets the quantity in SquareCentimetres
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SquareDecimetres">
            <summary>
            Gets the quantity in SquareDecimetres
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SquareKilometres">
            <summary>
            Gets the quantity in SquareKilometres
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SquareMile">
            <summary>
            Gets the quantity in SquareMile
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SquareYards">
            <summary>
            Gets the quantity in SquareYards
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SquareInches">
            <summary>
            Gets the quantity in SquareInches
            </summary>
        </member>
        <member name="P:Gu.Units.Area.SquareFeet">
            <summary>
            Gets the quantity in SquareFeet
            </summary>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Division(Gu.Units.Area,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Division(Gu.Units.Area,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Division(Gu.Units.Area,Gu.Units.Volume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,Gu.Units.Pressure)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Division(Gu.Units.Area,Gu.Units.Energy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,Gu.Units.Stiffness)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Division(Gu.Units.Area,Gu.Units.Flexibility)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,Gu.Units.Illuminance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LuminousFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,Gu.Units.MagneticFieldStrength)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Division(Gu.Units.Area,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,Gu.Units.AreaDensity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Division(Gu.Units.Area,Gu.Units.KinematicViscosity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Division(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Equality(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Area"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Area"/>.</param>
        </member>
        <member name="M:Gu.Units.Area.op_Inequality(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Area"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Area"/>.</param>
        </member>
        <member name="M:Gu.Units.Area.op_LessThan(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Area"/> is less than another specified <see cref="T:Gu.Units.Area"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Area"/>.</param>
        </member>
        <member name="M:Gu.Units.Area.op_GreaterThan(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Area"/> is greater than another specified <see cref="T:Gu.Units.Area"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Area"/>.</param>
        </member>
        <member name="M:Gu.Units.Area.op_LessThanOrEqual(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Area"/> is less than or equal to another specified <see cref="T:Gu.Units.Area"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Area"/>.</param>
        </member>
        <member name="M:Gu.Units.Area.op_GreaterThanOrEqual(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Area"/> is greater than or equal to another specified <see cref="T:Gu.Units.Area"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Area"/>.</param>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(System.Double,Gu.Units.Area)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Area"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Area"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Area"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Multiply(Gu.Units.Area,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Area"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Area"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Division(Gu.Units.Area,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Area"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Area"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Area.op_Addition(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Area"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Area"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Area"/>.</param>
        </member>
        <member name="M:Gu.Units.Area.op_Subtraction(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Subtracts an Area from another Area and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Area"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Area"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Area"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Area.op_UnaryNegation(Gu.Units.Area)">
            <summary>
            Returns an <see cref="T:Gu.Units.Area"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Area"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="area">An instance of <see cref="T:Gu.Units.Area"/></param>
        </member>
        <member name="M:Gu.Units.Area.op_UnaryPlus(Gu.Units.Area)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <returns>
            Returns <paramref name="area"/>.
            </returns>
            <param name="area">An instance of <see cref="T:Gu.Units.Area"/></param>
        </member>
        <member name="M:Gu.Units.Area.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Area"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Area"/></param>
            <returns>The <see cref="T:Gu.Units.Area"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Area.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Area"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Area"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Area"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Area.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Area"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Area"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Area"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Area.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Area"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Area"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Area"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Area.TryParse(System.String,Gu.Units.Area@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Area"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Area"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Area"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Area"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Area.TryParse(System.String,System.IFormatProvider,Gu.Units.Area@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Area"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Area"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Area"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Area"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Area.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Area@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Area"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Area"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Area"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Area"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Area.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Area@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Area"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Area"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Area"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Area"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Area.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Area"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.From(System.Double,Gu.Units.AreaUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromSquareMetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="squareMetres">The value in <see cref="F:Gu.Units.AreaUnit.SquareMetres"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromHectares(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="hectares">The value in ha.</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromSquareMillimetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="squareMillimetres">The value in mm².</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromSquareCentimetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="squareCentimetres">The value in cm².</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromSquareDecimetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="squareDecimetres">The value in dm².</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromSquareKilometres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="squareKilometres">The value in km².</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromSquareMile(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="squareMile">The value in mi².</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromSquareYards(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="squareYards">The value in yd².</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromSquareInches(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="squareInches">The value in in².</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.FromSquareFeet(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Area"/>.
            </summary>
            <param name="squareFeet">The value in ft².</param>
            <returns>An instance of <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.GetValue(Gu.Units.AreaUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Area.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Area.SiValue"/> and <see cref="P:Gu.Units.Area.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Area.SiValue"/> and <see cref="P:Gu.Units.Area.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m²\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m²\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m²</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m²</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Area"/></returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(Gu.Units.AreaUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(Gu.Units.AreaUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(Gu.Units.AreaUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(Gu.Units.AreaUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(System.String,Gu.Units.AreaUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(System.String,Gu.Units.AreaUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(System.String,Gu.Units.AreaUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Area.ToString(System.String,Gu.Units.AreaUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Area.CompareTo(Gu.Units.Area)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Area"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Area"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Area"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Area.Equals(Gu.Units.Area)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Area"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Area as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Area"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Area.Equals(Gu.Units.Area,Gu.Units.Area)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Area"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Area as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Area"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Area.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Area"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Area"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Area.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Area.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Area.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Area.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.AreaDensity">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.AreaDensity"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaDensity.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.AreaDensityUnit.KilogramsPerSquareMetre"/>
            </summary>
        </member>
        <member name="F:Gu.Units.AreaDensity.kilogramsPerSquareMetre">
            <summary>
            The quantity in <see cref="F:Gu.Units.AreaDensityUnit.KilogramsPerSquareMetre"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AreaDensity.#ctor(System.Double,Gu.Units.AreaDensityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AreaDensity"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.AreaDensityUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.AreaDensity.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.AreaDensityUnit.KilogramsPerSquareMetre"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AreaDensity.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.AreaDensityUnit"/> for the <see cref="P:Gu.Units.AreaDensity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AreaDensity.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.AreaDensity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AreaDensity.KilogramsPerSquareMetre">
            <summary>
            Gets the quantity in kilogramsPerSquareMetre".
            </summary>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Division(Gu.Units.AreaDensity,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Density"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Multiply(Gu.Units.AreaDensity,Gu.Units.Area)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Division(Gu.Units.AreaDensity,Gu.Units.Density)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Multiply(Gu.Units.AreaDensity,Gu.Units.Acceleration)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Multiply(Gu.Units.AreaDensity,Gu.Units.VolumetricFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Multiply(Gu.Units.AreaDensity,Gu.Units.SpecificEnergy)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Multiply(Gu.Units.AreaDensity,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Density"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Multiply(Gu.Units.AreaDensity,Gu.Units.SpecificVolume)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Multiply(Gu.Units.AreaDensity,Gu.Units.KinematicViscosity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Division(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Equality(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AreaDensity"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Inequality(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AreaDensity"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_LessThan(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AreaDensity"/> is less than another specified <see cref="T:Gu.Units.AreaDensity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_GreaterThan(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AreaDensity"/> is greater than another specified <see cref="T:Gu.Units.AreaDensity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_LessThanOrEqual(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AreaDensity"/> is less than or equal to another specified <see cref="T:Gu.Units.AreaDensity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_GreaterThanOrEqual(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.AreaDensity"/> is greater than or equal to another specified <see cref="T:Gu.Units.AreaDensity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Multiply(System.Double,Gu.Units.AreaDensity)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AreaDensity"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.AreaDensity"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Multiply(Gu.Units.AreaDensity,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.AreaDensity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.AreaDensity"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Division(Gu.Units.AreaDensity,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.AreaDensity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.AreaDensity"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Addition(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.AreaDensity"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AreaDensity"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensity"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_Subtraction(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Subtracts an AreaDensity from another AreaDensity and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AreaDensity"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensity"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensity"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_UnaryNegation(Gu.Units.AreaDensity)">
            <summary>
            Returns an <see cref="T:Gu.Units.AreaDensity"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.AreaDensity"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="areaDensity">An instance of <see cref="T:Gu.Units.AreaDensity"/></param>
        </member>
        <member name="M:Gu.Units.AreaDensity.op_UnaryPlus(Gu.Units.AreaDensity)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.AreaDensity"/>.
            </summary>
            <returns>
            Returns <paramref name="areaDensity"/>.
            </returns>
            <param name="areaDensity">An instance of <see cref="T:Gu.Units.AreaDensity"/></param>
        </member>
        <member name="M:Gu.Units.AreaDensity.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaDensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaDensity"/></param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaDensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaDensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaDensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.TryParse(System.String,Gu.Units.AreaDensity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaDensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AreaDensity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AreaDensity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.TryParse(System.String,System.IFormatProvider,Gu.Units.AreaDensity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaDensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AreaDensity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AreaDensity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.AreaDensity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaDensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AreaDensity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AreaDensity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.AreaDensity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaDensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaDensity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.AreaDensity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AreaDensity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.AreaDensity"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.AreaDensity"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.From(System.Double,Gu.Units.AreaDensityUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AreaDensity"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AreaDensity"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.FromKilogramsPerSquareMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.AreaDensity"/>.
            </summary>
            <param name="kilogramsPerSquareMetre">The value in <see cref="F:Gu.Units.AreaDensityUnit.KilogramsPerSquareMetre"/></param>
            <returns>An instance of <see cref="T:Gu.Units.AreaDensity"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.GetValue(Gu.Units.AreaDensityUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AreaDensity.SiValue"/> and <see cref="P:Gu.Units.AreaDensity.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.AreaDensity"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.AreaDensity.SiValue"/> and <see cref="P:Gu.Units.AreaDensity.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AreaDensity"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg/m²\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AreaDensity"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg/m²\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AreaDensity"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex kg/m²</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AreaDensity"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex kg/m²</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.AreaDensity"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(Gu.Units.AreaDensityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(Gu.Units.AreaDensityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(Gu.Units.AreaDensityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(Gu.Units.AreaDensityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(System.String,Gu.Units.AreaDensityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(System.String,Gu.Units.AreaDensityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(System.String,Gu.Units.AreaDensityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ToString(System.String,Gu.Units.AreaDensityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.CompareTo(Gu.Units.AreaDensity)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.AreaDensity"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.AreaDensity"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.AreaDensity"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.Equals(Gu.Units.AreaDensity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AreaDensity"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AreaDensity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AreaDensity"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.Equals(Gu.Units.AreaDensity,Gu.Units.AreaDensity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AreaDensity"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same AreaDensity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.AreaDensity"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.AreaDensity.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AreaDensity"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.AreaDensity"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.AreaDensity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.AreaDensity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.AreaDensityTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AreaDensity'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AreaDensityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaDensityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaDensityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaDensityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AreaDensityUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.AreaDensity"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaDensityUnit.KilogramsPerSquareMetre">
            <summary>
            The KilogramsPerSquareMetre unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaDensityUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AreaDensityUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AreaDensityUnit"/> struct.
            </summary>
            <param name="toKilogramsPerSquareMetre">The conversion to <see cref="F:Gu.Units.AreaDensityUnit.KilogramsPerSquareMetre"/></param>
            <param name="fromKilogramsPerSquareMetre">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.AreaDensityUnit.KilogramsPerSquareMetre"/></param>
        </member>
        <member name="P:Gu.Units.AreaDensityUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AreaDensityUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.AreaDensityUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.AreaDensityUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AreaDensityUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.op_Multiply(System.Double,Gu.Units.AreaDensityUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.op_Equality(Gu.Units.AreaDensityUnit,Gu.Units.AreaDensityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AreaDensityUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.op_Inequality(Gu.Units.AreaDensityUnit,Gu.Units.AreaDensityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AreaDensityUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaDensityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaDensityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.AreaDensityUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AreaDensityUnit"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.TryParse(System.String,Gu.Units.AreaDensityUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaDensityUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaDensityUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AreaDensityUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AreaDensityUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to KilogramsPerSquareMetre.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from kilogramsPerSquareMetre.
            </summary>
            <param name="kilogramsPerSquareMetre">The value in KilogramsPerSquareMetre</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new AreaDensity(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.GetScalarValue(Gu.Units.AreaDensity)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in KilogramsPerSquareMetre
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.Equals(Gu.Units.AreaDensityUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AreaDensityUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.AreaDensityUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same AreaDensityUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaDensityUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AreaDensityUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AreaDensityUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AreaDensityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaDensityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaDensityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaDensityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AreaTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Area'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AreaTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AreaUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Area"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.SquareMetres">
            <summary>
            The SquareMetres unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.Hectares">
            <summary>
            The Hectares unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.SquareMillimetres">
            <summary>
            The SquareMillimetres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.SquareCentimetres">
            <summary>
            The SquareCentimetres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.SquareDecimetres">
            <summary>
            The SquareDecimetres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.SquareKilometres">
            <summary>
            The SquareKilometres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.SquareMile">
            <summary>
            The SquareMile unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.SquareYards">
            <summary>
            The SquareYards unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.SquareInches">
            <summary>
            The SquareInches unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.SquareFeet">
            <summary>
            The SquareFeet unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.AreaUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AreaUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.AreaUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.AreaUnit"/> struct.
            </summary>
            <param name="toSquareMetres">The conversion to <see cref="F:Gu.Units.AreaUnit.SquareMetres"/></param>
            <param name="fromSquareMetres">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.AreaUnit.SquareMetres"/></param>
        </member>
        <member name="P:Gu.Units.AreaUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.AreaUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.AreaUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.AreaUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.AreaUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaUnit.op_Multiply(System.Double,Gu.Units.AreaUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.op_Equality(Gu.Units.AreaUnit,Gu.Units.AreaUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AreaUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaUnit.op_Inequality(Gu.Units.AreaUnit,Gu.Units.AreaUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.AreaUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.AreaUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.AreaUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.AreaUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.AreaUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.AreaUnit"/></returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.TryParse(System.String,Gu.Units.AreaUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.AreaUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.AreaUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.AreaUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.AreaUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to SquareMetres.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from squareMetres.
            </summary>
            <param name="squareMetres">The value in SquareMetres</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Area(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.GetScalarValue(Gu.Units.Area)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in SquareMetres
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.Equals(Gu.Units.AreaUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.AreaUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.AreaUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same AreaUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.AreaUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.AreaUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.AreaUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.AreaUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.AreaUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Capacitance">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Capacitance.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.CapacitanceUnit.Farads"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Capacitance.farads">
            <summary>
            The quantity in <see cref="F:Gu.Units.CapacitanceUnit.Farads"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Capacitance.#ctor(System.Double,Gu.Units.CapacitanceUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Capacitance"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.CapacitanceUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Capacitance.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.CapacitanceUnit.Farads"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Capacitance.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.CapacitanceUnit"/> for the <see cref="P:Gu.Units.Capacitance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Capacitance.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Capacitance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Capacitance.Farads">
            <summary>
            Gets the quantity in farads".
            </summary>
        </member>
        <member name="P:Gu.Units.Capacitance.Nanofarads">
            <summary>
            Gets the quantity in Nanofarads
            </summary>
        </member>
        <member name="P:Gu.Units.Capacitance.Microfarads">
            <summary>
            Gets the quantity in Microfarads
            </summary>
        </member>
        <member name="P:Gu.Units.Capacitance.Millifarads">
            <summary>
            Gets the quantity in Millifarads
            </summary>
        </member>
        <member name="P:Gu.Units.Capacitance.Kilofarads">
            <summary>
            Gets the quantity in Kilofarads
            </summary>
        </member>
        <member name="P:Gu.Units.Capacitance.Megafarads">
            <summary>
            Gets the quantity in Megafarads
            </summary>
        </member>
        <member name="P:Gu.Units.Capacitance.Gigafarads">
            <summary>
            Gets the quantity in Gigafarads
            </summary>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Division(Gu.Units.Capacitance,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Multiply(Gu.Units.Capacitance,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Multiply(Gu.Units.Capacitance,Gu.Units.Voltage)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Multiply(Gu.Units.Capacitance,Gu.Units.Resistance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Division(Gu.Units.Capacitance,Gu.Units.ElectricalConductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Division(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Equality(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Capacitance"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Inequality(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Capacitance"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.op_LessThan(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Capacitance"/> is less than another specified <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.op_GreaterThan(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Capacitance"/> is greater than another specified <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.op_LessThanOrEqual(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Capacitance"/> is less than or equal to another specified <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.op_GreaterThanOrEqual(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Capacitance"/> is greater than or equal to another specified <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Multiply(System.Double,Gu.Units.Capacitance)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Capacitance"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Capacitance"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Multiply(Gu.Units.Capacitance,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Capacitance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Capacitance"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Division(Gu.Units.Capacitance,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Capacitance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Capacitance"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Addition(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Capacitance"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Capacitance"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Capacitance"/>.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.op_Subtraction(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Subtracts an Capacitance from another Capacitance and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Capacitance"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Capacitance"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Capacitance"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Capacitance.op_UnaryNegation(Gu.Units.Capacitance)">
            <summary>
            Returns an <see cref="T:Gu.Units.Capacitance"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Capacitance"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="capacitance">An instance of <see cref="T:Gu.Units.Capacitance"/></param>
        </member>
        <member name="M:Gu.Units.Capacitance.op_UnaryPlus(Gu.Units.Capacitance)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <returns>
            Returns <paramref name="capacitance"/>.
            </returns>
            <param name="capacitance">An instance of <see cref="T:Gu.Units.Capacitance"/></param>
        </member>
        <member name="M:Gu.Units.Capacitance.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Capacitance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Capacitance"/></param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Capacitance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Capacitance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Capacitance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.TryParse(System.String,Gu.Units.Capacitance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Capacitance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Capacitance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Capacitance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.TryParse(System.String,System.IFormatProvider,Gu.Units.Capacitance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Capacitance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Capacitance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Capacitance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Capacitance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Capacitance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Capacitance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Capacitance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Capacitance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Capacitance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Capacitance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Capacitance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Capacitance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Capacitance"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.From(System.Double,Gu.Units.CapacitanceUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.FromFarads(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <param name="farads">The value in <see cref="F:Gu.Units.CapacitanceUnit.Farads"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.FromNanofarads(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <param name="nanofarads">The value in nF.</param>
            <returns>An instance of <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.FromMicrofarads(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <param name="microfarads">The value in μF.</param>
            <returns>An instance of <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.FromMillifarads(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <param name="millifarads">The value in mF.</param>
            <returns>An instance of <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.FromKilofarads(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <param name="kilofarads">The value in kF.</param>
            <returns>An instance of <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.FromMegafarads(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <param name="megafarads">The value in MF.</param>
            <returns>An instance of <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.FromGigafarads(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Capacitance"/>.
            </summary>
            <param name="gigafarads">The value in GF.</param>
            <returns>An instance of <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.GetValue(Gu.Units.CapacitanceUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Capacitance.SiValue"/> and <see cref="P:Gu.Units.Capacitance.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Capacitance.SiValue"/> and <see cref="P:Gu.Units.Capacitance.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 F\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 F\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex F</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex F</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Capacitance"/></returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(Gu.Units.CapacitanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(Gu.Units.CapacitanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(Gu.Units.CapacitanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(Gu.Units.CapacitanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(System.String,Gu.Units.CapacitanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(System.String,Gu.Units.CapacitanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(System.String,Gu.Units.CapacitanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ToString(System.String,Gu.Units.CapacitanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.CompareTo(Gu.Units.Capacitance)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Capacitance"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Capacitance"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Capacitance"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.Equals(Gu.Units.Capacitance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Capacitance"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Capacitance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Capacitance"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.Equals(Gu.Units.Capacitance,Gu.Units.Capacitance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Capacitance"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Capacitance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Capacitance"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Capacitance.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Capacitance"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Capacitance"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Capacitance.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Capacitance.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Capacitance.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Capacitance.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.CapacitanceTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Capacitance'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.CapacitanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CapacitanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CapacitanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CapacitanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.CapacitanceUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Capacitance"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CapacitanceUnit.Farads">
            <summary>
            The Farads unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CapacitanceUnit.Nanofarads">
            <summary>
            The Nanofarads unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CapacitanceUnit.Microfarads">
            <summary>
            The Microfarads unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CapacitanceUnit.Millifarads">
            <summary>
            The Millifarads unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CapacitanceUnit.Kilofarads">
            <summary>
            The Kilofarads unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CapacitanceUnit.Megafarads">
            <summary>
            The Megafarads unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CapacitanceUnit.Gigafarads">
            <summary>
            The Gigafarads unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CapacitanceUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.CapacitanceUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.CapacitanceUnit"/> struct.
            </summary>
            <param name="toFarads">The conversion to <see cref="F:Gu.Units.CapacitanceUnit.Farads"/></param>
            <param name="fromFarads">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.CapacitanceUnit.Farads"/></param>
        </member>
        <member name="P:Gu.Units.CapacitanceUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.CapacitanceUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.CapacitanceUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.CapacitanceUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.CapacitanceUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.op_Multiply(System.Double,Gu.Units.CapacitanceUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.op_Equality(Gu.Units.CapacitanceUnit,Gu.Units.CapacitanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.CapacitanceUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CapacitanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CapacitanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.op_Inequality(Gu.Units.CapacitanceUnit,Gu.Units.CapacitanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.CapacitanceUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CapacitanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CapacitanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.CapacitanceUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.CapacitanceUnit"/></returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.TryParse(System.String,Gu.Units.CapacitanceUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CapacitanceUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CapacitanceUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.CapacitanceUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.CapacitanceUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Farads.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from farads.
            </summary>
            <param name="farads">The value in Farads</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Capacitance(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.GetScalarValue(Gu.Units.Capacitance)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Farads
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.Equals(Gu.Units.CapacitanceUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.CapacitanceUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.CapacitanceUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same CapacitanceUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CapacitanceUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.CapacitanceUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.CapacitanceUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.CapacitanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CapacitanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CapacitanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CapacitanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.CatalyticActivity">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.CatalyticActivity"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.CatalyticActivity.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.CatalyticActivityUnit.Katals"/>
            </summary>
        </member>
        <member name="F:Gu.Units.CatalyticActivity.katals">
            <summary>
            The quantity in <see cref="F:Gu.Units.CatalyticActivityUnit.Katals"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.#ctor(System.Double,Gu.Units.CatalyticActivityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.CatalyticActivity"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.CatalyticActivityUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.CatalyticActivity.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.CatalyticActivityUnit.Katals"/>
            </summary>
        </member>
        <member name="P:Gu.Units.CatalyticActivity.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.CatalyticActivityUnit"/> for the <see cref="P:Gu.Units.CatalyticActivity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.CatalyticActivity.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.CatalyticActivity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.CatalyticActivity.Katals">
            <summary>
            Gets the quantity in katals".
            </summary>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Multiply(Gu.Units.CatalyticActivity,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AmountOfSubstance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Division(Gu.Units.CatalyticActivity,Gu.Units.AmountOfSubstance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Division(Gu.Units.CatalyticActivity,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AmountOfSubstance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Multiply(Gu.Units.CatalyticActivity,Gu.Units.MolarMass)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Division(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Equality(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.CatalyticActivity"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Inequality(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.CatalyticActivity"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_LessThan(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.CatalyticActivity"/> is less than another specified <see cref="T:Gu.Units.CatalyticActivity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_GreaterThan(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.CatalyticActivity"/> is greater than another specified <see cref="T:Gu.Units.CatalyticActivity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_LessThanOrEqual(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.CatalyticActivity"/> is less than or equal to another specified <see cref="T:Gu.Units.CatalyticActivity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_GreaterThanOrEqual(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.CatalyticActivity"/> is greater than or equal to another specified <see cref="T:Gu.Units.CatalyticActivity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Multiply(System.Double,Gu.Units.CatalyticActivity)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.CatalyticActivity"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.CatalyticActivity"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Multiply(Gu.Units.CatalyticActivity,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.CatalyticActivity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.CatalyticActivity"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Division(Gu.Units.CatalyticActivity,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.CatalyticActivity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.CatalyticActivity"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Addition(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.CatalyticActivity"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.CatalyticActivity"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivity"/>.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_Subtraction(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Subtracts an CatalyticActivity from another CatalyticActivity and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.CatalyticActivity"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivity"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivity"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_UnaryNegation(Gu.Units.CatalyticActivity)">
            <summary>
            Returns an <see cref="T:Gu.Units.CatalyticActivity"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.CatalyticActivity"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="catalyticActivity">An instance of <see cref="T:Gu.Units.CatalyticActivity"/></param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.op_UnaryPlus(Gu.Units.CatalyticActivity)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.CatalyticActivity"/>.
            </summary>
            <returns>
            Returns <paramref name="catalyticActivity"/>.
            </returns>
            <param name="catalyticActivity">An instance of <see cref="T:Gu.Units.CatalyticActivity"/></param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CatalyticActivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <returns>The <see cref="T:Gu.Units.CatalyticActivity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CatalyticActivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.CatalyticActivity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CatalyticActivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.CatalyticActivity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CatalyticActivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.CatalyticActivity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.TryParse(System.String,Gu.Units.CatalyticActivity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CatalyticActivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.CatalyticActivity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.TryParse(System.String,System.IFormatProvider,Gu.Units.CatalyticActivity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CatalyticActivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.CatalyticActivity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.CatalyticActivity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CatalyticActivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.CatalyticActivity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.CatalyticActivity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CatalyticActivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.CatalyticActivity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.CatalyticActivity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.CatalyticActivity"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.CatalyticActivity"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.From(System.Double,Gu.Units.CatalyticActivityUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.CatalyticActivity"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.CatalyticActivity"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.FromKatals(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.CatalyticActivity"/>.
            </summary>
            <param name="katals">The value in <see cref="F:Gu.Units.CatalyticActivityUnit.Katals"/></param>
            <returns>An instance of <see cref="T:Gu.Units.CatalyticActivity"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.GetValue(Gu.Units.CatalyticActivityUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.CatalyticActivity.SiValue"/> and <see cref="P:Gu.Units.CatalyticActivity.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.CatalyticActivity.SiValue"/> and <see cref="P:Gu.Units.CatalyticActivity.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kat\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kat\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex kat</param>
            <returns>The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex kat</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.CatalyticActivity"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(Gu.Units.CatalyticActivityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(Gu.Units.CatalyticActivityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(Gu.Units.CatalyticActivityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(Gu.Units.CatalyticActivityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(System.String,Gu.Units.CatalyticActivityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(System.String,Gu.Units.CatalyticActivityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(System.String,Gu.Units.CatalyticActivityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ToString(System.String,Gu.Units.CatalyticActivityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.CompareTo(Gu.Units.CatalyticActivity)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.CatalyticActivity"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.CatalyticActivity"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.CatalyticActivity"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.Equals(Gu.Units.CatalyticActivity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.CatalyticActivity"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same CatalyticActivity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.CatalyticActivity"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.Equals(Gu.Units.CatalyticActivity,Gu.Units.CatalyticActivity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.CatalyticActivity"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same CatalyticActivity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.CatalyticActivity"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.CatalyticActivity"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.CatalyticActivity"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.CatalyticActivity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.CatalyticActivityTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.CatalyticActivity'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.CatalyticActivityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CatalyticActivityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CatalyticActivityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CatalyticActivityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.CatalyticActivityUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.CatalyticActivity"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CatalyticActivityUnit.Katals">
            <summary>
            The Katals unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CatalyticActivityUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.CatalyticActivityUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.CatalyticActivityUnit"/> struct.
            </summary>
            <param name="toKatals">The conversion to <see cref="F:Gu.Units.CatalyticActivityUnit.Katals"/></param>
            <param name="fromKatals">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.CatalyticActivityUnit.Katals"/></param>
        </member>
        <member name="P:Gu.Units.CatalyticActivityUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.CatalyticActivityUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.CatalyticActivityUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.CatalyticActivityUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.CatalyticActivityUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.op_Multiply(System.Double,Gu.Units.CatalyticActivityUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.CatalyticActivity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.op_Equality(Gu.Units.CatalyticActivityUnit,Gu.Units.CatalyticActivityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.CatalyticActivityUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.op_Inequality(Gu.Units.CatalyticActivityUnit,Gu.Units.CatalyticActivityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.CatalyticActivityUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CatalyticActivityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CatalyticActivityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.CatalyticActivityUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.CatalyticActivityUnit"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.TryParse(System.String,Gu.Units.CatalyticActivityUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CatalyticActivityUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CatalyticActivityUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.CatalyticActivityUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.CatalyticActivityUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Katals.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from katals.
            </summary>
            <param name="katals">The value in Katals</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new CatalyticActivity(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.GetScalarValue(Gu.Units.CatalyticActivity)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Katals
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.Equals(Gu.Units.CatalyticActivityUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.CatalyticActivityUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.CatalyticActivityUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same CatalyticActivityUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.CatalyticActivityUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.CatalyticActivityUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CatalyticActivityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Conductivity">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Conductivity.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.ConductivityUnit.SiemensPerMetre"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Conductivity.siemensPerMetre">
            <summary>
            The quantity in <see cref="F:Gu.Units.ConductivityUnit.SiemensPerMetre"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Conductivity.#ctor(System.Double,Gu.Units.ConductivityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Conductivity"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.ConductivityUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Conductivity.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.ConductivityUnit.SiemensPerMetre"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.ConductivityUnit"/> for the <see cref="P:Gu.Units.Conductivity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Conductivity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.SiemensPerMetre">
            <summary>
            Gets the quantity in siemensPerMetre".
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.SiemensPerCentimetre">
            <summary>
            Gets the quantity in SiemensPerCentimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.SiemensPerMillimetre">
            <summary>
            Gets the quantity in SiemensPerMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.NanosiemensPerMetre">
            <summary>
            Gets the quantity in NanosiemensPerMetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.NanosiemensPerMicrometre">
            <summary>
            Gets the quantity in NanosiemensPerMicrometre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.NanosiemensPerMillimetre">
            <summary>
            Gets the quantity in NanosiemensPerMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.NanosiemensPerCentimetre">
            <summary>
            Gets the quantity in NanosiemensPerCentimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.MicrosiemensPerMetre">
            <summary>
            Gets the quantity in MicrosiemensPerMetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.MicrosiemensPerMillimetre">
            <summary>
            Gets the quantity in MicrosiemensPerMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.MicrosiemensPerCentimetre">
            <summary>
            Gets the quantity in MicrosiemensPerCentimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.MillisiemensPerMetre">
            <summary>
            Gets the quantity in MillisiemensPerMetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.MillisiemensPerMillimetre">
            <summary>
            Gets the quantity in MillisiemensPerMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Conductivity.MillisiemensPerCentimetre">
            <summary>
            Gets the quantity in MillisiemensPerCentimetre
            </summary>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Multiply(Gu.Units.Conductivity,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Multiply(Gu.Units.Conductivity,Gu.Units.Resistance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Division(Gu.Units.Conductivity,Gu.Units.ElectricalConductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Division(Gu.Units.Conductivity,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Division(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Equality(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Conductivity"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Inequality(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Conductivity"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.op_LessThan(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Conductivity"/> is less than another specified <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.op_GreaterThan(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Conductivity"/> is greater than another specified <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.op_LessThanOrEqual(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Conductivity"/> is less than or equal to another specified <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.op_GreaterThanOrEqual(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Conductivity"/> is greater than or equal to another specified <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Multiply(System.Double,Gu.Units.Conductivity)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Conductivity"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Conductivity"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Multiply(Gu.Units.Conductivity,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Conductivity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Conductivity"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Division(Gu.Units.Conductivity,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Conductivity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Conductivity"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Addition(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Conductivity"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Conductivity"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Conductivity"/>.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.op_Subtraction(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Subtracts an Conductivity from another Conductivity and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Conductivity"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Conductivity"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Conductivity"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Conductivity.op_UnaryNegation(Gu.Units.Conductivity)">
            <summary>
            Returns an <see cref="T:Gu.Units.Conductivity"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Conductivity"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="conductivity">An instance of <see cref="T:Gu.Units.Conductivity"/></param>
        </member>
        <member name="M:Gu.Units.Conductivity.op_UnaryPlus(Gu.Units.Conductivity)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <returns>
            Returns <paramref name="conductivity"/>.
            </returns>
            <param name="conductivity">An instance of <see cref="T:Gu.Units.Conductivity"/></param>
        </member>
        <member name="M:Gu.Units.Conductivity.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Conductivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Conductivity"/></param>
            <returns>The <see cref="T:Gu.Units.Conductivity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Conductivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Conductivity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Conductivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Conductivity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Conductivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Conductivity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.TryParse(System.String,Gu.Units.Conductivity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Conductivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Conductivity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Conductivity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.TryParse(System.String,System.IFormatProvider,Gu.Units.Conductivity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Conductivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Conductivity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Conductivity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Conductivity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Conductivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Conductivity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Conductivity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Conductivity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Conductivity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Conductivity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Conductivity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Conductivity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Conductivity"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.From(System.Double,Gu.Units.ConductivityUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromSiemensPerMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="siemensPerMetre">The value in <see cref="F:Gu.Units.ConductivityUnit.SiemensPerMetre"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromSiemensPerCentimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="siemensPerCentimetre">The value in S/cm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromSiemensPerMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="siemensPerMillimetre">The value in S/mm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromNanosiemensPerMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="nanosiemensPerMetre">The value in nS/m.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromNanosiemensPerMicrometre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="nanosiemensPerMicrometre">The value in nS/μm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromNanosiemensPerMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="nanosiemensPerMillimetre">The value in nS/mm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromNanosiemensPerCentimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="nanosiemensPerCentimetre">The value in nS/cm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromMicrosiemensPerMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="microsiemensPerMetre">The value in μS/m.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromMicrosiemensPerMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="microsiemensPerMillimetre">The value in μS/mm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromMicrosiemensPerCentimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="microsiemensPerCentimetre">The value in μS/cm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromMillisiemensPerMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="millisiemensPerMetre">The value in mS/m.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromMillisiemensPerMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="millisiemensPerMillimetre">The value in mS/mm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.FromMillisiemensPerCentimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Conductivity"/>.
            </summary>
            <param name="millisiemensPerCentimetre">The value in mS/cm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.GetValue(Gu.Units.ConductivityUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Conductivity.SiValue"/> and <see cref="P:Gu.Units.Conductivity.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Conductivity.SiValue"/> and <see cref="P:Gu.Units.Conductivity.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 S/m\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 S/m\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex S/m</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex S/m</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Conductivity"/></returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(Gu.Units.ConductivityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(Gu.Units.ConductivityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(Gu.Units.ConductivityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(Gu.Units.ConductivityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(System.String,Gu.Units.ConductivityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(System.String,Gu.Units.ConductivityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(System.String,Gu.Units.ConductivityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ToString(System.String,Gu.Units.ConductivityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.CompareTo(Gu.Units.Conductivity)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Conductivity"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Conductivity"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Conductivity"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.Equals(Gu.Units.Conductivity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Conductivity"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Conductivity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Conductivity"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.Equals(Gu.Units.Conductivity,Gu.Units.Conductivity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Conductivity"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Conductivity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Conductivity"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Conductivity.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Conductivity"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Conductivity"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Conductivity.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Conductivity.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Conductivity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Conductivity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.ConductivityTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Conductivity'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ConductivityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ConductivityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ConductivityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ConductivityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ConductivityUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Conductivity"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.SiemensPerMetre">
            <summary>
            The SiemensPerMetre unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.SiemensPerCentimetre">
            <summary>
            The SiemensPerCentimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.SiemensPerMillimetre">
            <summary>
            The SiemensPerMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.NanosiemensPerMetre">
            <summary>
            The NanosiemensPerMetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.NanosiemensPerMicrometre">
            <summary>
            The NanosiemensPerMicrometre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.NanosiemensPerMillimetre">
            <summary>
            The NanosiemensPerMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.NanosiemensPerCentimetre">
            <summary>
            The NanosiemensPerCentimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.MicrosiemensPerMetre">
            <summary>
            The MicrosiemensPerMetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.MicrosiemensPerMillimetre">
            <summary>
            The MicrosiemensPerMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.MicrosiemensPerCentimetre">
            <summary>
            The MicrosiemensPerCentimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.MillisiemensPerMetre">
            <summary>
            The MillisiemensPerMetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.MillisiemensPerMillimetre">
            <summary>
            The MillisiemensPerMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.MillisiemensPerCentimetre">
            <summary>
            The MillisiemensPerCentimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ConductivityUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ConductivityUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.ConductivityUnit"/> struct.
            </summary>
            <param name="toSiemensPerMetre">The conversion to <see cref="F:Gu.Units.ConductivityUnit.SiemensPerMetre"/></param>
            <param name="fromSiemensPerMetre">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.ConductivityUnit.SiemensPerMetre"/></param>
        </member>
        <member name="P:Gu.Units.ConductivityUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ConductivityUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.ConductivityUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.ConductivityUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ConductivityUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ConductivityUnit.op_Multiply(System.Double,Gu.Units.ConductivityUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Conductivity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.op_Equality(Gu.Units.ConductivityUnit,Gu.Units.ConductivityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ConductivityUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ConductivityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ConductivityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.op_Inequality(Gu.Units.ConductivityUnit,Gu.Units.ConductivityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ConductivityUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ConductivityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ConductivityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.ConductivityUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.ConductivityUnit"/></returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.TryParse(System.String,Gu.Units.ConductivityUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ConductivityUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ConductivityUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.ConductivityUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ConductivityUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to SiemensPerMetre.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from siemensPerMetre.
            </summary>
            <param name="siemensPerMetre">The value in SiemensPerMetre</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Conductivity(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.GetScalarValue(Gu.Units.Conductivity)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in SiemensPerMetre
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ConductivityUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.Equals(Gu.Units.ConductivityUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ConductivityUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.ConductivityUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same ConductivityUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.ConductivityUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ConductivityUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ConductivityUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.ConductivityUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ConductivityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ConductivityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ConductivityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ConductivityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Current">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Current"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Current.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.CurrentUnit.Amperes"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Current.amperes">
            <summary>
            The quantity in <see cref="F:Gu.Units.CurrentUnit.Amperes"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Current.#ctor(System.Double,Gu.Units.CurrentUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Current"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.CurrentUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Current.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.CurrentUnit.Amperes"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Current.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.CurrentUnit"/> for the <see cref="P:Gu.Units.Current.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Current.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Current.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Current.Amperes">
            <summary>
            Gets the quantity in amperes".
            </summary>
        </member>
        <member name="P:Gu.Units.Current.Milliamperes">
            <summary>
            Gets the quantity in Milliamperes
            </summary>
        </member>
        <member name="P:Gu.Units.Current.Kiloamperes">
            <summary>
            Gets the quantity in Kiloamperes
            </summary>
        </member>
        <member name="P:Gu.Units.Current.Megaamperes">
            <summary>
            Gets the quantity in Megaamperes
            </summary>
        </member>
        <member name="P:Gu.Units.Current.Microamperes">
            <summary>
            Gets the quantity in Microamperes
            </summary>
        </member>
        <member name="P:Gu.Units.Current.Nanoamperes">
            <summary>
            Gets the quantity in Nanoamperes
            </summary>
        </member>
        <member name="P:Gu.Units.Current.Gigaamperes">
            <summary>
            Gets the quantity in Gigaamperes
            </summary>
        </member>
        <member name="M:Gu.Units.Current.op_Multiply(Gu.Units.Current,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Division(Gu.Units.Current,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Multiply(Gu.Units.Current,Gu.Units.Voltage)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Division(Gu.Units.Current,Gu.Units.Voltage)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Multiply(Gu.Units.Current,Gu.Units.Resistance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Division(Gu.Units.Current,Gu.Units.ElectricCharge)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Multiply(Gu.Units.Current,Gu.Units.Inductance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Multiply(Gu.Units.Current,Gu.Units.MagneticFlux)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Division(Gu.Units.Current,Gu.Units.ElectricalConductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Multiply(Gu.Units.Current,Gu.Units.MagneticFieldStrength)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Division(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Equality(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Current"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Current"/>.</param>
        </member>
        <member name="M:Gu.Units.Current.op_Inequality(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Current"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Current"/>.</param>
        </member>
        <member name="M:Gu.Units.Current.op_LessThan(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Current"/> is less than another specified <see cref="T:Gu.Units.Current"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Current"/>.</param>
        </member>
        <member name="M:Gu.Units.Current.op_GreaterThan(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Current"/> is greater than another specified <see cref="T:Gu.Units.Current"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Current"/>.</param>
        </member>
        <member name="M:Gu.Units.Current.op_LessThanOrEqual(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Current"/> is less than or equal to another specified <see cref="T:Gu.Units.Current"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Current"/>.</param>
        </member>
        <member name="M:Gu.Units.Current.op_GreaterThanOrEqual(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Current"/> is greater than or equal to another specified <see cref="T:Gu.Units.Current"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Current"/>.</param>
        </member>
        <member name="M:Gu.Units.Current.op_Multiply(System.Double,Gu.Units.Current)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Current"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Current"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Current"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Multiply(Gu.Units.Current,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Current"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Current"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Division(Gu.Units.Current,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Current"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Current"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Current.op_Addition(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Current"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Current"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Current"/>.</param>
        </member>
        <member name="M:Gu.Units.Current.op_Subtraction(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Subtracts an Current from another Current and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Current"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Current"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Current"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Current.op_UnaryNegation(Gu.Units.Current)">
            <summary>
            Returns an <see cref="T:Gu.Units.Current"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Current"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="current">An instance of <see cref="T:Gu.Units.Current"/></param>
        </member>
        <member name="M:Gu.Units.Current.op_UnaryPlus(Gu.Units.Current)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Current"/>.
            </summary>
            <returns>
            Returns <paramref name="current"/>.
            </returns>
            <param name="current">An instance of <see cref="T:Gu.Units.Current"/></param>
        </member>
        <member name="M:Gu.Units.Current.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Current"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Current"/></param>
            <returns>The <see cref="T:Gu.Units.Current"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Current.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Current"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Current"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Current"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Current.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Current"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Current"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Current"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Current.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Current"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Current"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Current"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Current.TryParse(System.String,Gu.Units.Current@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Current"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Current"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Current"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Current"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Current.TryParse(System.String,System.IFormatProvider,Gu.Units.Current@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Current"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Current"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Current"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Current"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Current.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Current@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Current"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Current"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Current"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Current"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Current.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Current@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Current"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Current"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Current"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Current"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Current.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Current"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.From(System.Double,Gu.Units.CurrentUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Current"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.FromAmperes(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Current"/>.
            </summary>
            <param name="amperes">The value in <see cref="F:Gu.Units.CurrentUnit.Amperes"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.FromMilliamperes(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Current"/>.
            </summary>
            <param name="milliamperes">The value in mA.</param>
            <returns>An instance of <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.FromKiloamperes(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Current"/>.
            </summary>
            <param name="kiloamperes">The value in kA.</param>
            <returns>An instance of <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.FromMegaamperes(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Current"/>.
            </summary>
            <param name="megaamperes">The value in MA.</param>
            <returns>An instance of <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.FromMicroamperes(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Current"/>.
            </summary>
            <param name="microamperes">The value in μA.</param>
            <returns>An instance of <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.FromNanoamperes(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Current"/>.
            </summary>
            <param name="nanoamperes">The value in nA.</param>
            <returns>An instance of <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.FromGigaamperes(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Current"/>.
            </summary>
            <param name="gigaamperes">The value in GA.</param>
            <returns>An instance of <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.GetValue(Gu.Units.CurrentUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Current.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Current.SiValue"/> and <see cref="P:Gu.Units.Current.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Current.SiValue"/> and <see cref="P:Gu.Units.Current.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 A\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 A\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex A</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex A</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Current"/></returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(Gu.Units.CurrentUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(Gu.Units.CurrentUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(Gu.Units.CurrentUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(Gu.Units.CurrentUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(System.String,Gu.Units.CurrentUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(System.String,Gu.Units.CurrentUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(System.String,Gu.Units.CurrentUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Current.ToString(System.String,Gu.Units.CurrentUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Current.CompareTo(Gu.Units.Current)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Current"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Current"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Current"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Current.Equals(Gu.Units.Current)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Current"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Current as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Current"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Current.Equals(Gu.Units.Current,Gu.Units.Current)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Current"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Current as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Current"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Current.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Current"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Current"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Current.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Current.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Current.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Current.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.CurrentTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Current'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.CurrentTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CurrentTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CurrentTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CurrentTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.CurrentUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Current"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CurrentUnit.Amperes">
            <summary>
            The Amperes unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CurrentUnit.Milliamperes">
            <summary>
            The Milliamperes unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CurrentUnit.Kiloamperes">
            <summary>
            The Kiloamperes unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CurrentUnit.Megaamperes">
            <summary>
            The Megaamperes unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CurrentUnit.Microamperes">
            <summary>
            The Microamperes unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CurrentUnit.Nanoamperes">
            <summary>
            The Nanoamperes unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CurrentUnit.Gigaamperes">
            <summary>
            The Gigaamperes unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.CurrentUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.CurrentUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.CurrentUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.CurrentUnit"/> struct.
            </summary>
            <param name="toAmperes">The conversion to <see cref="F:Gu.Units.CurrentUnit.Amperes"/></param>
            <param name="fromAmperes">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.CurrentUnit.Amperes"/></param>
        </member>
        <member name="P:Gu.Units.CurrentUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.CurrentUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.CurrentUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.CurrentUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.CurrentUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CurrentUnit.op_Multiply(System.Double,Gu.Units.CurrentUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.op_Equality(Gu.Units.CurrentUnit,Gu.Units.CurrentUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.CurrentUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CurrentUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CurrentUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.CurrentUnit.op_Inequality(Gu.Units.CurrentUnit,Gu.Units.CurrentUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.CurrentUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.CurrentUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.CurrentUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.CurrentUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.CurrentUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.CurrentUnit"/></returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.TryParse(System.String,Gu.Units.CurrentUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.CurrentUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.CurrentUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.CurrentUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.CurrentUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Amperes.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from amperes.
            </summary>
            <param name="amperes">The value in Amperes</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Current(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.GetScalarValue(Gu.Units.Current)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Amperes
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CurrentUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.Equals(Gu.Units.CurrentUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.CurrentUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.CurrentUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same CurrentUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.CurrentUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CurrentUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.CurrentUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.CurrentUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.CurrentUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CurrentUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CurrentUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.CurrentUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Data">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Data"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Data.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.DataUnit.Bits"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Data.bits">
            <summary>
            The quantity in <see cref="F:Gu.Units.DataUnit.Bits"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Data.#ctor(System.Double,Gu.Units.DataUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Data"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.DataUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Data.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.DataUnit.Bits"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Data.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.DataUnit"/> for the <see cref="P:Gu.Units.Data.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Data.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Bits">
            <summary>
            Gets the quantity in bits".
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Byte">
            <summary>
            Gets the quantity in Byte
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Kilobyte">
            <summary>
            Gets the quantity in Kilobyte
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Megabyte">
            <summary>
            Gets the quantity in Megabyte
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Gigabyte">
            <summary>
            Gets the quantity in Gigabyte
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Terabyte">
            <summary>
            Gets the quantity in Terabyte
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Megabits">
            <summary>
            Gets the quantity in Megabits
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Gigabits">
            <summary>
            Gets the quantity in Gigabits
            </summary>
        </member>
        <member name="P:Gu.Units.Data.Kilobits">
            <summary>
            Gets the quantity in Kilobits
            </summary>
        </member>
        <member name="M:Gu.Units.Data.op_Division(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Data.op_Equality(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Data"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Data"/>.</param>
        </member>
        <member name="M:Gu.Units.Data.op_Inequality(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Data"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Data"/>.</param>
        </member>
        <member name="M:Gu.Units.Data.op_LessThan(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Data"/> is less than another specified <see cref="T:Gu.Units.Data"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Data"/>.</param>
        </member>
        <member name="M:Gu.Units.Data.op_GreaterThan(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Data"/> is greater than another specified <see cref="T:Gu.Units.Data"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Data"/>.</param>
        </member>
        <member name="M:Gu.Units.Data.op_LessThanOrEqual(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Data"/> is less than or equal to another specified <see cref="T:Gu.Units.Data"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Data"/>.</param>
        </member>
        <member name="M:Gu.Units.Data.op_GreaterThanOrEqual(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Data"/> is greater than or equal to another specified <see cref="T:Gu.Units.Data"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Data"/>.</param>
        </member>
        <member name="M:Gu.Units.Data.op_Multiply(System.Double,Gu.Units.Data)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Data"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Data"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Data"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Data.op_Multiply(Gu.Units.Data,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Data"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Data"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Data.op_Division(Gu.Units.Data,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Data"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Data"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Data.op_Addition(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Data"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Data"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Data"/>.</param>
        </member>
        <member name="M:Gu.Units.Data.op_Subtraction(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Subtracts an Data from another Data and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Data"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Data"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Data"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Data.op_UnaryNegation(Gu.Units.Data)">
            <summary>
            Returns an <see cref="T:Gu.Units.Data"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Data"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="data">An instance of <see cref="T:Gu.Units.Data"/></param>
        </member>
        <member name="M:Gu.Units.Data.op_UnaryPlus(Gu.Units.Data)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <returns>
            Returns <paramref name="data"/>.
            </returns>
            <param name="data">An instance of <see cref="T:Gu.Units.Data"/></param>
        </member>
        <member name="M:Gu.Units.Data.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Data"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Data"/></param>
            <returns>The <see cref="T:Gu.Units.Data"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Data.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Data"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Data"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Data"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Data.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Data"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Data"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Data"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Data.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Data"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Data"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Data"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Data.TryParse(System.String,Gu.Units.Data@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Data"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Data"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Data"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Data"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Data.TryParse(System.String,System.IFormatProvider,Gu.Units.Data@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Data"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Data"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Data"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Data"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Data.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Data@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Data"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Data"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Data"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Data"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Data.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Data@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Data"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Data"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Data"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Data"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Data.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Data"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.From(System.Double,Gu.Units.DataUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.FromBits(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="bits">The value in <see cref="F:Gu.Units.DataUnit.Bits"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.FromByte(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="byte">The value in B.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.FromKilobyte(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="kilobyte">The value in kB.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.FromMegabyte(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="megabyte">The value in MB.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.FromGigabyte(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="gigabyte">The value in GB.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.FromTerabyte(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="terabyte">The value in TB.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.FromMegabits(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="megabits">The value in Mbit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.FromGigabits(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="gigabits">The value in Gbit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.FromKilobits(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Data"/>.
            </summary>
            <param name="kilobits">The value in kbit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.GetValue(Gu.Units.DataUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Data.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Data.SiValue"/> and <see cref="P:Gu.Units.Data.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Data.SiValue"/> and <see cref="P:Gu.Units.Data.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 bit\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 bit\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex bit</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex bit</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Data"/></returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(Gu.Units.DataUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(Gu.Units.DataUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(Gu.Units.DataUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(Gu.Units.DataUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(System.String,Gu.Units.DataUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(System.String,Gu.Units.DataUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(System.String,Gu.Units.DataUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Data.ToString(System.String,Gu.Units.DataUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Data.CompareTo(Gu.Units.Data)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Data"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Data"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Data"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Data.Equals(Gu.Units.Data)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Data"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Data as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Data"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Data.Equals(Gu.Units.Data,Gu.Units.Data)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Data"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Data as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Data"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Data.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Data"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Data"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Data.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Data.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Data.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Data.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.DataTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Data'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.DataTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DataTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DataTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DataTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.DataUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Data"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.Bits">
            <summary>
            The Bits unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.Byte">
            <summary>
            The Byte unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.Kilobyte">
            <summary>
            The Kilobyte unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.Megabyte">
            <summary>
            The Megabyte unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.Gigabyte">
            <summary>
            The Gigabyte unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.Terabyte">
            <summary>
            The Terabyte unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.Megabits">
            <summary>
            The Megabits unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.Gigabits">
            <summary>
            The Gigabits unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.Kilobits">
            <summary>
            The Kilobits unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DataUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.DataUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.DataUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.DataUnit"/> struct.
            </summary>
            <param name="toBits">The conversion to <see cref="F:Gu.Units.DataUnit.Bits"/></param>
            <param name="fromBits">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.DataUnit.Bits"/></param>
        </member>
        <member name="P:Gu.Units.DataUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.DataUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.DataUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.DataUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.DataUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DataUnit.op_Multiply(System.Double,Gu.Units.DataUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Data"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.DataUnit.op_Equality(Gu.Units.DataUnit,Gu.Units.DataUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.DataUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.DataUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.DataUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.DataUnit.op_Inequality(Gu.Units.DataUnit,Gu.Units.DataUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.DataUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.DataUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.DataUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.DataUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.DataUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.DataUnit"/></returns>
        </member>
        <member name="M:Gu.Units.DataUnit.TryParse(System.String,Gu.Units.DataUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.DataUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.DataUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.DataUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.DataUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.DataUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Bits.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.DataUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from bits.
            </summary>
            <param name="bits">The value in Bits</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.DataUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Data(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.DataUnit.GetScalarValue(Gu.Units.Data)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Bits
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.DataUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DataUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.DataUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.DataUnit.Equals(Gu.Units.DataUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.DataUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.DataUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same DataUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.DataUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DataUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.DataUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.DataUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.DataUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DataUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DataUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DataUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Density">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Density"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Density.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.DensityUnit.KilogramsPerCubicMetre"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Density.kilogramsPerCubicMetre">
            <summary>
            The quantity in <see cref="F:Gu.Units.DensityUnit.KilogramsPerCubicMetre"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Density.#ctor(System.Double,Gu.Units.DensityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Density"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.DensityUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Density.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.DensityUnit.KilogramsPerCubicMetre"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Density.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.DensityUnit"/> for the <see cref="P:Gu.Units.Density.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Density.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Density.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Density.KilogramsPerCubicMetre">
            <summary>
            Gets the quantity in kilogramsPerCubicMetre".
            </summary>
        </member>
        <member name="P:Gu.Units.Density.GramsPerCubicMillimetre">
            <summary>
            Gets the quantity in GramsPerCubicMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Density.GramsPerCubicCentimetre">
            <summary>
            Gets the quantity in GramsPerCubicCentimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Density.MilligramsPerCubicMillimetre">
            <summary>
            Gets the quantity in MilligramsPerCubicMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Density.GramsPerCubicMetre">
            <summary>
            Gets the quantity in GramsPerCubicMetre
            </summary>
        </member>
        <member name="P:Gu.Units.Density.MilligramsPerCubicMetre">
            <summary>
            Gets the quantity in MilligramsPerCubicMetre
            </summary>
        </member>
        <member name="M:Gu.Units.Density.op_Multiply(Gu.Units.Density,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Multiply(Gu.Units.Density,Gu.Units.Volume)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Multiply(Gu.Units.Density,Gu.Units.VolumetricFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Multiply(Gu.Units.Density,Gu.Units.SpecificEnergy)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Division(Gu.Units.Density,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Division(Gu.Units.Density,Gu.Units.AreaDensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Division(System.Double,Gu.Units.Density)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The SpecificVolume that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Division(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Equality(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Density"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Density"/>.</param>
        </member>
        <member name="M:Gu.Units.Density.op_Inequality(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Density"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Density"/>.</param>
        </member>
        <member name="M:Gu.Units.Density.op_LessThan(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Density"/> is less than another specified <see cref="T:Gu.Units.Density"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Density"/>.</param>
        </member>
        <member name="M:Gu.Units.Density.op_GreaterThan(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Density"/> is greater than another specified <see cref="T:Gu.Units.Density"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Density"/>.</param>
        </member>
        <member name="M:Gu.Units.Density.op_LessThanOrEqual(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Density"/> is less than or equal to another specified <see cref="T:Gu.Units.Density"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Density"/>.</param>
        </member>
        <member name="M:Gu.Units.Density.op_GreaterThanOrEqual(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Density"/> is greater than or equal to another specified <see cref="T:Gu.Units.Density"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Density"/>.</param>
        </member>
        <member name="M:Gu.Units.Density.op_Multiply(System.Double,Gu.Units.Density)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Density"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Density"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Density"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Multiply(Gu.Units.Density,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Density"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Density"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Division(Gu.Units.Density,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Density"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Density"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Density.op_Addition(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Density"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Density"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Density"/>.</param>
        </member>
        <member name="M:Gu.Units.Density.op_Subtraction(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Subtracts an Density from another Density and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Density"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Density"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Density"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Density.op_UnaryNegation(Gu.Units.Density)">
            <summary>
            Returns an <see cref="T:Gu.Units.Density"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Density"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="density">An instance of <see cref="T:Gu.Units.Density"/></param>
        </member>
        <member name="M:Gu.Units.Density.op_UnaryPlus(Gu.Units.Density)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Density"/>.
            </summary>
            <returns>
            Returns <paramref name="density"/>.
            </returns>
            <param name="density">An instance of <see cref="T:Gu.Units.Density"/></param>
        </member>
        <member name="M:Gu.Units.Density.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Density"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Density"/></param>
            <returns>The <see cref="T:Gu.Units.Density"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Density.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Density"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Density"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Density"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Density.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Density"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Density"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Density"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Density.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Density"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Density"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Density"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Density.TryParse(System.String,Gu.Units.Density@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Density"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Density"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Density"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Density"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Density.TryParse(System.String,System.IFormatProvider,Gu.Units.Density@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Density"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Density"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Density"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Density"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Density.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Density@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Density"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Density"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Density"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Density"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Density.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Density@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Density"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Density"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Density"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Density"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Density.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Density"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.From(System.Double,Gu.Units.DensityUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Density"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.FromKilogramsPerCubicMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Density"/>.
            </summary>
            <param name="kilogramsPerCubicMetre">The value in <see cref="F:Gu.Units.DensityUnit.KilogramsPerCubicMetre"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.FromGramsPerCubicMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Density"/>.
            </summary>
            <param name="gramsPerCubicMillimetre">The value in g/mm³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.FromGramsPerCubicCentimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Density"/>.
            </summary>
            <param name="gramsPerCubicCentimetre">The value in g/cm³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.FromMilligramsPerCubicMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Density"/>.
            </summary>
            <param name="milligramsPerCubicMillimetre">The value in mg/mm³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.FromGramsPerCubicMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Density"/>.
            </summary>
            <param name="gramsPerCubicMetre">The value in g/m³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.FromMilligramsPerCubicMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Density"/>.
            </summary>
            <param name="milligramsPerCubicMetre">The value in mg/m³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.GetValue(Gu.Units.DensityUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Density.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Density.SiValue"/> and <see cref="P:Gu.Units.Density.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Density.SiValue"/> and <see cref="P:Gu.Units.Density.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg/m³\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg/m³\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex kg/m³</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex kg/m³</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Density"/></returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(Gu.Units.DensityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(Gu.Units.DensityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(Gu.Units.DensityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(Gu.Units.DensityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(System.String,Gu.Units.DensityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(System.String,Gu.Units.DensityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(System.String,Gu.Units.DensityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Density.ToString(System.String,Gu.Units.DensityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Density.CompareTo(Gu.Units.Density)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Density"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Density"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Density"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Density.Equals(Gu.Units.Density)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Density"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Density as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Density"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Density.Equals(Gu.Units.Density,Gu.Units.Density)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Density"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Density as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Density"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Density.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Density"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Density"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Density.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Density.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Density.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Density.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.DensityTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Density'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.DensityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DensityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DensityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DensityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.DensityUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Density"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DensityUnit.KilogramsPerCubicMetre">
            <summary>
            The KilogramsPerCubicMetre unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DensityUnit.GramsPerCubicMillimetre">
            <summary>
            The GramsPerCubicMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DensityUnit.GramsPerCubicCentimetre">
            <summary>
            The GramsPerCubicCentimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DensityUnit.MilligramsPerCubicMillimetre">
            <summary>
            The MilligramsPerCubicMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DensityUnit.GramsPerCubicMetre">
            <summary>
            The GramsPerCubicMetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DensityUnit.MilligramsPerCubicMetre">
            <summary>
            The MilligramsPerCubicMetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.DensityUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.DensityUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.DensityUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.DensityUnit"/> struct.
            </summary>
            <param name="toKilogramsPerCubicMetre">The conversion to <see cref="F:Gu.Units.DensityUnit.KilogramsPerCubicMetre"/></param>
            <param name="fromKilogramsPerCubicMetre">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.DensityUnit.KilogramsPerCubicMetre"/></param>
        </member>
        <member name="P:Gu.Units.DensityUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.DensityUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.DensityUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.DensityUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.DensityUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DensityUnit.op_Multiply(System.Double,Gu.Units.DensityUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Density"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.op_Equality(Gu.Units.DensityUnit,Gu.Units.DensityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.DensityUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.DensityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.DensityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.DensityUnit.op_Inequality(Gu.Units.DensityUnit,Gu.Units.DensityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.DensityUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.DensityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.DensityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.DensityUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.DensityUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.DensityUnit"/></returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.TryParse(System.String,Gu.Units.DensityUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.DensityUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.DensityUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.DensityUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.DensityUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to KilogramsPerCubicMetre.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from kilogramsPerCubicMetre.
            </summary>
            <param name="kilogramsPerCubicMetre">The value in KilogramsPerCubicMetre</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Density(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.GetScalarValue(Gu.Units.Density)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in KilogramsPerCubicMetre
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DensityUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.Equals(Gu.Units.DensityUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.DensityUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.DensityUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same DensityUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.DensityUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DensityUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.DensityUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.DensityUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.DensityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DensityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DensityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.DensityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ElectricalConductance">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricalConductance.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.ElectricalConductanceUnit.Siemens"/>
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricalConductance.siemens">
            <summary>
            The quantity in <see cref="F:Gu.Units.ElectricalConductanceUnit.Siemens"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.#ctor(System.Double,Gu.Units.ElectricalConductanceUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.ElectricalConductance"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.ElectricalConductanceUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.ElectricalConductance.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.ElectricalConductanceUnit.Siemens"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricalConductance.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.ElectricalConductanceUnit"/> for the <see cref="P:Gu.Units.ElectricalConductance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricalConductance.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.ElectricalConductance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricalConductance.Siemens">
            <summary>
            Gets the quantity in siemens".
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricalConductance.Nanosiemens">
            <summary>
            Gets the quantity in Nanosiemens
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricalConductance.Microsiemens">
            <summary>
            Gets the quantity in Microsiemens
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricalConductance.Millisiemens">
            <summary>
            Gets the quantity in Millisiemens
            </summary>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Division(Gu.Units.ElectricalConductance,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Conductivity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Multiply(Gu.Units.ElectricalConductance,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Division(Gu.Units.ElectricalConductance,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Multiply(Gu.Units.ElectricalConductance,Gu.Units.Voltage)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Multiply(Gu.Units.ElectricalConductance,Gu.Units.Inductance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Division(Gu.Units.ElectricalConductance,Gu.Units.Capacitance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Multiply(Gu.Units.ElectricalConductance,Gu.Units.MagneticFlux)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Multiply(Gu.Units.ElectricalConductance,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Conductivity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Division(Gu.Units.ElectricalConductance,Gu.Units.Conductivity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Division(System.Double,Gu.Units.ElectricalConductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The Resistance that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Division(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Equality(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ElectricalConductance"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Inequality(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ElectricalConductance"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_LessThan(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ElectricalConductance"/> is less than another specified <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_GreaterThan(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ElectricalConductance"/> is greater than another specified <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_LessThanOrEqual(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ElectricalConductance"/> is less than or equal to another specified <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_GreaterThanOrEqual(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ElectricalConductance"/> is greater than or equal to another specified <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Multiply(System.Double,Gu.Units.ElectricalConductance)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.ElectricalConductance"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.ElectricalConductance"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Multiply(Gu.Units.ElectricalConductance,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.ElectricalConductance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.ElectricalConductance"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Division(Gu.Units.ElectricalConductance,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.ElectricalConductance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.ElectricalConductance"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Addition(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.ElectricalConductance"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.ElectricalConductance"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductance"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_Subtraction(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Subtracts an ElectricalConductance from another ElectricalConductance and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.ElectricalConductance"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductance"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductance"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_UnaryNegation(Gu.Units.ElectricalConductance)">
            <summary>
            Returns an <see cref="T:Gu.Units.ElectricalConductance"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.ElectricalConductance"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="electricalConductance">An instance of <see cref="T:Gu.Units.ElectricalConductance"/></param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.op_UnaryPlus(Gu.Units.ElectricalConductance)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <returns>
            Returns <paramref name="electricalConductance"/>.
            </returns>
            <param name="electricalConductance">An instance of <see cref="T:Gu.Units.ElectricalConductance"/></param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricalConductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricalConductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricalConductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricalConductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.TryParse(System.String,Gu.Units.ElectricalConductance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricalConductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricalConductance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.TryParse(System.String,System.IFormatProvider,Gu.Units.ElectricalConductance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricalConductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricalConductance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.ElectricalConductance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricalConductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricalConductance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.ElectricalConductance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricalConductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricalConductance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricalConductance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.ElectricalConductance"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.From(System.Double,Gu.Units.ElectricalConductanceUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.FromSiemens(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <param name="siemens">The value in <see cref="F:Gu.Units.ElectricalConductanceUnit.Siemens"/></param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.FromNanosiemens(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <param name="nanosiemens">The value in nS.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.FromMicrosiemens(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <param name="microsiemens">The value in μS.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.FromMillisiemens(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricalConductance"/>.
            </summary>
            <param name="millisiemens">The value in mS.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.GetValue(Gu.Units.ElectricalConductanceUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.ElectricalConductance.SiValue"/> and <see cref="P:Gu.Units.ElectricalConductance.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.ElectricalConductance.SiValue"/> and <see cref="P:Gu.Units.ElectricalConductance.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 S\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 S\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex S</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex S</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricalConductance"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(Gu.Units.ElectricalConductanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(Gu.Units.ElectricalConductanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(Gu.Units.ElectricalConductanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(Gu.Units.ElectricalConductanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(System.String,Gu.Units.ElectricalConductanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(System.String,Gu.Units.ElectricalConductanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(System.String,Gu.Units.ElectricalConductanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ToString(System.String,Gu.Units.ElectricalConductanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.CompareTo(Gu.Units.ElectricalConductance)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.ElectricalConductance"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.ElectricalConductance"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.ElectricalConductance"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.Equals(Gu.Units.ElectricalConductance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ElectricalConductance"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same ElectricalConductance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.ElectricalConductance"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.Equals(Gu.Units.ElectricalConductance,Gu.Units.ElectricalConductance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ElectricalConductance"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same ElectricalConductance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.ElectricalConductance"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ElectricalConductance"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.ElectricalConductance"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.ElectricalConductance.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.ElectricalConductanceTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.ElectricalConductance'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricalConductanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricalConductanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricalConductanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ElectricalConductanceUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.ElectricalConductance"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricalConductanceUnit.Siemens">
            <summary>
            The Siemens unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricalConductanceUnit.Nanosiemens">
            <summary>
            The Nanosiemens unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricalConductanceUnit.Microsiemens">
            <summary>
            The Microsiemens unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricalConductanceUnit.Millisiemens">
            <summary>
            The Millisiemens unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricalConductanceUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ElectricalConductanceUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.ElectricalConductanceUnit"/> struct.
            </summary>
            <param name="toSiemens">The conversion to <see cref="F:Gu.Units.ElectricalConductanceUnit.Siemens"/></param>
            <param name="fromSiemens">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.ElectricalConductanceUnit.Siemens"/></param>
        </member>
        <member name="P:Gu.Units.ElectricalConductanceUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ElectricalConductanceUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricalConductanceUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.ElectricalConductanceUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricalConductanceUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.op_Multiply(System.Double,Gu.Units.ElectricalConductanceUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.op_Equality(Gu.Units.ElectricalConductanceUnit,Gu.Units.ElectricalConductanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ElectricalConductanceUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.op_Inequality(Gu.Units.ElectricalConductanceUnit,Gu.Units.ElectricalConductanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ElectricalConductanceUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricalConductanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricalConductanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.ElectricalConductanceUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricalConductanceUnit"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.TryParse(System.String,Gu.Units.ElectricalConductanceUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricalConductanceUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricalConductanceUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricalConductanceUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricalConductanceUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Siemens.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from siemens.
            </summary>
            <param name="siemens">The value in Siemens</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new ElectricalConductance(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.GetScalarValue(Gu.Units.ElectricalConductance)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Siemens
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.Equals(Gu.Units.ElectricalConductanceUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ElectricalConductanceUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.ElectricalConductanceUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same ElectricalConductanceUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ElectricalConductanceUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.ElectricalConductanceUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricalConductanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ElectricCharge">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricCharge.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.ElectricChargeUnit.Coulombs"/>
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricCharge.coulombs">
            <summary>
            The quantity in <see cref="F:Gu.Units.ElectricChargeUnit.Coulombs"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.ElectricCharge.#ctor(System.Double,Gu.Units.ElectricChargeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.ElectricCharge"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.ElectricChargeUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.ElectricCharge.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.ElectricChargeUnit.Coulombs"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricCharge.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.ElectricChargeUnit"/> for the <see cref="P:Gu.Units.ElectricCharge.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricCharge.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.ElectricCharge.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricCharge.Coulombs">
            <summary>
            Gets the quantity in coulombs".
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricCharge.Nanocoulombs">
            <summary>
            Gets the quantity in Nanocoulombs
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricCharge.Microcoulombs">
            <summary>
            Gets the quantity in Microcoulombs
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricCharge.Millicoulombs">
            <summary>
            Gets the quantity in Millicoulombs
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricCharge.Kilocoulombs">
            <summary>
            Gets the quantity in Kilocoulombs
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricCharge.Megacoulombs">
            <summary>
            Gets the quantity in Megacoulombs
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricCharge.Gigacoulombs">
            <summary>
            Gets the quantity in Gigacoulombs
            </summary>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Division(Gu.Units.ElectricCharge,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Division(Gu.Units.ElectricCharge,Gu.Units.Current)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Multiply(Gu.Units.ElectricCharge,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Multiply(Gu.Units.ElectricCharge,Gu.Units.Voltage)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Division(Gu.Units.ElectricCharge,Gu.Units.Voltage)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Multiply(Gu.Units.ElectricCharge,Gu.Units.Resistance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Division(Gu.Units.ElectricCharge,Gu.Units.Capacitance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Division(Gu.Units.ElectricCharge,Gu.Units.MagneticFlux)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Division(Gu.Units.ElectricCharge,Gu.Units.ElectricalConductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Multiply(Gu.Units.ElectricCharge,Gu.Units.MagneticFieldStrength)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Division(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Equality(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ElectricCharge"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Inequality(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ElectricCharge"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_LessThan(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ElectricCharge"/> is less than another specified <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_GreaterThan(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ElectricCharge"/> is greater than another specified <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_LessThanOrEqual(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ElectricCharge"/> is less than or equal to another specified <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_GreaterThanOrEqual(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ElectricCharge"/> is greater than or equal to another specified <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Multiply(System.Double,Gu.Units.ElectricCharge)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.ElectricCharge"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.ElectricCharge"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Multiply(Gu.Units.ElectricCharge,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.ElectricCharge"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.ElectricCharge"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Division(Gu.Units.ElectricCharge,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.ElectricCharge"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.ElectricCharge"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Addition(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.ElectricCharge"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.ElectricCharge"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricCharge"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_Subtraction(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Subtracts an ElectricCharge from another ElectricCharge and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.ElectricCharge"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricCharge"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricCharge"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_UnaryNegation(Gu.Units.ElectricCharge)">
            <summary>
            Returns an <see cref="T:Gu.Units.ElectricCharge"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.ElectricCharge"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="electricCharge">An instance of <see cref="T:Gu.Units.ElectricCharge"/></param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.op_UnaryPlus(Gu.Units.ElectricCharge)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <returns>
            Returns <paramref name="electricCharge"/>.
            </returns>
            <param name="electricCharge">An instance of <see cref="T:Gu.Units.ElectricCharge"/></param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricCharge"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricCharge"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricCharge"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricCharge"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.TryParse(System.String,Gu.Units.ElectricCharge@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricCharge"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricCharge"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricCharge"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.TryParse(System.String,System.IFormatProvider,Gu.Units.ElectricCharge@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricCharge"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricCharge"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricCharge"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.ElectricCharge@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricCharge"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricCharge"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricCharge"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.ElectricCharge@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricCharge"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricCharge"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricCharge"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.ElectricCharge"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.From(System.Double,Gu.Units.ElectricChargeUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.FromCoulombs(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <param name="coulombs">The value in <see cref="F:Gu.Units.ElectricChargeUnit.Coulombs"/></param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.FromNanocoulombs(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <param name="nanocoulombs">The value in nC.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.FromMicrocoulombs(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <param name="microcoulombs">The value in μC.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.FromMillicoulombs(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <param name="millicoulombs">The value in mC.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.FromKilocoulombs(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <param name="kilocoulombs">The value in kC.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.FromMegacoulombs(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <param name="megacoulombs">The value in MC.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.FromGigacoulombs(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ElectricCharge"/>.
            </summary>
            <param name="gigacoulombs">The value in GC.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.GetValue(Gu.Units.ElectricChargeUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.ElectricCharge.SiValue"/> and <see cref="P:Gu.Units.ElectricCharge.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.ElectricCharge.SiValue"/> and <see cref="P:Gu.Units.ElectricCharge.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 C\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 C\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex C</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex C</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ElectricCharge"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(Gu.Units.ElectricChargeUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(Gu.Units.ElectricChargeUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(Gu.Units.ElectricChargeUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(Gu.Units.ElectricChargeUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(System.String,Gu.Units.ElectricChargeUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(System.String,Gu.Units.ElectricChargeUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(System.String,Gu.Units.ElectricChargeUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ToString(System.String,Gu.Units.ElectricChargeUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.CompareTo(Gu.Units.ElectricCharge)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.ElectricCharge"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.ElectricCharge"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.ElectricCharge"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.Equals(Gu.Units.ElectricCharge)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ElectricCharge"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same ElectricCharge as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.ElectricCharge"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.Equals(Gu.Units.ElectricCharge,Gu.Units.ElectricCharge)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ElectricCharge"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same ElectricCharge as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.ElectricCharge"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ElectricCharge"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.ElectricCharge"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.ElectricCharge.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.ElectricCharge.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.ElectricChargeTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.ElectricCharge'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ElectricChargeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricChargeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricChargeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricChargeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ElectricChargeUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.ElectricCharge"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricChargeUnit.Coulombs">
            <summary>
            The Coulombs unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricChargeUnit.Nanocoulombs">
            <summary>
            The Nanocoulombs unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricChargeUnit.Microcoulombs">
            <summary>
            The Microcoulombs unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricChargeUnit.Millicoulombs">
            <summary>
            The Millicoulombs unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricChargeUnit.Kilocoulombs">
            <summary>
            The Kilocoulombs unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricChargeUnit.Megacoulombs">
            <summary>
            The Megacoulombs unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricChargeUnit.Gigacoulombs">
            <summary>
            The Gigacoulombs unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ElectricChargeUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ElectricChargeUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.ElectricChargeUnit"/> struct.
            </summary>
            <param name="toCoulombs">The conversion to <see cref="F:Gu.Units.ElectricChargeUnit.Coulombs"/></param>
            <param name="fromCoulombs">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.ElectricChargeUnit.Coulombs"/></param>
        </member>
        <member name="P:Gu.Units.ElectricChargeUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ElectricChargeUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricChargeUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.ElectricChargeUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ElectricChargeUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.op_Multiply(System.Double,Gu.Units.ElectricChargeUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.op_Equality(Gu.Units.ElectricChargeUnit,Gu.Units.ElectricChargeUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ElectricChargeUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricChargeUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricChargeUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.op_Inequality(Gu.Units.ElectricChargeUnit,Gu.Units.ElectricChargeUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ElectricChargeUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ElectricChargeUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ElectricChargeUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.ElectricChargeUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.ElectricChargeUnit"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.TryParse(System.String,Gu.Units.ElectricChargeUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ElectricChargeUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ElectricChargeUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.ElectricChargeUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ElectricChargeUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Coulombs.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from coulombs.
            </summary>
            <param name="coulombs">The value in Coulombs</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new ElectricCharge(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.GetScalarValue(Gu.Units.ElectricCharge)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Coulombs
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.Equals(Gu.Units.ElectricChargeUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ElectricChargeUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.ElectricChargeUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same ElectricChargeUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricChargeUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ElectricChargeUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.ElectricChargeUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ElectricChargeUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricChargeUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricChargeUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ElectricChargeUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Energy">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Energy"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Energy.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.EnergyUnit.Joules"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Energy.joules">
            <summary>
            The quantity in <see cref="F:Gu.Units.EnergyUnit.Joules"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Energy.#ctor(System.Double,Gu.Units.EnergyUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Energy"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.EnergyUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Energy.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.EnergyUnit.Joules"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.EnergyUnit"/> for the <see cref="P:Gu.Units.Energy.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Energy.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.Joules">
            <summary>
            Gets the quantity in joules".
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.Nanojoules">
            <summary>
            Gets the quantity in Nanojoules
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.Microjoules">
            <summary>
            Gets the quantity in Microjoules
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.Millijoules">
            <summary>
            Gets the quantity in Millijoules
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.Kilojoules">
            <summary>
            Gets the quantity in Kilojoules
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.Megajoules">
            <summary>
            Gets the quantity in Megajoules
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.Gigajoules">
            <summary>
            Gets the quantity in Gigajoules
            </summary>
        </member>
        <member name="P:Gu.Units.Energy.KilowattHours">
            <summary>
            Gets the quantity in KilowattHours
            </summary>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Mass)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Angle)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Torque"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Current)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Volume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Force)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Pressure)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Power)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Multiply(Gu.Units.Energy,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Torque)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Stiffness)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Voltage)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.SpecificEnergy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.ElectricCharge)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Multiply(Gu.Units.Energy,Gu.Units.Flexibility)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.MagneticFlux)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Momentum)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Multiply(Gu.Units.Energy,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.MassFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.KinematicViscosity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Equality(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Energy"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Energy"/>.</param>
        </member>
        <member name="M:Gu.Units.Energy.op_Inequality(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Energy"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Energy"/>.</param>
        </member>
        <member name="M:Gu.Units.Energy.op_LessThan(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Energy"/> is less than another specified <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Energy"/>.</param>
        </member>
        <member name="M:Gu.Units.Energy.op_GreaterThan(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Energy"/> is greater than another specified <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Energy"/>.</param>
        </member>
        <member name="M:Gu.Units.Energy.op_LessThanOrEqual(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Energy"/> is less than or equal to another specified <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Energy"/>.</param>
        </member>
        <member name="M:Gu.Units.Energy.op_GreaterThanOrEqual(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Energy"/> is greater than or equal to another specified <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Energy"/>.</param>
        </member>
        <member name="M:Gu.Units.Energy.op_Multiply(System.Double,Gu.Units.Energy)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Energy"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Energy"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Energy"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Multiply(Gu.Units.Energy,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Energy"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Energy"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Division(Gu.Units.Energy,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Energy"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Energy"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Energy.op_Addition(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Energy"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Energy"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Energy"/>.</param>
        </member>
        <member name="M:Gu.Units.Energy.op_Subtraction(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Subtracts an Energy from another Energy and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Energy"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Energy"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Energy"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Energy.op_UnaryNegation(Gu.Units.Energy)">
            <summary>
            Returns an <see cref="T:Gu.Units.Energy"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Energy"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="energy">An instance of <see cref="T:Gu.Units.Energy"/></param>
        </member>
        <member name="M:Gu.Units.Energy.op_UnaryPlus(Gu.Units.Energy)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <returns>
            Returns <paramref name="energy"/>.
            </returns>
            <param name="energy">An instance of <see cref="T:Gu.Units.Energy"/></param>
        </member>
        <member name="M:Gu.Units.Energy.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Energy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Energy"/></param>
            <returns>The <see cref="T:Gu.Units.Energy"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Energy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Energy"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Energy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Energy"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Energy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Energy"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.TryParse(System.String,Gu.Units.Energy@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Energy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Energy"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Energy"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Energy"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.TryParse(System.String,System.IFormatProvider,Gu.Units.Energy@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Energy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Energy"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Energy"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Energy"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Energy@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Energy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Energy"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Energy"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Energy"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Energy@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Energy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Energy"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Energy"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Energy"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Energy"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.From(System.Double,Gu.Units.EnergyUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.FromJoules(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <param name="joules">The value in <see cref="F:Gu.Units.EnergyUnit.Joules"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.FromNanojoules(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <param name="nanojoules">The value in nJ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.FromMicrojoules(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <param name="microjoules">The value in μJ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.FromMillijoules(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <param name="millijoules">The value in mJ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.FromKilojoules(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <param name="kilojoules">The value in kJ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.FromMegajoules(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <param name="megajoules">The value in MJ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.FromGigajoules(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <param name="gigajoules">The value in GJ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.FromKilowattHours(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Energy"/>.
            </summary>
            <param name="kilowattHours">The value in kWh.</param>
            <returns>An instance of <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.GetValue(Gu.Units.EnergyUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Energy.SiValue"/> and <see cref="P:Gu.Units.Energy.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Energy.SiValue"/> and <see cref="P:Gu.Units.Energy.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 J\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 J\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex J</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex J</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Energy"/></returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(Gu.Units.EnergyUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(Gu.Units.EnergyUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(Gu.Units.EnergyUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(Gu.Units.EnergyUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(System.String,Gu.Units.EnergyUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(System.String,Gu.Units.EnergyUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(System.String,Gu.Units.EnergyUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Energy.ToString(System.String,Gu.Units.EnergyUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Energy.CompareTo(Gu.Units.Energy)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Energy"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Energy"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Energy"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Energy.Equals(Gu.Units.Energy)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Energy"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Energy as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Energy"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Energy.Equals(Gu.Units.Energy,Gu.Units.Energy)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Energy"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Energy as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Energy"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Energy.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Energy"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Energy"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Energy.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Energy.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Energy.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Energy.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.EnergyTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Energy'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.EnergyTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.EnergyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.EnergyTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.EnergyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.EnergyUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Energy"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.EnergyUnit.Joules">
            <summary>
            The Joules unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.EnergyUnit.Nanojoules">
            <summary>
            The Nanojoules unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.EnergyUnit.Microjoules">
            <summary>
            The Microjoules unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.EnergyUnit.Millijoules">
            <summary>
            The Millijoules unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.EnergyUnit.Kilojoules">
            <summary>
            The Kilojoules unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.EnergyUnit.Megajoules">
            <summary>
            The Megajoules unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.EnergyUnit.Gigajoules">
            <summary>
            The Gigajoules unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.EnergyUnit.KilowattHours">
            <summary>
            The KilowattHours unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.EnergyUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.EnergyUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.EnergyUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.EnergyUnit"/> struct.
            </summary>
            <param name="toJoules">The conversion to <see cref="F:Gu.Units.EnergyUnit.Joules"/></param>
            <param name="fromJoules">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.EnergyUnit.Joules"/></param>
        </member>
        <member name="P:Gu.Units.EnergyUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.EnergyUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.EnergyUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.EnergyUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.EnergyUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.EnergyUnit.op_Multiply(System.Double,Gu.Units.EnergyUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.op_Equality(Gu.Units.EnergyUnit,Gu.Units.EnergyUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.EnergyUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.EnergyUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.EnergyUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.EnergyUnit.op_Inequality(Gu.Units.EnergyUnit,Gu.Units.EnergyUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.EnergyUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.EnergyUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.EnergyUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.EnergyUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.EnergyUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.EnergyUnit"/></returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.TryParse(System.String,Gu.Units.EnergyUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.EnergyUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.EnergyUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.EnergyUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.EnergyUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Joules.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from joules.
            </summary>
            <param name="joules">The value in Joules</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Energy(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.GetScalarValue(Gu.Units.Energy)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Joules
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.EnergyUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.Equals(Gu.Units.EnergyUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.EnergyUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.EnergyUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same EnergyUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.EnergyUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.EnergyUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.EnergyUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.EnergyUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.EnergyUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.EnergyUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.EnergyUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.EnergyUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.EnumerableUnits">
            <summary>
            Provides common linq operations for quantity types
            </summary>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Mass})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Mass"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Length})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Length"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Time})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Time"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Temperature})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Temperature"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Angle})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Angle"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Unitless})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Unitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Current})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Current"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.LuminousIntensity})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.LuminousIntensity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Data})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Data"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.AmountOfSubstance})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.AmountOfSubstance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.SolidAngle})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.SolidAngle"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Area})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Area"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Volume})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Volume"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Force})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Force"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Pressure})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Pressure"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Density})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Density"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Energy})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Energy"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Power})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Power"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Speed})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Speed"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.AngularSpeed})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.AngularSpeed"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Frequency})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Frequency"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Acceleration})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Acceleration"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Torque})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Torque"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Stiffness})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Stiffness"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.VolumetricFlow})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.VolumetricFlow"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Voltage})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Voltage"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Resistance})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Resistance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.SpecificEnergy})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.SpecificEnergy"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.ElectricCharge})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.ElectricCharge"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Inductance})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Inductance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Capacitance})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Capacitance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Flexibility})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Flexibility"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.AngularAcceleration})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.AngularAcceleration"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.AngularJerk})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.AngularJerk"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Jerk})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Jerk"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.LengthPerUnitless})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.LengthPerUnitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.AnglePerUnitless})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.AnglePerUnitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.ForcePerUnitless})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.ForcePerUnitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.LuminousFlux})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.LuminousFlux"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Illuminance})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Illuminance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.MagneticFlux})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.MagneticFlux"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.ElectricalConductance})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.ElectricalConductance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.MagneticFieldStrength})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.MagneticFieldStrength"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.CatalyticActivity})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.CatalyticActivity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Momentum})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Momentum"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Wavenumber})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Wavenumber"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.AreaDensity})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.AreaDensity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.SpecificVolume})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.SpecificVolume"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.MassFlow})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.MassFlow"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.KinematicViscosity})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.KinematicViscosity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.MolarMass})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.MolarMass"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.MolarHeatCapacity})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.MolarHeatCapacity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{Gu.Units.Conductivity})">
            <summary>
            Calculates the sum <see cref="T:Gu.Units.Conductivity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Mass}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Length}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Time}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Temperature}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Angle}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Unitless}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Current}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LuminousIntensity}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Data}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AmountOfSubstance}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SolidAngle}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Area}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Volume}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Force}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Pressure}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Density}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Energy}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Power}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Speed}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularSpeed}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Frequency}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Acceleration}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Torque}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Stiffness}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.VolumetricFlow}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Voltage}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Resistance}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SpecificEnergy}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ElectricCharge}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Inductance}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Capacitance}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Flexibility}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularAcceleration}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularJerk}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Jerk}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LengthPerUnitless}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AnglePerUnitless}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ForcePerUnitless}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LuminousFlux}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Illuminance}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MagneticFlux}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ElectricalConductance}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MagneticFieldStrength}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.CatalyticActivity}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Momentum}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Wavenumber}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AreaDensity}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SpecificVolume}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MassFlow}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.KinematicViscosity}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MolarMass}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MolarHeatCapacity}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Sum(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Conductivity}})">
            <summary>
            Calculates the sum <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The sum</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Mass})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Mass"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Length})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Length"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Time})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Time"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Temperature})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Temperature"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Angle})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Angle"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Unitless})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Unitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Current})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Current"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.LuminousIntensity})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.LuminousIntensity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Data})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Data"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.AmountOfSubstance})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.AmountOfSubstance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.SolidAngle})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.SolidAngle"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Area})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Area"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Volume})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Volume"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Force})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Force"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Pressure})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Pressure"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Density})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Density"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Energy})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Energy"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Power})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Power"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Speed})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Speed"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.AngularSpeed})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.AngularSpeed"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Frequency})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Frequency"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Acceleration})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Acceleration"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Torque})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Torque"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Stiffness})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Stiffness"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.VolumetricFlow})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.VolumetricFlow"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Voltage})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Voltage"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Resistance})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Resistance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.SpecificEnergy})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.SpecificEnergy"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.ElectricCharge})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.ElectricCharge"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Inductance})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Inductance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Capacitance})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Capacitance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Flexibility})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Flexibility"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.AngularAcceleration})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.AngularAcceleration"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.AngularJerk})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.AngularJerk"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Jerk})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Jerk"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.LengthPerUnitless})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.LengthPerUnitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.AnglePerUnitless})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.AnglePerUnitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.ForcePerUnitless})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.ForcePerUnitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.LuminousFlux})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.LuminousFlux"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Illuminance})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Illuminance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.MagneticFlux})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.MagneticFlux"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.ElectricalConductance})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.ElectricalConductance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.MagneticFieldStrength})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.MagneticFieldStrength"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.CatalyticActivity})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.CatalyticActivity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Momentum})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Momentum"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Wavenumber})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Wavenumber"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.AreaDensity})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.AreaDensity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.SpecificVolume})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.SpecificVolume"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.MassFlow})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.MassFlow"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.KinematicViscosity})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.KinematicViscosity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.MolarMass})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.MolarMass"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.MolarHeatCapacity})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.MolarHeatCapacity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{Gu.Units.Conductivity})">
            <summary>
            Calculates the min <see cref="T:Gu.Units.Conductivity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Mass}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Length}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Time}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Temperature}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Angle}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Unitless}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Current}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LuminousIntensity}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Data}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AmountOfSubstance}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SolidAngle}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Area}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Volume}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Force}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Pressure}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Density}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Energy}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Power}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Speed}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularSpeed}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Frequency}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Acceleration}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Torque}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Stiffness}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.VolumetricFlow}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Voltage}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Resistance}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SpecificEnergy}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ElectricCharge}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Inductance}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Capacitance}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Flexibility}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularAcceleration}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularJerk}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Jerk}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LengthPerUnitless}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AnglePerUnitless}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ForcePerUnitless}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LuminousFlux}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Illuminance}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MagneticFlux}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ElectricalConductance}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MagneticFieldStrength}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.CatalyticActivity}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Momentum}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Wavenumber}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AreaDensity}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SpecificVolume}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MassFlow}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.KinematicViscosity}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MolarMass}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MolarHeatCapacity}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Min(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Conductivity}})">
            <summary>
            Calculates the min <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The min</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Mass})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Mass"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Length})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Length"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Time})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Time"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Temperature})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Temperature"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Angle})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Angle"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Unitless})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Unitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Current})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Current"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.LuminousIntensity})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.LuminousIntensity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Data})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Data"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.AmountOfSubstance})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.AmountOfSubstance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.SolidAngle})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.SolidAngle"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Area})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Area"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Volume})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Volume"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Force})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Force"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Pressure})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Pressure"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Density})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Density"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Energy})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Energy"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Power})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Power"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Speed})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Speed"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.AngularSpeed})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.AngularSpeed"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Frequency})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Frequency"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Acceleration})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Acceleration"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Torque})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Torque"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Stiffness})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Stiffness"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.VolumetricFlow})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.VolumetricFlow"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Voltage})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Voltage"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Resistance})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Resistance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.SpecificEnergy})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.SpecificEnergy"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.ElectricCharge})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.ElectricCharge"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Inductance})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Inductance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Capacitance})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Capacitance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Flexibility})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Flexibility"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.AngularAcceleration})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.AngularAcceleration"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.AngularJerk})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.AngularJerk"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Jerk})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Jerk"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.LengthPerUnitless})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.LengthPerUnitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.AnglePerUnitless})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.AnglePerUnitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.ForcePerUnitless})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.ForcePerUnitless"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.LuminousFlux})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.LuminousFlux"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Illuminance})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Illuminance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.MagneticFlux})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.MagneticFlux"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.ElectricalConductance})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.ElectricalConductance"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.MagneticFieldStrength})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.MagneticFieldStrength"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.CatalyticActivity})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.CatalyticActivity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Momentum})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Momentum"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Wavenumber})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Wavenumber"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.AreaDensity})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.AreaDensity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.SpecificVolume})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.SpecificVolume"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.MassFlow})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.MassFlow"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.KinematicViscosity})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.KinematicViscosity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.MolarMass})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.MolarMass"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.MolarHeatCapacity})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.MolarHeatCapacity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{Gu.Units.Conductivity})">
            <summary>
            Calculates the max <see cref="T:Gu.Units.Conductivity"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Mass}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Length}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Time}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Temperature}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Angle}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Unitless}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Current}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LuminousIntensity}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Data}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AmountOfSubstance}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SolidAngle}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Area}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Volume}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Force}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Pressure}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Density}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Energy}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Power}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Speed}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularSpeed}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Frequency}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Acceleration}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Torque}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Stiffness}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.VolumetricFlow}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Voltage}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Resistance}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SpecificEnergy}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ElectricCharge}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Inductance}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Capacitance}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Flexibility}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularAcceleration}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularJerk}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Jerk}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LengthPerUnitless}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AnglePerUnitless}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ForcePerUnitless}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LuminousFlux}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Illuminance}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MagneticFlux}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ElectricalConductance}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MagneticFieldStrength}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.CatalyticActivity}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Momentum}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Wavenumber}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AreaDensity}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SpecificVolume}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MassFlow}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.KinematicViscosity}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MolarMass}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MolarHeatCapacity}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Max(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Conductivity}})">
            <summary>
            Calculates the max <see cref="T:System.Nullable`1"/> of the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The max</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Mass})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Mass"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Length})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Length"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Time})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Time"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Temperature})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Temperature"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Angle})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Angle"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Unitless})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Unitless"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Current})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Current"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.LuminousIntensity})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.LuminousIntensity"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Data})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Data"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.AmountOfSubstance})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.AmountOfSubstance"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.SolidAngle})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.SolidAngle"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Area})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Area"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Volume})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Volume"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Force})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Force"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Pressure})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Pressure"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Density})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Density"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Energy})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Energy"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Power})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Power"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Speed})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Speed"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.AngularSpeed})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.AngularSpeed"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Frequency})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Frequency"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Acceleration})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Acceleration"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Torque})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Torque"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Stiffness})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Stiffness"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.VolumetricFlow})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.VolumetricFlow"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Voltage})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Voltage"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Resistance})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Resistance"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.SpecificEnergy})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.SpecificEnergy"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.ElectricCharge})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.ElectricCharge"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Inductance})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Inductance"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Capacitance})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Capacitance"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Flexibility})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Flexibility"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.AngularAcceleration})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.AngularAcceleration"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.AngularJerk})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.AngularJerk"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Jerk})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Jerk"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.LengthPerUnitless})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.LengthPerUnitless"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.AnglePerUnitless})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.AnglePerUnitless"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.ForcePerUnitless})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.ForcePerUnitless"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.LuminousFlux})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.LuminousFlux"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Illuminance})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Illuminance"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.MagneticFlux})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.MagneticFlux"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.ElectricalConductance})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.ElectricalConductance"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.MagneticFieldStrength})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.MagneticFieldStrength"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.CatalyticActivity})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.CatalyticActivity"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Momentum})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Momentum"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Wavenumber})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Wavenumber"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.AreaDensity})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.AreaDensity"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.SpecificVolume})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.SpecificVolume"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.MassFlow})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.MassFlow"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.KinematicViscosity})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.KinematicViscosity"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.MolarMass})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.MolarMass"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.MolarHeatCapacity})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.MolarHeatCapacity"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{Gu.Units.Conductivity})">
            <summary>
            Calculates the average <see cref="T:Gu.Units.Conductivity"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Mass}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Length}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Time}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Temperature}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Angle}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Unitless}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Current}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LuminousIntensity}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Data}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AmountOfSubstance}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SolidAngle}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Area}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Volume}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Force}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Pressure}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Density}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Energy}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Power}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Speed}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularSpeed}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Frequency}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Acceleration}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Torque}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Stiffness}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.VolumetricFlow}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Voltage}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Resistance}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SpecificEnergy}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ElectricCharge}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Inductance}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Capacitance}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Flexibility}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularAcceleration}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AngularJerk}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Jerk}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LengthPerUnitless}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AnglePerUnitless}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ForcePerUnitless}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.LuminousFlux}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Illuminance}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MagneticFlux}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.ElectricalConductance}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MagneticFieldStrength}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.CatalyticActivity}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Momentum}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Wavenumber}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.AreaDensity}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.SpecificVolume}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MassFlow}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.KinematicViscosity}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MolarMass}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.MolarHeatCapacity}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="M:Gu.Units.EnumerableUnits.Average(System.Collections.Generic.IEnumerable{System.Nullable{Gu.Units.Conductivity}})">
            <summary>
            Calculates the average <see cref="T:System.Nullable`1"/> for the values in <paramref name="source"/>
            </summary>
            <param name="source"><see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The average</returns>
        </member>
        <member name="T:Gu.Units.Flexibility">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Flexibility.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.FlexibilityUnit.MetresPerNewton"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Flexibility.metresPerNewton">
            <summary>
            The quantity in <see cref="F:Gu.Units.FlexibilityUnit.MetresPerNewton"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Flexibility.#ctor(System.Double,Gu.Units.FlexibilityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Flexibility"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.FlexibilityUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Flexibility.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.FlexibilityUnit.MetresPerNewton"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Flexibility.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.FlexibilityUnit"/> for the <see cref="P:Gu.Units.Flexibility.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Flexibility.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Flexibility.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Flexibility.MetresPerNewton">
            <summary>
            Gets the quantity in metresPerNewton".
            </summary>
        </member>
        <member name="P:Gu.Units.Flexibility.MillimetresPerNewton">
            <summary>
            Gets the quantity in MillimetresPerNewton
            </summary>
        </member>
        <member name="P:Gu.Units.Flexibility.MillimetresPerKilonewton">
            <summary>
            Gets the quantity in MillimetresPerKilonewton
            </summary>
        </member>
        <member name="P:Gu.Units.Flexibility.MicrometresPerKilonewton">
            <summary>
            Gets the quantity in MicrometresPerKilonewton
            </summary>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Multiply(Gu.Units.Flexibility,Gu.Units.Force)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Multiply(Gu.Units.Flexibility,Gu.Units.Pressure)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Multiply(Gu.Units.Flexibility,Gu.Units.Energy)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Multiply(Gu.Units.Flexibility,Gu.Units.Power)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Multiply(Gu.Units.Flexibility,Gu.Units.ForcePerUnitless)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LengthPerUnitless"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Multiply(Gu.Units.Flexibility,Gu.Units.MassFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Division(System.Double,Gu.Units.Flexibility)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The Stiffness that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Division(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Equality(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Flexibility"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Inequality(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Flexibility"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.op_LessThan(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Flexibility"/> is less than another specified <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.op_GreaterThan(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Flexibility"/> is greater than another specified <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.op_LessThanOrEqual(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Flexibility"/> is less than or equal to another specified <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.op_GreaterThanOrEqual(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Flexibility"/> is greater than or equal to another specified <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Multiply(System.Double,Gu.Units.Flexibility)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Flexibility"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Flexibility"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Multiply(Gu.Units.Flexibility,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Flexibility"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Flexibility"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Division(Gu.Units.Flexibility,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Flexibility"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Flexibility"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Addition(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Flexibility"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Flexibility"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Flexibility"/>.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.op_Subtraction(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Subtracts an Flexibility from another Flexibility and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Flexibility"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Flexibility"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Flexibility"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Flexibility.op_UnaryNegation(Gu.Units.Flexibility)">
            <summary>
            Returns an <see cref="T:Gu.Units.Flexibility"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Flexibility"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="flexibility">An instance of <see cref="T:Gu.Units.Flexibility"/></param>
        </member>
        <member name="M:Gu.Units.Flexibility.op_UnaryPlus(Gu.Units.Flexibility)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <returns>
            Returns <paramref name="flexibility"/>.
            </returns>
            <param name="flexibility">An instance of <see cref="T:Gu.Units.Flexibility"/></param>
        </member>
        <member name="M:Gu.Units.Flexibility.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Flexibility"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Flexibility"/></param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Flexibility"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Flexibility"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Flexibility"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.TryParse(System.String,Gu.Units.Flexibility@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Flexibility"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Flexibility"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Flexibility"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.TryParse(System.String,System.IFormatProvider,Gu.Units.Flexibility@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Flexibility"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Flexibility"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Flexibility"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Flexibility@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Flexibility"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Flexibility"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Flexibility"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Flexibility@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Flexibility"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Flexibility"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Flexibility"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Flexibility"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Flexibility"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.From(System.Double,Gu.Units.FlexibilityUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.FromMetresPerNewton(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <param name="metresPerNewton">The value in <see cref="F:Gu.Units.FlexibilityUnit.MetresPerNewton"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.FromMillimetresPerNewton(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <param name="millimetresPerNewton">The value in mm/N.</param>
            <returns>An instance of <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.FromMillimetresPerKilonewton(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <param name="millimetresPerKilonewton">The value in mm/kN.</param>
            <returns>An instance of <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.FromMicrometresPerKilonewton(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Flexibility"/>.
            </summary>
            <param name="micrometresPerKilonewton">The value in μm/kN.</param>
            <returns>An instance of <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.GetValue(Gu.Units.FlexibilityUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Flexibility.SiValue"/> and <see cref="P:Gu.Units.Flexibility.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Flexibility.SiValue"/> and <see cref="P:Gu.Units.Flexibility.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/N\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/N\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m/N</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m/N</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Flexibility"/></returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(Gu.Units.FlexibilityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(Gu.Units.FlexibilityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(Gu.Units.FlexibilityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(Gu.Units.FlexibilityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(System.String,Gu.Units.FlexibilityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(System.String,Gu.Units.FlexibilityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(System.String,Gu.Units.FlexibilityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ToString(System.String,Gu.Units.FlexibilityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.CompareTo(Gu.Units.Flexibility)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Flexibility"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Flexibility"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Flexibility"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.Equals(Gu.Units.Flexibility)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Flexibility"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Flexibility as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Flexibility"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.Equals(Gu.Units.Flexibility,Gu.Units.Flexibility)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Flexibility"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Flexibility as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Flexibility"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Flexibility.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Flexibility"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Flexibility"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Flexibility.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Flexibility.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Flexibility.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Flexibility.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.FlexibilityTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Flexibility'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.FlexibilityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FlexibilityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FlexibilityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FlexibilityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.FlexibilityUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Flexibility"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FlexibilityUnit.MetresPerNewton">
            <summary>
            The MetresPerNewton unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FlexibilityUnit.MillimetresPerNewton">
            <summary>
            The MillimetresPerNewton unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FlexibilityUnit.MillimetresPerKilonewton">
            <summary>
            The MillimetresPerKilonewton unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FlexibilityUnit.MicrometresPerKilonewton">
            <summary>
            The MicrometresPerKilonewton unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FlexibilityUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.FlexibilityUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.FlexibilityUnit"/> struct.
            </summary>
            <param name="toMetresPerNewton">The conversion to <see cref="F:Gu.Units.FlexibilityUnit.MetresPerNewton"/></param>
            <param name="fromMetresPerNewton">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.FlexibilityUnit.MetresPerNewton"/></param>
        </member>
        <member name="P:Gu.Units.FlexibilityUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.FlexibilityUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.FlexibilityUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.FlexibilityUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.FlexibilityUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.op_Multiply(System.Double,Gu.Units.FlexibilityUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.op_Equality(Gu.Units.FlexibilityUnit,Gu.Units.FlexibilityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.FlexibilityUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.FlexibilityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.FlexibilityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.op_Inequality(Gu.Units.FlexibilityUnit,Gu.Units.FlexibilityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.FlexibilityUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.FlexibilityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.FlexibilityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.FlexibilityUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.FlexibilityUnit"/></returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.TryParse(System.String,Gu.Units.FlexibilityUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.FlexibilityUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.FlexibilityUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.FlexibilityUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.FlexibilityUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to MetresPerNewton.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from metresPerNewton.
            </summary>
            <param name="metresPerNewton">The value in MetresPerNewton</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Flexibility(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.GetScalarValue(Gu.Units.Flexibility)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in MetresPerNewton
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.Equals(Gu.Units.FlexibilityUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.FlexibilityUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.FlexibilityUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same FlexibilityUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FlexibilityUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.FlexibilityUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.FlexibilityUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.FlexibilityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FlexibilityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FlexibilityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FlexibilityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Force">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Force"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Force.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.ForceUnit.Newtons"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Force.newtons">
            <summary>
            The quantity in <see cref="F:Gu.Units.ForceUnit.Newtons"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Force.#ctor(System.Double,Gu.Units.ForceUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Force"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.ForceUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Force.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.ForceUnit.Newtons"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Force.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.ForceUnit"/> for the <see cref="P:Gu.Units.Force.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Force.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Force.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Force.Newtons">
            <summary>
            Gets the quantity in newtons".
            </summary>
        </member>
        <member name="P:Gu.Units.Force.Nanonewtons">
            <summary>
            Gets the quantity in Nanonewtons
            </summary>
        </member>
        <member name="P:Gu.Units.Force.Micronewtons">
            <summary>
            Gets the quantity in Micronewtons
            </summary>
        </member>
        <member name="P:Gu.Units.Force.Millinewtons">
            <summary>
            Gets the quantity in Millinewtons
            </summary>
        </member>
        <member name="P:Gu.Units.Force.Kilonewtons">
            <summary>
            Gets the quantity in Kilonewtons
            </summary>
        </member>
        <member name="P:Gu.Units.Force.Meganewtons">
            <summary>
            Gets the quantity in Meganewtons
            </summary>
        </member>
        <member name="P:Gu.Units.Force.Giganewtons">
            <summary>
            Gets the quantity in Giganewtons
            </summary>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Mass)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Multiply(Gu.Units.Force,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Multiply(Gu.Units.Force,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Unitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ForcePerUnitless"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Pressure)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Energy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Multiply(Gu.Units.Force,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Acceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Stiffness)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Multiply(Gu.Units.Force,Gu.Units.Flexibility)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.ForcePerUnitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Unitless"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Momentum)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Multiply(Gu.Units.Force,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.MassFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Equality(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Force"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Force"/>.</param>
        </member>
        <member name="M:Gu.Units.Force.op_Inequality(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Force"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Force"/>.</param>
        </member>
        <member name="M:Gu.Units.Force.op_LessThan(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Force"/> is less than another specified <see cref="T:Gu.Units.Force"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Force"/>.</param>
        </member>
        <member name="M:Gu.Units.Force.op_GreaterThan(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Force"/> is greater than another specified <see cref="T:Gu.Units.Force"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Force"/>.</param>
        </member>
        <member name="M:Gu.Units.Force.op_LessThanOrEqual(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Force"/> is less than or equal to another specified <see cref="T:Gu.Units.Force"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Force"/>.</param>
        </member>
        <member name="M:Gu.Units.Force.op_GreaterThanOrEqual(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Force"/> is greater than or equal to another specified <see cref="T:Gu.Units.Force"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Force"/>.</param>
        </member>
        <member name="M:Gu.Units.Force.op_Multiply(System.Double,Gu.Units.Force)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Force"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Force"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Force"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Multiply(Gu.Units.Force,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Force"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Force"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Division(Gu.Units.Force,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Force"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Force"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Force.op_Addition(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Force"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Force"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Force"/>.</param>
        </member>
        <member name="M:Gu.Units.Force.op_Subtraction(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Subtracts an Force from another Force and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Force"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Force"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Force"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Force.op_UnaryNegation(Gu.Units.Force)">
            <summary>
            Returns an <see cref="T:Gu.Units.Force"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Force"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="force">An instance of <see cref="T:Gu.Units.Force"/></param>
        </member>
        <member name="M:Gu.Units.Force.op_UnaryPlus(Gu.Units.Force)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Force"/>.
            </summary>
            <returns>
            Returns <paramref name="force"/>.
            </returns>
            <param name="force">An instance of <see cref="T:Gu.Units.Force"/></param>
        </member>
        <member name="M:Gu.Units.Force.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Force"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Force"/></param>
            <returns>The <see cref="T:Gu.Units.Force"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Force.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Force"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Force"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Force"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Force.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Force"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Force"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Force"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Force.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Force"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Force"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Force"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Force.TryParse(System.String,Gu.Units.Force@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Force"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Force"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Force"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Force"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Force.TryParse(System.String,System.IFormatProvider,Gu.Units.Force@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Force"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Force"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Force"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Force"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Force.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Force@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Force"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Force"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Force"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Force"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Force.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Force@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Force"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Force"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Force"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Force"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Force.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Force"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.From(System.Double,Gu.Units.ForceUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Force"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.FromNewtons(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Force"/>.
            </summary>
            <param name="newtons">The value in <see cref="F:Gu.Units.ForceUnit.Newtons"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.FromNanonewtons(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Force"/>.
            </summary>
            <param name="nanonewtons">The value in nN.</param>
            <returns>An instance of <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.FromMicronewtons(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Force"/>.
            </summary>
            <param name="micronewtons">The value in μN.</param>
            <returns>An instance of <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.FromMillinewtons(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Force"/>.
            </summary>
            <param name="millinewtons">The value in mN.</param>
            <returns>An instance of <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.FromKilonewtons(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Force"/>.
            </summary>
            <param name="kilonewtons">The value in kN.</param>
            <returns>An instance of <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.FromMeganewtons(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Force"/>.
            </summary>
            <param name="meganewtons">The value in MN.</param>
            <returns>An instance of <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.FromGiganewtons(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Force"/>.
            </summary>
            <param name="giganewtons">The value in GN.</param>
            <returns>An instance of <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.GetValue(Gu.Units.ForceUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Force.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Force.SiValue"/> and <see cref="P:Gu.Units.Force.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Force.SiValue"/> and <see cref="P:Gu.Units.Force.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex N</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex N</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Force"/></returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(Gu.Units.ForceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(Gu.Units.ForceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(Gu.Units.ForceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(Gu.Units.ForceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(System.String,Gu.Units.ForceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(System.String,Gu.Units.ForceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(System.String,Gu.Units.ForceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Force.ToString(System.String,Gu.Units.ForceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Force.CompareTo(Gu.Units.Force)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Force"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Force"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Force"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Force.Equals(Gu.Units.Force)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Force"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Force as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Force"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Force.Equals(Gu.Units.Force,Gu.Units.Force)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Force"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Force as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Force"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Force.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Force"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Force"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Force.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Force.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Force.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Force.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.ForcePerUnitless">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.ForcePerUnitless.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.ForcePerUnitlessUnit.NewtonsPerUnitless"/>
            </summary>
        </member>
        <member name="F:Gu.Units.ForcePerUnitless.newtonsPerUnitless">
            <summary>
            The quantity in <see cref="F:Gu.Units.ForcePerUnitlessUnit.NewtonsPerUnitless"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.#ctor(System.Double,Gu.Units.ForcePerUnitlessUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.ForcePerUnitless"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.ForcePerUnitlessUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.ForcePerUnitless.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.ForcePerUnitlessUnit.NewtonsPerUnitless"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ForcePerUnitless.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.ForcePerUnitlessUnit"/> for the <see cref="P:Gu.Units.ForcePerUnitless.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ForcePerUnitless.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.ForcePerUnitless.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ForcePerUnitless.NewtonsPerUnitless">
            <summary>
            Gets the quantity in newtonsPerUnitless".
            </summary>
        </member>
        <member name="P:Gu.Units.ForcePerUnitless.NewtonsPerPercent">
            <summary>
            Gets the quantity in NewtonsPerPercent
            </summary>
        </member>
        <member name="P:Gu.Units.ForcePerUnitless.KilonewtonsPerPercent">
            <summary>
            Gets the quantity in KilonewtonsPerPercent
            </summary>
        </member>
        <member name="P:Gu.Units.ForcePerUnitless.MeganewtonsPerPercent">
            <summary>
            Gets the quantity in MeganewtonsPerPercent
            </summary>
        </member>
        <member name="P:Gu.Units.ForcePerUnitless.GiganewtonsPerPercent">
            <summary>
            Gets the quantity in GiganewtonsPerPercent
            </summary>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Multiply(Gu.Units.ForcePerUnitless,Gu.Units.Unitless)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Division(Gu.Units.ForcePerUnitless,Gu.Units.Stiffness)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LengthPerUnitless"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Multiply(Gu.Units.ForcePerUnitless,Gu.Units.Flexibility)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LengthPerUnitless"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Division(Gu.Units.ForcePerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Division(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Equality(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ForcePerUnitless"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Inequality(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ForcePerUnitless"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_LessThan(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ForcePerUnitless"/> is less than another specified <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_GreaterThan(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ForcePerUnitless"/> is greater than another specified <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_LessThanOrEqual(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ForcePerUnitless"/> is less than or equal to another specified <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_GreaterThanOrEqual(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.ForcePerUnitless"/> is greater than or equal to another specified <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Multiply(System.Double,Gu.Units.ForcePerUnitless)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.ForcePerUnitless"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Multiply(Gu.Units.ForcePerUnitless,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.ForcePerUnitless"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Division(Gu.Units.ForcePerUnitless,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Addition(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.ForcePerUnitless"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.ForcePerUnitless"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_Subtraction(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Subtracts an ForcePerUnitless from another ForcePerUnitless and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.ForcePerUnitless"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitless"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitless"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_UnaryNegation(Gu.Units.ForcePerUnitless)">
            <summary>
            Returns an <see cref="T:Gu.Units.ForcePerUnitless"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.ForcePerUnitless"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="forcePerUnitless">An instance of <see cref="T:Gu.Units.ForcePerUnitless"/></param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.op_UnaryPlus(Gu.Units.ForcePerUnitless)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <returns>
            Returns <paramref name="forcePerUnitless"/>.
            </returns>
            <param name="forcePerUnitless">An instance of <see cref="T:Gu.Units.ForcePerUnitless"/></param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <returns>The <see cref="T:Gu.Units.ForcePerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.ForcePerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.ForcePerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.ForcePerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.TryParse(System.String,Gu.Units.ForcePerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.TryParse(System.String,System.IFormatProvider,Gu.Units.ForcePerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.ForcePerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.ForcePerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.ForcePerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.ForcePerUnitless"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.From(System.Double,Gu.Units.ForcePerUnitlessUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.FromNewtonsPerUnitless(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <param name="newtonsPerUnitless">The value in <see cref="F:Gu.Units.ForcePerUnitlessUnit.NewtonsPerUnitless"/></param>
            <returns>An instance of <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.FromNewtonsPerPercent(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <param name="newtonsPerPercent">The value in N/%.</param>
            <returns>An instance of <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.FromKilonewtonsPerPercent(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <param name="kilonewtonsPerPercent">The value in kN/%.</param>
            <returns>An instance of <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.FromMeganewtonsPerPercent(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <param name="meganewtonsPerPercent">The value in MN/%.</param>
            <returns>An instance of <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.FromGiganewtonsPerPercent(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.ForcePerUnitless"/>.
            </summary>
            <param name="giganewtonsPerPercent">The value in GN/%.</param>
            <returns>An instance of <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.GetValue(Gu.Units.ForcePerUnitlessUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.ForcePerUnitless.SiValue"/> and <see cref="P:Gu.Units.ForcePerUnitless.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.ForcePerUnitless.SiValue"/> and <see cref="P:Gu.Units.ForcePerUnitless.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N/ul\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N/ul\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex N/ul</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex N/ul</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.ForcePerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(Gu.Units.ForcePerUnitlessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(Gu.Units.ForcePerUnitlessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(Gu.Units.ForcePerUnitlessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(Gu.Units.ForcePerUnitlessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(System.String,Gu.Units.ForcePerUnitlessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(System.String,Gu.Units.ForcePerUnitlessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(System.String,Gu.Units.ForcePerUnitlessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ToString(System.String,Gu.Units.ForcePerUnitlessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.CompareTo(Gu.Units.ForcePerUnitless)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.ForcePerUnitless"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.ForcePerUnitless"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.ForcePerUnitless"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.Equals(Gu.Units.ForcePerUnitless)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ForcePerUnitless"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same ForcePerUnitless as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.ForcePerUnitless"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.Equals(Gu.Units.ForcePerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ForcePerUnitless"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same ForcePerUnitless as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.ForcePerUnitless"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ForcePerUnitless"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.ForcePerUnitless"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitless.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.ForcePerUnitlessTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.ForcePerUnitless'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ForcePerUnitlessUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.ForcePerUnitless"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForcePerUnitlessUnit.NewtonsPerUnitless">
            <summary>
            The NewtonsPerUnitless unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForcePerUnitlessUnit.NewtonsPerPercent">
            <summary>
            The NewtonsPerPercent unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForcePerUnitlessUnit.KilonewtonsPerPercent">
            <summary>
            The KilonewtonsPerPercent unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForcePerUnitlessUnit.MeganewtonsPerPercent">
            <summary>
            The MeganewtonsPerPercent unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForcePerUnitlessUnit.GiganewtonsPerPercent">
            <summary>
            The GiganewtonsPerPercent unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForcePerUnitlessUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ForcePerUnitlessUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.ForcePerUnitlessUnit"/> struct.
            </summary>
            <param name="toNewtonsPerUnitless">The conversion to <see cref="F:Gu.Units.ForcePerUnitlessUnit.NewtonsPerUnitless"/></param>
            <param name="fromNewtonsPerUnitless">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.ForcePerUnitlessUnit.NewtonsPerUnitless"/></param>
        </member>
        <member name="P:Gu.Units.ForcePerUnitlessUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ForcePerUnitlessUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.ForcePerUnitlessUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.ForcePerUnitlessUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ForcePerUnitlessUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.op_Multiply(System.Double,Gu.Units.ForcePerUnitlessUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ForcePerUnitless"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.op_Equality(Gu.Units.ForcePerUnitlessUnit,Gu.Units.ForcePerUnitlessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ForcePerUnitlessUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitlessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitlessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.op_Inequality(Gu.Units.ForcePerUnitlessUnit,Gu.Units.ForcePerUnitlessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ForcePerUnitlessUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForcePerUnitlessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForcePerUnitlessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.ForcePerUnitlessUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.ForcePerUnitlessUnit"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.TryParse(System.String,Gu.Units.ForcePerUnitlessUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForcePerUnitlessUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForcePerUnitlessUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.ForcePerUnitlessUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ForcePerUnitlessUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to NewtonsPerUnitless.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from newtonsPerUnitless.
            </summary>
            <param name="newtonsPerUnitless">The value in NewtonsPerUnitless</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new ForcePerUnitless(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.GetScalarValue(Gu.Units.ForcePerUnitless)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in NewtonsPerUnitless
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.Equals(Gu.Units.ForcePerUnitlessUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ForcePerUnitlessUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.ForcePerUnitlessUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same ForcePerUnitlessUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ForcePerUnitlessUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.ForcePerUnitlessUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForcePerUnitlessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ForceTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Force'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ForceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ForceUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Force"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForceUnit.Newtons">
            <summary>
            The Newtons unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForceUnit.Nanonewtons">
            <summary>
            The Nanonewtons unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForceUnit.Micronewtons">
            <summary>
            The Micronewtons unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForceUnit.Millinewtons">
            <summary>
            The Millinewtons unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForceUnit.Kilonewtons">
            <summary>
            The Kilonewtons unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForceUnit.Meganewtons">
            <summary>
            The Meganewtons unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForceUnit.Giganewtons">
            <summary>
            The Giganewtons unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ForceUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ForceUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.ForceUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.ForceUnit"/> struct.
            </summary>
            <param name="toNewtons">The conversion to <see cref="F:Gu.Units.ForceUnit.Newtons"/></param>
            <param name="fromNewtons">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.ForceUnit.Newtons"/></param>
        </member>
        <member name="P:Gu.Units.ForceUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ForceUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.ForceUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.ForceUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ForceUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForceUnit.op_Multiply(System.Double,Gu.Units.ForceUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.op_Equality(Gu.Units.ForceUnit,Gu.Units.ForceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ForceUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ForceUnit.op_Inequality(Gu.Units.ForceUnit,Gu.Units.ForceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ForceUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ForceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ForceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ForceUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.ForceUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.ForceUnit"/></returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.TryParse(System.String,Gu.Units.ForceUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ForceUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ForceUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.ForceUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ForceUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Newtons.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from newtons.
            </summary>
            <param name="newtons">The value in Newtons</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Force(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.GetScalarValue(Gu.Units.Force)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Newtons
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForceUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.Equals(Gu.Units.ForceUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ForceUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.ForceUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same ForceUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.ForceUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForceUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ForceUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.ForceUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ForceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ForceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Frequency">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Frequency"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Frequency.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.FrequencyUnit.Hertz"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Frequency.hertz">
            <summary>
            The quantity in <see cref="F:Gu.Units.FrequencyUnit.Hertz"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Frequency.#ctor(System.Double,Gu.Units.FrequencyUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Frequency"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.FrequencyUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Frequency.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.FrequencyUnit.Hertz"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Frequency.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.FrequencyUnit"/> for the <see cref="P:Gu.Units.Frequency.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Frequency.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Frequency.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Frequency.Hertz">
            <summary>
            Gets the quantity in hertz".
            </summary>
        </member>
        <member name="P:Gu.Units.Frequency.Millihertz">
            <summary>
            Gets the quantity in Millihertz
            </summary>
        </member>
        <member name="P:Gu.Units.Frequency.Kilohertz">
            <summary>
            Gets the quantity in Kilohertz
            </summary>
        </member>
        <member name="P:Gu.Units.Frequency.Megahertz">
            <summary>
            Gets the quantity in Megahertz
            </summary>
        </member>
        <member name="P:Gu.Units.Frequency.Gigahertz">
            <summary>
            Gets the quantity in Gigahertz
            </summary>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Mass)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Angle)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.AmountOfSubstance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.CatalyticActivity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Area)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Volume)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Energy)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Division(Gu.Units.Frequency,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.AngularSpeed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Acceleration)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Jerk"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.ElectricCharge)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Inductance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Capacitance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.AngularAcceleration)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularJerk"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.MagneticFlux)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.Momentum)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Division(Gu.Units.Frequency,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.MassFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,Gu.Units.KinematicViscosity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Division(System.Double,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The Time that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Division(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Equality(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Frequency"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Frequency"/>.</param>
        </member>
        <member name="M:Gu.Units.Frequency.op_Inequality(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Frequency"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Frequency"/>.</param>
        </member>
        <member name="M:Gu.Units.Frequency.op_LessThan(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Frequency"/> is less than another specified <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Frequency"/>.</param>
        </member>
        <member name="M:Gu.Units.Frequency.op_GreaterThan(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Frequency"/> is greater than another specified <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Frequency"/>.</param>
        </member>
        <member name="M:Gu.Units.Frequency.op_LessThanOrEqual(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Frequency"/> is less than or equal to another specified <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Frequency"/>.</param>
        </member>
        <member name="M:Gu.Units.Frequency.op_GreaterThanOrEqual(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Frequency"/> is greater than or equal to another specified <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Frequency"/>.</param>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(System.Double,Gu.Units.Frequency)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Frequency"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Frequency"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Frequency"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Multiply(Gu.Units.Frequency,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Frequency"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Frequency"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Division(Gu.Units.Frequency,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Frequency"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Frequency"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.op_Addition(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Frequency"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Frequency"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Frequency"/>.</param>
        </member>
        <member name="M:Gu.Units.Frequency.op_Subtraction(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Subtracts an Frequency from another Frequency and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Frequency"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Frequency"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Frequency"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Frequency.op_UnaryNegation(Gu.Units.Frequency)">
            <summary>
            Returns an <see cref="T:Gu.Units.Frequency"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Frequency"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="frequency">An instance of <see cref="T:Gu.Units.Frequency"/></param>
        </member>
        <member name="M:Gu.Units.Frequency.op_UnaryPlus(Gu.Units.Frequency)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <returns>
            Returns <paramref name="frequency"/>.
            </returns>
            <param name="frequency">An instance of <see cref="T:Gu.Units.Frequency"/></param>
        </member>
        <member name="M:Gu.Units.Frequency.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Frequency"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Frequency"/></param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Frequency"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Frequency"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Frequency"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Frequency"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Frequency"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Frequency"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.TryParse(System.String,Gu.Units.Frequency@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Frequency"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Frequency"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Frequency"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Frequency"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.TryParse(System.String,System.IFormatProvider,Gu.Units.Frequency@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Frequency"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Frequency"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Frequency"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Frequency"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Frequency@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Frequency"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Frequency"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Frequency"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Frequency"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Frequency@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Frequency"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Frequency"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Frequency"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Frequency"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Frequency"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.From(System.Double,Gu.Units.FrequencyUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.FromHertz(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <param name="hertz">The value in <see cref="F:Gu.Units.FrequencyUnit.Hertz"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.FromMillihertz(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <param name="millihertz">The value in mHz.</param>
            <returns>An instance of <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.FromKilohertz(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <param name="kilohertz">The value in kHz.</param>
            <returns>An instance of <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.FromMegahertz(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <param name="megahertz">The value in MHz.</param>
            <returns>An instance of <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.FromGigahertz(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Frequency"/>.
            </summary>
            <param name="gigahertz">The value in GHz.</param>
            <returns>An instance of <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.GetValue(Gu.Units.FrequencyUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Frequency.SiValue"/> and <see cref="P:Gu.Units.Frequency.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Frequency.SiValue"/> and <see cref="P:Gu.Units.Frequency.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 Hz\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 Hz\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex Hz</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex Hz</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Frequency"/></returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(Gu.Units.FrequencyUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(Gu.Units.FrequencyUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(Gu.Units.FrequencyUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(Gu.Units.FrequencyUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(System.String,Gu.Units.FrequencyUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(System.String,Gu.Units.FrequencyUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(System.String,Gu.Units.FrequencyUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.ToString(System.String,Gu.Units.FrequencyUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.CompareTo(Gu.Units.Frequency)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Frequency"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Frequency"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Frequency"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Frequency.Equals(Gu.Units.Frequency)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Frequency"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Frequency as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Frequency"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Frequency.Equals(Gu.Units.Frequency,Gu.Units.Frequency)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Frequency"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Frequency as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Frequency"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Frequency.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Frequency"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Frequency"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Frequency.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Frequency.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Frequency.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Frequency.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.FrequencyTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Frequency'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.FrequencyTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FrequencyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FrequencyTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FrequencyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.FrequencyUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Frequency"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FrequencyUnit.Hertz">
            <summary>
            The Hertz unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FrequencyUnit.Millihertz">
            <summary>
            The Millihertz unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FrequencyUnit.Kilohertz">
            <summary>
            The Kilohertz unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FrequencyUnit.Megahertz">
            <summary>
            The Megahertz unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FrequencyUnit.Gigahertz">
            <summary>
            The Gigahertz unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.FrequencyUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.FrequencyUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.FrequencyUnit"/> struct.
            </summary>
            <param name="toHertz">The conversion to <see cref="F:Gu.Units.FrequencyUnit.Hertz"/></param>
            <param name="fromHertz">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.FrequencyUnit.Hertz"/></param>
        </member>
        <member name="P:Gu.Units.FrequencyUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.FrequencyUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.FrequencyUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.FrequencyUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.FrequencyUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FrequencyUnit.op_Multiply(System.Double,Gu.Units.FrequencyUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.op_Equality(Gu.Units.FrequencyUnit,Gu.Units.FrequencyUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.FrequencyUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.FrequencyUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.FrequencyUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.op_Inequality(Gu.Units.FrequencyUnit,Gu.Units.FrequencyUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.FrequencyUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.FrequencyUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.FrequencyUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.FrequencyUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.FrequencyUnit"/></returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.TryParse(System.String,Gu.Units.FrequencyUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.FrequencyUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.FrequencyUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.FrequencyUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.FrequencyUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Hertz.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from hertz.
            </summary>
            <param name="hertz">The value in Hertz</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Frequency(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.GetScalarValue(Gu.Units.Frequency)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Hertz
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FrequencyUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.Equals(Gu.Units.FrequencyUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.FrequencyUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.FrequencyUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same FrequencyUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.FrequencyUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FrequencyUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.FrequencyUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.FrequencyUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.FrequencyUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FrequencyUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FrequencyUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.FrequencyUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Illuminance">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Illuminance"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Illuminance.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.IlluminanceUnit.Lux"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Illuminance.lux">
            <summary>
            The quantity in <see cref="F:Gu.Units.IlluminanceUnit.Lux"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Illuminance.#ctor(System.Double,Gu.Units.IlluminanceUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Illuminance"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.IlluminanceUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Illuminance.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.IlluminanceUnit.Lux"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Illuminance.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IlluminanceUnit"/> for the <see cref="P:Gu.Units.Illuminance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Illuminance.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Illuminance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Illuminance.Lux">
            <summary>
            Gets the quantity in lux".
            </summary>
        </member>
        <member name="M:Gu.Units.Illuminance.op_Multiply(Gu.Units.Illuminance,Gu.Units.Area)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LuminousFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.op_Division(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.op_Equality(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Illuminance"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.op_Inequality(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Illuminance"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.op_LessThan(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Illuminance"/> is less than another specified <see cref="T:Gu.Units.Illuminance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.op_GreaterThan(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Illuminance"/> is greater than another specified <see cref="T:Gu.Units.Illuminance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.op_LessThanOrEqual(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Illuminance"/> is less than or equal to another specified <see cref="T:Gu.Units.Illuminance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.op_GreaterThanOrEqual(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Illuminance"/> is greater than or equal to another specified <see cref="T:Gu.Units.Illuminance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.op_Multiply(System.Double,Gu.Units.Illuminance)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Illuminance"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Illuminance"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.op_Multiply(Gu.Units.Illuminance,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Illuminance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Illuminance"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.op_Division(Gu.Units.Illuminance,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Illuminance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Illuminance"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.op_Addition(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Illuminance"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Illuminance"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Illuminance"/>.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.op_Subtraction(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Subtracts an Illuminance from another Illuminance and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Illuminance"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Illuminance"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Illuminance"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Illuminance.op_UnaryNegation(Gu.Units.Illuminance)">
            <summary>
            Returns an <see cref="T:Gu.Units.Illuminance"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Illuminance"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="illuminance">An instance of <see cref="T:Gu.Units.Illuminance"/></param>
        </member>
        <member name="M:Gu.Units.Illuminance.op_UnaryPlus(Gu.Units.Illuminance)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Illuminance"/>.
            </summary>
            <returns>
            Returns <paramref name="illuminance"/>.
            </returns>
            <param name="illuminance">An instance of <see cref="T:Gu.Units.Illuminance"/></param>
        </member>
        <member name="M:Gu.Units.Illuminance.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Illuminance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Illuminance"/></param>
            <returns>The <see cref="T:Gu.Units.Illuminance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Illuminance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Illuminance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Illuminance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Illuminance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Illuminance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Illuminance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.TryParse(System.String,Gu.Units.Illuminance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Illuminance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Illuminance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Illuminance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.TryParse(System.String,System.IFormatProvider,Gu.Units.Illuminance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Illuminance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Illuminance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Illuminance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Illuminance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Illuminance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Illuminance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Illuminance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Illuminance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Illuminance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Illuminance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Illuminance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Illuminance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Illuminance"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Illuminance"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.From(System.Double,Gu.Units.IlluminanceUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Illuminance"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Illuminance"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.FromLux(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Illuminance"/>.
            </summary>
            <param name="lux">The value in <see cref="F:Gu.Units.IlluminanceUnit.Lux"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Illuminance"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.GetValue(Gu.Units.IlluminanceUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Illuminance.SiValue"/> and <see cref="P:Gu.Units.Illuminance.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Illuminance"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Illuminance.SiValue"/> and <see cref="P:Gu.Units.Illuminance.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Illuminance"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 lx\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Illuminance"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 lx\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Illuminance"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex lx</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Illuminance"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex lx</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Illuminance"/></returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(Gu.Units.IlluminanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(Gu.Units.IlluminanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(Gu.Units.IlluminanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(Gu.Units.IlluminanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(System.String,Gu.Units.IlluminanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(System.String,Gu.Units.IlluminanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(System.String,Gu.Units.IlluminanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ToString(System.String,Gu.Units.IlluminanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.CompareTo(Gu.Units.Illuminance)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Illuminance"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Illuminance"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Illuminance"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.Equals(Gu.Units.Illuminance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Illuminance"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Illuminance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Illuminance"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.Equals(Gu.Units.Illuminance,Gu.Units.Illuminance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Illuminance"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Illuminance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Illuminance"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Illuminance.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Illuminance"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Illuminance"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Illuminance.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Illuminance.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Illuminance.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Illuminance.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.IlluminanceTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Illuminance'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.IlluminanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.IlluminanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.IlluminanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.IlluminanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.IlluminanceUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Illuminance"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.IlluminanceUnit.Lux">
            <summary>
            The Lux unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.IlluminanceUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.IlluminanceUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.IlluminanceUnit"/> struct.
            </summary>
            <param name="toLux">The conversion to <see cref="F:Gu.Units.IlluminanceUnit.Lux"/></param>
            <param name="fromLux">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.IlluminanceUnit.Lux"/></param>
        </member>
        <member name="P:Gu.Units.IlluminanceUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.IlluminanceUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.IlluminanceUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.IlluminanceUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.IlluminanceUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.op_Multiply(System.Double,Gu.Units.IlluminanceUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Illuminance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.op_Equality(Gu.Units.IlluminanceUnit,Gu.Units.IlluminanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.IlluminanceUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.IlluminanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.IlluminanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.op_Inequality(Gu.Units.IlluminanceUnit,Gu.Units.IlluminanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.IlluminanceUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.IlluminanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.IlluminanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.IlluminanceUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.IlluminanceUnit"/></returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.TryParse(System.String,Gu.Units.IlluminanceUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.IlluminanceUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.IlluminanceUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.IlluminanceUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.IlluminanceUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Lux.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from lux.
            </summary>
            <param name="lux">The value in Lux</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Illuminance(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.GetScalarValue(Gu.Units.Illuminance)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Lux
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.Equals(Gu.Units.IlluminanceUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.IlluminanceUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.IlluminanceUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same IlluminanceUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.IlluminanceUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.IlluminanceUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.IlluminanceUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.IlluminanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.IlluminanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.IlluminanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.IlluminanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Inductance">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Inductance"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Inductance.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.InductanceUnit.Henrys"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Inductance.henrys">
            <summary>
            The quantity in <see cref="F:Gu.Units.InductanceUnit.Henrys"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Inductance.#ctor(System.Double,Gu.Units.InductanceUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Inductance"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.InductanceUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Inductance.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.InductanceUnit.Henrys"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Inductance.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.InductanceUnit"/> for the <see cref="P:Gu.Units.Inductance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Inductance.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Inductance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Inductance.Henrys">
            <summary>
            Gets the quantity in henrys".
            </summary>
        </member>
        <member name="P:Gu.Units.Inductance.Nanohenrys">
            <summary>
            Gets the quantity in Nanohenrys
            </summary>
        </member>
        <member name="P:Gu.Units.Inductance.Microhenrys">
            <summary>
            Gets the quantity in Microhenrys
            </summary>
        </member>
        <member name="P:Gu.Units.Inductance.Millihenrys">
            <summary>
            Gets the quantity in Millihenrys
            </summary>
        </member>
        <member name="P:Gu.Units.Inductance.Kilohenrys">
            <summary>
            Gets the quantity in Kilohenrys
            </summary>
        </member>
        <member name="P:Gu.Units.Inductance.Megahenrys">
            <summary>
            Gets the quantity in Megahenrys
            </summary>
        </member>
        <member name="P:Gu.Units.Inductance.Gigahenrys">
            <summary>
            Gets the quantity in Gigahenrys
            </summary>
        </member>
        <member name="M:Gu.Units.Inductance.op_Division(Gu.Units.Inductance,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.op_Multiply(Gu.Units.Inductance,Gu.Units.Current)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.op_Multiply(Gu.Units.Inductance,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.op_Division(Gu.Units.Inductance,Gu.Units.Resistance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.op_Multiply(Gu.Units.Inductance,Gu.Units.ElectricalConductance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.op_Division(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.op_Equality(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Inductance"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Inductance"/>.</param>
        </member>
        <member name="M:Gu.Units.Inductance.op_Inequality(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Inductance"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Inductance"/>.</param>
        </member>
        <member name="M:Gu.Units.Inductance.op_LessThan(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Inductance"/> is less than another specified <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Inductance"/>.</param>
        </member>
        <member name="M:Gu.Units.Inductance.op_GreaterThan(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Inductance"/> is greater than another specified <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Inductance"/>.</param>
        </member>
        <member name="M:Gu.Units.Inductance.op_LessThanOrEqual(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Inductance"/> is less than or equal to another specified <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Inductance"/>.</param>
        </member>
        <member name="M:Gu.Units.Inductance.op_GreaterThanOrEqual(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Inductance"/> is greater than or equal to another specified <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Inductance"/>.</param>
        </member>
        <member name="M:Gu.Units.Inductance.op_Multiply(System.Double,Gu.Units.Inductance)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Inductance"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Inductance"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Inductance"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.op_Multiply(Gu.Units.Inductance,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Inductance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Inductance"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.op_Division(Gu.Units.Inductance,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Inductance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Inductance"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.op_Addition(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Inductance"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Inductance"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Inductance"/>.</param>
        </member>
        <member name="M:Gu.Units.Inductance.op_Subtraction(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Subtracts an Inductance from another Inductance and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Inductance"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Inductance"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Inductance"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Inductance.op_UnaryNegation(Gu.Units.Inductance)">
            <summary>
            Returns an <see cref="T:Gu.Units.Inductance"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Inductance"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="inductance">An instance of <see cref="T:Gu.Units.Inductance"/></param>
        </member>
        <member name="M:Gu.Units.Inductance.op_UnaryPlus(Gu.Units.Inductance)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <returns>
            Returns <paramref name="inductance"/>.
            </returns>
            <param name="inductance">An instance of <see cref="T:Gu.Units.Inductance"/></param>
        </member>
        <member name="M:Gu.Units.Inductance.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Inductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Inductance"/></param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Inductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Inductance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Inductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Inductance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Inductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Inductance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.TryParse(System.String,Gu.Units.Inductance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Inductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Inductance"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Inductance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Inductance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.TryParse(System.String,System.IFormatProvider,Gu.Units.Inductance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Inductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Inductance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Inductance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Inductance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Inductance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Inductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Inductance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Inductance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Inductance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Inductance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Inductance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Inductance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Inductance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Inductance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Inductance"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.From(System.Double,Gu.Units.InductanceUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.FromHenrys(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <param name="henrys">The value in <see cref="F:Gu.Units.InductanceUnit.Henrys"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.FromNanohenrys(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <param name="nanohenrys">The value in nH.</param>
            <returns>An instance of <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.FromMicrohenrys(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <param name="microhenrys">The value in μH.</param>
            <returns>An instance of <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.FromMillihenrys(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <param name="millihenrys">The value in mH.</param>
            <returns>An instance of <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.FromKilohenrys(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <param name="kilohenrys">The value in kH.</param>
            <returns>An instance of <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.FromMegahenrys(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <param name="megahenrys">The value in MH.</param>
            <returns>An instance of <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.FromGigahenrys(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Inductance"/>.
            </summary>
            <param name="gigahenrys">The value in GH.</param>
            <returns>An instance of <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.GetValue(Gu.Units.InductanceUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Inductance.SiValue"/> and <see cref="P:Gu.Units.Inductance.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Inductance.SiValue"/> and <see cref="P:Gu.Units.Inductance.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 H\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 H\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex H</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex H</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Inductance"/></returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(Gu.Units.InductanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(Gu.Units.InductanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(Gu.Units.InductanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(Gu.Units.InductanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(System.String,Gu.Units.InductanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(System.String,Gu.Units.InductanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(System.String,Gu.Units.InductanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.ToString(System.String,Gu.Units.InductanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.CompareTo(Gu.Units.Inductance)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Inductance"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Inductance"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Inductance"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Inductance.Equals(Gu.Units.Inductance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Inductance"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Inductance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Inductance"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Inductance.Equals(Gu.Units.Inductance,Gu.Units.Inductance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Inductance"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Inductance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Inductance"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Inductance.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Inductance"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Inductance"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Inductance.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Inductance.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Inductance.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Inductance.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.InductanceTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Inductance'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.InductanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.InductanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.InductanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.InductanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.InductanceUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Inductance"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.InductanceUnit.Henrys">
            <summary>
            The Henrys unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.InductanceUnit.Nanohenrys">
            <summary>
            The Nanohenrys unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.InductanceUnit.Microhenrys">
            <summary>
            The Microhenrys unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.InductanceUnit.Millihenrys">
            <summary>
            The Millihenrys unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.InductanceUnit.Kilohenrys">
            <summary>
            The Kilohenrys unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.InductanceUnit.Megahenrys">
            <summary>
            The Megahenrys unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.InductanceUnit.Gigahenrys">
            <summary>
            The Gigahenrys unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.InductanceUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.InductanceUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.InductanceUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.InductanceUnit"/> struct.
            </summary>
            <param name="toHenrys">The conversion to <see cref="F:Gu.Units.InductanceUnit.Henrys"/></param>
            <param name="fromHenrys">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.InductanceUnit.Henrys"/></param>
        </member>
        <member name="P:Gu.Units.InductanceUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.InductanceUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.InductanceUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.InductanceUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.InductanceUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.InductanceUnit.op_Multiply(System.Double,Gu.Units.InductanceUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.op_Equality(Gu.Units.InductanceUnit,Gu.Units.InductanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.InductanceUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.InductanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.InductanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.InductanceUnit.op_Inequality(Gu.Units.InductanceUnit,Gu.Units.InductanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.InductanceUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.InductanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.InductanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.InductanceUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.InductanceUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.InductanceUnit"/></returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.TryParse(System.String,Gu.Units.InductanceUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.InductanceUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.InductanceUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.InductanceUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.InductanceUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Henrys.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from henrys.
            </summary>
            <param name="henrys">The value in Henrys</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Inductance(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.GetScalarValue(Gu.Units.Inductance)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Henrys
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.InductanceUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.Equals(Gu.Units.InductanceUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.InductanceUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.InductanceUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same InductanceUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.InductanceUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.InductanceUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.InductanceUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.InductanceUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.InductanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.InductanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.InductanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.InductanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.IQuantity">
            <summary>
            An amount of a <see cref="T:Gu.Units.IUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.IQuantity.SiValue">
            <summary>
            Gets the value in <see cref="P:Gu.Units.IQuantity.SiUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.IQuantity.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.IQuantity.SiValue"/>
            </summary>
        </member>
        <member name="M:Gu.Units.IQuantity.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Length.SiValue"/> and <see cref="P:Gu.Units.Length.SiUnit"/>
            </summary>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.IQuantity.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.IQuantity.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.IQuantity.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="T:Gu.Units.IQuantity`1">
            <summary>
            An amount of <typeparamref name="TUnit"/>
            </summary>
            <typeparam name="TUnit">The corresponding unit.</typeparam>
        </member>
        <member name="M:Gu.Units.IQuantity`1.GetValue(`0)">
            <summary>
            Gets the scalar value in <paramref name="unit"/>
            </summary>
            <param name="unit">The unit</param>
            <returns>The scalar value</returns>
        </member>
        <member name="M:Gu.Units.IQuantity`1.ToString(`0)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.IQuantity`1.ToString(`0,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.IQuantity`1.ToString(`0,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.IQuantity`1.ToString(`0,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.IQuantity`1.ToString(System.String,`0)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.IQuantity`1.ToString(System.String,`0,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.IQuantity`1.ToString(System.String,`0,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.IQuantity`1.ToString(System.String,`0,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="T:Gu.Units.IUnit">
            <summary>
            A unit of a quantity
            </summary>
        </member>
        <member name="P:Gu.Units.IUnit.Symbol">
            <summary>
            Gets the default symbol
            </summary>
        </member>
        <member name="P:Gu.Units.IUnit.SiUnit">
            <summary>
            Gets the base unit
            </summary>
        </member>
        <member name="M:Gu.Units.IUnit.ToSiUnit(System.Double)">
            <summary>
            Converts a value to the base unit.
            </summary>
            <param name="value">The value</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.IUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from the base unit.
            </summary>
            <param name="value">The value in base unit</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.IUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit to its string representation
            </summary>
            <param name="format">How to format the return value</param>
            <returns>The string representation of this instance.</returns>
        </member>
        <member name="T:Gu.Units.IUnit`1">
            <summary>
            The unit of <typeparamref name="TQuantity"/>
            </summary>
            <typeparam name="TQuantity">The quantity type</typeparam>
        </member>
        <member name="M:Gu.Units.IUnit`1.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value.</param>
            <returns>new TTQuantity(value, this)</returns>
        </member>
        <member name="M:Gu.Units.IUnit`1.GetScalarValue(`0)">
            <summary>
            Get the scalar value
            </summary>
            <param name="quantity">The quantity value</param>
            <returns>The scalar value in the unit of this</returns>
        </member>
        <member name="T:Gu.Units.FormatCache`1.IFormatKey">
            <summary> For use as key in the cache </summary>
        </member>
        <member name="T:Gu.Units.CollectionDebugView`1">
            <summary>
            http://www.codeproject.com/Articles/28405/Make-the-debugger-show-the-contents-of-your-custom
            </summary>
            <typeparam name="T">The type of the items in the collection.</typeparam>
        </member>
        <member name="T:Gu.Units.Jerk">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Jerk"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Jerk.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.JerkUnit.MetresPerSecondCubed"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Jerk.metresPerSecondCubed">
            <summary>
            The quantity in <see cref="F:Gu.Units.JerkUnit.MetresPerSecondCubed"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Jerk.#ctor(System.Double,Gu.Units.JerkUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Jerk"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.JerkUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Jerk.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.JerkUnit.MetresPerSecondCubed"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.JerkUnit"/> for the <see cref="P:Gu.Units.Jerk.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Jerk.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.MetresPerSecondCubed">
            <summary>
            Gets the quantity in metresPerSecondCubed".
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.MillimetresPerSecondCubed">
            <summary>
            Gets the quantity in MillimetresPerSecondCubed
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.CentimetresPerSecondCubed">
            <summary>
            Gets the quantity in CentimetresPerSecondCubed
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.MillimetresPerHourCubed">
            <summary>
            Gets the quantity in MillimetresPerHourCubed
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.MillimetresPerMinuteCubed">
            <summary>
            Gets the quantity in MillimetresPerMinuteCubed
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.MetresPerHourCubed">
            <summary>
            Gets the quantity in MetresPerHourCubed
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.MetresPerMinuteCubed">
            <summary>
            Gets the quantity in MetresPerMinuteCubed
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.CentimetresPerHourCubed">
            <summary>
            Gets the quantity in CentimetresPerHourCubed
            </summary>
        </member>
        <member name="P:Gu.Units.Jerk.CentimetresPerMinuteCubed">
            <summary>
            Gets the quantity in CentimetresPerMinuteCubed
            </summary>
        </member>
        <member name="M:Gu.Units.Jerk.op_Multiply(Gu.Units.Jerk,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.op_Division(Gu.Units.Jerk,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.op_Division(Gu.Units.Jerk,Gu.Units.Acceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.op_Division(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.op_Equality(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Jerk"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Jerk"/>.</param>
        </member>
        <member name="M:Gu.Units.Jerk.op_Inequality(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Jerk"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Jerk"/>.</param>
        </member>
        <member name="M:Gu.Units.Jerk.op_LessThan(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Jerk"/> is less than another specified <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Jerk"/>.</param>
        </member>
        <member name="M:Gu.Units.Jerk.op_GreaterThan(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Jerk"/> is greater than another specified <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Jerk"/>.</param>
        </member>
        <member name="M:Gu.Units.Jerk.op_LessThanOrEqual(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Jerk"/> is less than or equal to another specified <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Jerk"/>.</param>
        </member>
        <member name="M:Gu.Units.Jerk.op_GreaterThanOrEqual(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Jerk"/> is greater than or equal to another specified <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Jerk"/>.</param>
        </member>
        <member name="M:Gu.Units.Jerk.op_Multiply(System.Double,Gu.Units.Jerk)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Jerk"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Jerk"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Jerk"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.op_Multiply(Gu.Units.Jerk,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Jerk"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Jerk"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.op_Division(Gu.Units.Jerk,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Jerk"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Jerk"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.op_Addition(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Jerk"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Jerk"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Jerk"/>.</param>
        </member>
        <member name="M:Gu.Units.Jerk.op_Subtraction(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Subtracts an Jerk from another Jerk and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Jerk"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Jerk"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Jerk"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Jerk.op_UnaryNegation(Gu.Units.Jerk)">
            <summary>
            Returns an <see cref="T:Gu.Units.Jerk"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Jerk"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="jerk">An instance of <see cref="T:Gu.Units.Jerk"/></param>
        </member>
        <member name="M:Gu.Units.Jerk.op_UnaryPlus(Gu.Units.Jerk)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <returns>
            Returns <paramref name="jerk"/>.
            </returns>
            <param name="jerk">An instance of <see cref="T:Gu.Units.Jerk"/></param>
        </member>
        <member name="M:Gu.Units.Jerk.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Jerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Jerk"/></param>
            <returns>The <see cref="T:Gu.Units.Jerk"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Jerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Jerk"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Jerk"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Jerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Jerk"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Jerk"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Jerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Jerk"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Jerk"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.TryParse(System.String,Gu.Units.Jerk@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Jerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Jerk"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Jerk"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Jerk"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.TryParse(System.String,System.IFormatProvider,Gu.Units.Jerk@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Jerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Jerk"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Jerk"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Jerk"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Jerk@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Jerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Jerk"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Jerk"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Jerk"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Jerk@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Jerk"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Jerk"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Jerk"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Jerk"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Jerk"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.From(System.Double,Gu.Units.JerkUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.FromMetresPerSecondCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="metresPerSecondCubed">The value in <see cref="F:Gu.Units.JerkUnit.MetresPerSecondCubed"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.FromMillimetresPerSecondCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="millimetresPerSecondCubed">The value in mm⋅s⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.FromCentimetresPerSecondCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="centimetresPerSecondCubed">The value in cm⋅s⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.FromMillimetresPerHourCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="millimetresPerHourCubed">The value in mm⋅h⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.FromMillimetresPerMinuteCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="millimetresPerMinuteCubed">The value in mm⋅min⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.FromMetresPerHourCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="metresPerHourCubed">The value in m⋅h⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.FromMetresPerMinuteCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="metresPerMinuteCubed">The value in m⋅min⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.FromCentimetresPerHourCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="centimetresPerHourCubed">The value in cm⋅h⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.FromCentimetresPerMinuteCubed(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Jerk"/>.
            </summary>
            <param name="centimetresPerMinuteCubed">The value in cm⋅min⁻³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.GetValue(Gu.Units.JerkUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Jerk.SiValue"/> and <see cref="P:Gu.Units.Jerk.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Jerk.SiValue"/> and <see cref="P:Gu.Units.Jerk.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/s³\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/s³\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m/s³</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m/s³</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Jerk"/></returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(Gu.Units.JerkUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(Gu.Units.JerkUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(Gu.Units.JerkUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(Gu.Units.JerkUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(System.String,Gu.Units.JerkUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(System.String,Gu.Units.JerkUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(System.String,Gu.Units.JerkUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.ToString(System.String,Gu.Units.JerkUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.CompareTo(Gu.Units.Jerk)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Jerk"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Jerk"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Jerk"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Jerk.Equals(Gu.Units.Jerk)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Jerk"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Jerk as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Jerk"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Jerk.Equals(Gu.Units.Jerk,Gu.Units.Jerk)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Jerk"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Jerk as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Jerk"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Jerk.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Jerk"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Jerk"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Jerk.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Jerk.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Jerk.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Jerk.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.JerkTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Jerk'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.JerkTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.JerkTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.JerkTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.JerkTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.JerkUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Jerk"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.MetresPerSecondCubed">
            <summary>
            The MetresPerSecondCubed unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.MillimetresPerSecondCubed">
            <summary>
            The MillimetresPerSecondCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.CentimetresPerSecondCubed">
            <summary>
            The CentimetresPerSecondCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.MillimetresPerHourCubed">
            <summary>
            The MillimetresPerHourCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.MillimetresPerMinuteCubed">
            <summary>
            The MillimetresPerMinuteCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.MetresPerHourCubed">
            <summary>
            The MetresPerHourCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.MetresPerMinuteCubed">
            <summary>
            The MetresPerMinuteCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.CentimetresPerHourCubed">
            <summary>
            The CentimetresPerHourCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.CentimetresPerMinuteCubed">
            <summary>
            The CentimetresPerMinuteCubed unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.JerkUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.JerkUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.JerkUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.JerkUnit"/> struct.
            </summary>
            <param name="toMetresPerSecondCubed">The conversion to <see cref="F:Gu.Units.JerkUnit.MetresPerSecondCubed"/></param>
            <param name="fromMetresPerSecondCubed">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.JerkUnit.MetresPerSecondCubed"/></param>
        </member>
        <member name="P:Gu.Units.JerkUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.JerkUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.JerkUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.JerkUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.JerkUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.JerkUnit.op_Multiply(System.Double,Gu.Units.JerkUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Jerk"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.op_Equality(Gu.Units.JerkUnit,Gu.Units.JerkUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.JerkUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.JerkUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.JerkUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.JerkUnit.op_Inequality(Gu.Units.JerkUnit,Gu.Units.JerkUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.JerkUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.JerkUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.JerkUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.JerkUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.JerkUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.JerkUnit"/></returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.TryParse(System.String,Gu.Units.JerkUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.JerkUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.JerkUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.JerkUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.JerkUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to MetresPerSecondCubed.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from metresPerSecondCubed.
            </summary>
            <param name="metresPerSecondCubed">The value in MetresPerSecondCubed</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Jerk(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.GetScalarValue(Gu.Units.Jerk)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in MetresPerSecondCubed
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.JerkUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.Equals(Gu.Units.JerkUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.JerkUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.JerkUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same JerkUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.JerkUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.JerkUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.JerkUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.JerkUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.JerkUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.JerkUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.JerkUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.JerkUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.KinematicViscosity">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.KinematicViscosity"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.KinematicViscosity.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.KinematicViscosityUnit.SquareMetresPerSecond"/>
            </summary>
        </member>
        <member name="F:Gu.Units.KinematicViscosity.squareMetresPerSecond">
            <summary>
            The quantity in <see cref="F:Gu.Units.KinematicViscosityUnit.SquareMetresPerSecond"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.#ctor(System.Double,Gu.Units.KinematicViscosityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.KinematicViscosity"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.KinematicViscosityUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.KinematicViscosity.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.KinematicViscosityUnit.SquareMetresPerSecond"/>
            </summary>
        </member>
        <member name="P:Gu.Units.KinematicViscosity.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.KinematicViscosityUnit"/> for the <see cref="P:Gu.Units.KinematicViscosity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.KinematicViscosity.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.KinematicViscosity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.KinematicViscosity.SquareMetresPerSecond">
            <summary>
            Gets the quantity in squareMetresPerSecond".
            </summary>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(Gu.Units.KinematicViscosity,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(Gu.Units.KinematicViscosity,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.Power)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(Gu.Units.KinematicViscosity,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(Gu.Units.KinematicViscosity,Gu.Units.Stiffness)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.VolumetricFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.SpecificEnergy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.Flexibility)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(Gu.Units.KinematicViscosity,Gu.Units.MagneticFieldStrength)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(Gu.Units.KinematicViscosity,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(Gu.Units.KinematicViscosity,Gu.Units.AreaDensity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(Gu.Units.KinematicViscosity,Gu.Units.MassFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Equality(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.KinematicViscosity"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Inequality(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.KinematicViscosity"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_LessThan(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.KinematicViscosity"/> is less than another specified <see cref="T:Gu.Units.KinematicViscosity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_GreaterThan(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.KinematicViscosity"/> is greater than another specified <see cref="T:Gu.Units.KinematicViscosity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_LessThanOrEqual(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.KinematicViscosity"/> is less than or equal to another specified <see cref="T:Gu.Units.KinematicViscosity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_GreaterThanOrEqual(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.KinematicViscosity"/> is greater than or equal to another specified <see cref="T:Gu.Units.KinematicViscosity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(System.Double,Gu.Units.KinematicViscosity)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.KinematicViscosity"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.KinematicViscosity"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Multiply(Gu.Units.KinematicViscosity,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.KinematicViscosity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.KinematicViscosity"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Division(Gu.Units.KinematicViscosity,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.KinematicViscosity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.KinematicViscosity"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Addition(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.KinematicViscosity"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.KinematicViscosity"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosity"/>.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_Subtraction(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Subtracts an KinematicViscosity from another KinematicViscosity and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.KinematicViscosity"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosity"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosity"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_UnaryNegation(Gu.Units.KinematicViscosity)">
            <summary>
            Returns an <see cref="T:Gu.Units.KinematicViscosity"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.KinematicViscosity"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="kinematicViscosity">An instance of <see cref="T:Gu.Units.KinematicViscosity"/></param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.op_UnaryPlus(Gu.Units.KinematicViscosity)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.KinematicViscosity"/>.
            </summary>
            <returns>
            Returns <paramref name="kinematicViscosity"/>.
            </returns>
            <param name="kinematicViscosity">An instance of <see cref="T:Gu.Units.KinematicViscosity"/></param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.KinematicViscosity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.KinematicViscosity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.KinematicViscosity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.KinematicViscosity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.TryParse(System.String,Gu.Units.KinematicViscosity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.KinematicViscosity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.KinematicViscosity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.TryParse(System.String,System.IFormatProvider,Gu.Units.KinematicViscosity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.KinematicViscosity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.KinematicViscosity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.KinematicViscosity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.KinematicViscosity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.KinematicViscosity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.KinematicViscosity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.KinematicViscosity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.KinematicViscosity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.KinematicViscosity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.KinematicViscosity"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.KinematicViscosity"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.From(System.Double,Gu.Units.KinematicViscosityUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.KinematicViscosity"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.KinematicViscosity"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.FromSquareMetresPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.KinematicViscosity"/>.
            </summary>
            <param name="squareMetresPerSecond">The value in <see cref="F:Gu.Units.KinematicViscosityUnit.SquareMetresPerSecond"/></param>
            <returns>An instance of <see cref="T:Gu.Units.KinematicViscosity"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.GetValue(Gu.Units.KinematicViscosityUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.KinematicViscosity.SiValue"/> and <see cref="P:Gu.Units.KinematicViscosity.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.KinematicViscosity.SiValue"/> and <see cref="P:Gu.Units.KinematicViscosity.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m²/s\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m²/s\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m²/s</param>
            <returns>The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m²/s</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.KinematicViscosity"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(Gu.Units.KinematicViscosityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(Gu.Units.KinematicViscosityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(Gu.Units.KinematicViscosityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(Gu.Units.KinematicViscosityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(System.String,Gu.Units.KinematicViscosityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(System.String,Gu.Units.KinematicViscosityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(System.String,Gu.Units.KinematicViscosityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ToString(System.String,Gu.Units.KinematicViscosityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.CompareTo(Gu.Units.KinematicViscosity)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.KinematicViscosity"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.KinematicViscosity"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.KinematicViscosity"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.Equals(Gu.Units.KinematicViscosity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.KinematicViscosity"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same KinematicViscosity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.KinematicViscosity"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.Equals(Gu.Units.KinematicViscosity,Gu.Units.KinematicViscosity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.KinematicViscosity"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same KinematicViscosity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.KinematicViscosity"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.KinematicViscosity"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.KinematicViscosity"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.KinematicViscosity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.KinematicViscosityTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.KinematicViscosity'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.KinematicViscosityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.KinematicViscosityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.KinematicViscosityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.KinematicViscosityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.KinematicViscosityUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.KinematicViscosity"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.KinematicViscosityUnit.SquareMetresPerSecond">
            <summary>
            The SquareMetresPerSecond unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.KinematicViscosityUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.KinematicViscosityUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.KinematicViscosityUnit"/> struct.
            </summary>
            <param name="toSquareMetresPerSecond">The conversion to <see cref="F:Gu.Units.KinematicViscosityUnit.SquareMetresPerSecond"/></param>
            <param name="fromSquareMetresPerSecond">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.KinematicViscosityUnit.SquareMetresPerSecond"/></param>
        </member>
        <member name="P:Gu.Units.KinematicViscosityUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.KinematicViscosityUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.KinematicViscosityUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.KinematicViscosityUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.KinematicViscosityUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.op_Multiply(System.Double,Gu.Units.KinematicViscosityUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.op_Equality(Gu.Units.KinematicViscosityUnit,Gu.Units.KinematicViscosityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.KinematicViscosityUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.op_Inequality(Gu.Units.KinematicViscosityUnit,Gu.Units.KinematicViscosityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.KinematicViscosityUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.KinematicViscosityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.KinematicViscosityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.KinematicViscosityUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.KinematicViscosityUnit"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.TryParse(System.String,Gu.Units.KinematicViscosityUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.KinematicViscosityUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.KinematicViscosityUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.KinematicViscosityUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.KinematicViscosityUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to SquareMetresPerSecond.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from squareMetresPerSecond.
            </summary>
            <param name="squareMetresPerSecond">The value in SquareMetresPerSecond</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new KinematicViscosity(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.GetScalarValue(Gu.Units.KinematicViscosity)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in SquareMetresPerSecond
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.Equals(Gu.Units.KinematicViscosityUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.KinematicViscosityUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.KinematicViscosityUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same KinematicViscosityUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.KinematicViscosityUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.KinematicViscosityUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.KinematicViscosityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Length">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Length"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Length.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.LengthUnit.Metres"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Length.metres">
            <summary>
            The quantity in <see cref="F:Gu.Units.LengthUnit.Metres"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Length.#ctor(System.Double,Gu.Units.LengthUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Length"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.LengthUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Length.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.LengthUnit.Metres"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Length.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.LengthUnit"/> for the <see cref="P:Gu.Units.Length.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Length.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Metres">
            <summary>
            Gets the quantity in metres".
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Inches">
            <summary>
            Gets the quantity in Inches
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Miles">
            <summary>
            Gets the quantity in Miles
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Yards">
            <summary>
            Gets the quantity in Yards
            </summary>
        </member>
        <member name="P:Gu.Units.Length.NauticalMiles">
            <summary>
            Gets the quantity in NauticalMiles
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Feet">
            <summary>
            Gets the quantity in Feet
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Nanometres">
            <summary>
            Gets the quantity in Nanometres
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Micrometres">
            <summary>
            Gets the quantity in Micrometres
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Millimetres">
            <summary>
            Gets the quantity in Millimetres
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Centimetres">
            <summary>
            Gets the quantity in Centimetres
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Decimetres">
            <summary>
            Gets the quantity in Decimetres
            </summary>
        </member>
        <member name="P:Gu.Units.Length.Kilometres">
            <summary>
            Gets the quantity in Kilometres
            </summary>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.Unitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LengthPerUnitless"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Area)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Force)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.Force)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Pressure)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Density)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Acceleration)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Stiffness)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.Flexibility)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.LengthPerUnitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Unitless"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.AreaDensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificVolume"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.SpecificVolume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.MassFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.KinematicViscosity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,Gu.Units.Conductivity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(System.Double,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The Wavenumber that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Equality(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Length"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Length"/>.</param>
        </member>
        <member name="M:Gu.Units.Length.op_Inequality(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Length"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Length"/>.</param>
        </member>
        <member name="M:Gu.Units.Length.op_LessThan(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Length"/> is less than another specified <see cref="T:Gu.Units.Length"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Length"/>.</param>
        </member>
        <member name="M:Gu.Units.Length.op_GreaterThan(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Length"/> is greater than another specified <see cref="T:Gu.Units.Length"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Length"/>.</param>
        </member>
        <member name="M:Gu.Units.Length.op_LessThanOrEqual(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Length"/> is less than or equal to another specified <see cref="T:Gu.Units.Length"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Length"/>.</param>
        </member>
        <member name="M:Gu.Units.Length.op_GreaterThanOrEqual(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Length"/> is greater than or equal to another specified <see cref="T:Gu.Units.Length"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Length"/>.</param>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(System.Double,Gu.Units.Length)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Length"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Length"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Length"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Multiply(Gu.Units.Length,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Length"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Length"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Division(Gu.Units.Length,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Length"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Length"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Length.op_Addition(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Length"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Length"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Length"/>.</param>
        </member>
        <member name="M:Gu.Units.Length.op_Subtraction(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Subtracts an Length from another Length and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Length"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Length"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Length"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Length.op_UnaryNegation(Gu.Units.Length)">
            <summary>
            Returns an <see cref="T:Gu.Units.Length"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Length"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="length">An instance of <see cref="T:Gu.Units.Length"/></param>
        </member>
        <member name="M:Gu.Units.Length.op_UnaryPlus(Gu.Units.Length)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <returns>
            Returns <paramref name="length"/>.
            </returns>
            <param name="length">An instance of <see cref="T:Gu.Units.Length"/></param>
        </member>
        <member name="M:Gu.Units.Length.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Length"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Length"/></param>
            <returns>The <see cref="T:Gu.Units.Length"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Length.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Length"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Length"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Length"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Length.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Length"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Length"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Length"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Length.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Length"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Length"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Length"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Length.TryParse(System.String,Gu.Units.Length@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Length"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Length"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Length"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Length"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Length.TryParse(System.String,System.IFormatProvider,Gu.Units.Length@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Length"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Length"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Length"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Length"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Length.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Length@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Length"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Length"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Length"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Length"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Length.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Length@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Length"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Length"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Length"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Length"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Length.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Length"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.From(System.Double,Gu.Units.LengthUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromMetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="metres">The value in <see cref="F:Gu.Units.LengthUnit.Metres"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromInches(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="inches">The value in in.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromMiles(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="miles">The value in mi.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromYards(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="yards">The value in yd.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromNauticalMiles(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="nauticalMiles">The value in nmi.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromFeet(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="feet">The value in ft.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromNanometres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="nanometres">The value in nm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromMicrometres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="micrometres">The value in μm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromMillimetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="millimetres">The value in mm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromCentimetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="centimetres">The value in cm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromDecimetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="decimetres">The value in dm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.FromKilometres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Length"/>.
            </summary>
            <param name="kilometres">The value in km.</param>
            <returns>An instance of <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.GetValue(Gu.Units.LengthUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Length.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Length.SiValue"/> and <see cref="P:Gu.Units.Length.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Length.SiValue"/> and <see cref="P:Gu.Units.Length.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Length"/></returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(Gu.Units.LengthUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(Gu.Units.LengthUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(Gu.Units.LengthUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(Gu.Units.LengthUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(System.String,Gu.Units.LengthUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(System.String,Gu.Units.LengthUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(System.String,Gu.Units.LengthUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Length.ToString(System.String,Gu.Units.LengthUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Length.CompareTo(Gu.Units.Length)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Length"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Length"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Length"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Length.Equals(Gu.Units.Length)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Length"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Length as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Length"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Length.Equals(Gu.Units.Length,Gu.Units.Length)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Length"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Length as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Length"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Length.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Length"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Length"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Length.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Length.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Length.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Length.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.LengthPerUnitless">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthPerUnitless.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.LengthPerUnitlessUnit.MetresPerUnitless"/>
            </summary>
        </member>
        <member name="F:Gu.Units.LengthPerUnitless.metresPerUnitless">
            <summary>
            The quantity in <see cref="F:Gu.Units.LengthPerUnitlessUnit.MetresPerUnitless"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.#ctor(System.Double,Gu.Units.LengthPerUnitlessUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.LengthPerUnitless"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.LengthPerUnitlessUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.LengthPerUnitless.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.LengthPerUnitlessUnit.MetresPerUnitless"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LengthPerUnitless.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.LengthPerUnitlessUnit"/> for the <see cref="P:Gu.Units.LengthPerUnitless.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LengthPerUnitless.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.LengthPerUnitless.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LengthPerUnitless.MetresPerUnitless">
            <summary>
            Gets the quantity in metresPerUnitless".
            </summary>
        </member>
        <member name="P:Gu.Units.LengthPerUnitless.MillimetresPerPercent">
            <summary>
            Gets the quantity in MillimetresPerPercent
            </summary>
        </member>
        <member name="P:Gu.Units.LengthPerUnitless.MicrometresPerPercent">
            <summary>
            Gets the quantity in MicrometresPerPercent
            </summary>
        </member>
        <member name="P:Gu.Units.LengthPerUnitless.MetresPerPercent">
            <summary>
            Gets the quantity in MetresPerPercent
            </summary>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Multiply(Gu.Units.LengthPerUnitless,Gu.Units.Unitless)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Multiply(Gu.Units.LengthPerUnitless,Gu.Units.Stiffness)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ForcePerUnitless"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Division(Gu.Units.LengthPerUnitless,Gu.Units.Flexibility)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ForcePerUnitless"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Division(Gu.Units.LengthPerUnitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Division(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Equality(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LengthPerUnitless"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Inequality(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LengthPerUnitless"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_LessThan(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LengthPerUnitless"/> is less than another specified <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_GreaterThan(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LengthPerUnitless"/> is greater than another specified <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_LessThanOrEqual(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LengthPerUnitless"/> is less than or equal to another specified <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_GreaterThanOrEqual(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LengthPerUnitless"/> is greater than or equal to another specified <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Multiply(System.Double,Gu.Units.LengthPerUnitless)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.LengthPerUnitless"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Multiply(Gu.Units.LengthPerUnitless,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.LengthPerUnitless"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Division(Gu.Units.LengthPerUnitless,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Addition(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.LengthPerUnitless"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.LengthPerUnitless"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_Subtraction(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Subtracts an LengthPerUnitless from another LengthPerUnitless and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.LengthPerUnitless"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitless"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitless"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_UnaryNegation(Gu.Units.LengthPerUnitless)">
            <summary>
            Returns an <see cref="T:Gu.Units.LengthPerUnitless"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.LengthPerUnitless"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="lengthPerUnitless">An instance of <see cref="T:Gu.Units.LengthPerUnitless"/></param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.op_UnaryPlus(Gu.Units.LengthPerUnitless)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <returns>
            Returns <paramref name="lengthPerUnitless"/>.
            </returns>
            <param name="lengthPerUnitless">An instance of <see cref="T:Gu.Units.LengthPerUnitless"/></param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <returns>The <see cref="T:Gu.Units.LengthPerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.LengthPerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.LengthPerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.LengthPerUnitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.TryParse(System.String,Gu.Units.LengthPerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.TryParse(System.String,System.IFormatProvider,Gu.Units.LengthPerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.LengthPerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.LengthPerUnitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.LengthPerUnitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.LengthPerUnitless"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.From(System.Double,Gu.Units.LengthPerUnitlessUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.FromMetresPerUnitless(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <param name="metresPerUnitless">The value in <see cref="F:Gu.Units.LengthPerUnitlessUnit.MetresPerUnitless"/></param>
            <returns>An instance of <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.FromMillimetresPerPercent(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <param name="millimetresPerPercent">The value in mm/%.</param>
            <returns>An instance of <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.FromMicrometresPerPercent(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <param name="micrometresPerPercent">The value in μm/%.</param>
            <returns>An instance of <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.FromMetresPerPercent(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.LengthPerUnitless"/>.
            </summary>
            <param name="metresPerPercent">The value in m/%.</param>
            <returns>An instance of <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.GetValue(Gu.Units.LengthPerUnitlessUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.LengthPerUnitless.SiValue"/> and <see cref="P:Gu.Units.LengthPerUnitless.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.LengthPerUnitless.SiValue"/> and <see cref="P:Gu.Units.LengthPerUnitless.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/ul\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/ul\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m/ul</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m/ul</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LengthPerUnitless"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(Gu.Units.LengthPerUnitlessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(Gu.Units.LengthPerUnitlessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(Gu.Units.LengthPerUnitlessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(Gu.Units.LengthPerUnitlessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(System.String,Gu.Units.LengthPerUnitlessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(System.String,Gu.Units.LengthPerUnitlessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(System.String,Gu.Units.LengthPerUnitlessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ToString(System.String,Gu.Units.LengthPerUnitlessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.CompareTo(Gu.Units.LengthPerUnitless)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.LengthPerUnitless"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.LengthPerUnitless"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.LengthPerUnitless"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.Equals(Gu.Units.LengthPerUnitless)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LengthPerUnitless"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same LengthPerUnitless as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.LengthPerUnitless"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.Equals(Gu.Units.LengthPerUnitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LengthPerUnitless"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same LengthPerUnitless as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.LengthPerUnitless"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LengthPerUnitless"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.LengthPerUnitless"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitless.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.LengthPerUnitlessTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.LengthPerUnitless'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LengthPerUnitlessUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.LengthPerUnitless"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthPerUnitlessUnit.MetresPerUnitless">
            <summary>
            The MetresPerUnitless unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthPerUnitlessUnit.MillimetresPerPercent">
            <summary>
            The MillimetresPerPercent unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthPerUnitlessUnit.MicrometresPerPercent">
            <summary>
            The MicrometresPerPercent unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthPerUnitlessUnit.MetresPerPercent">
            <summary>
            The MetresPerPercent unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthPerUnitlessUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.LengthPerUnitlessUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.LengthPerUnitlessUnit"/> struct.
            </summary>
            <param name="toMetresPerUnitless">The conversion to <see cref="F:Gu.Units.LengthPerUnitlessUnit.MetresPerUnitless"/></param>
            <param name="fromMetresPerUnitless">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.LengthPerUnitlessUnit.MetresPerUnitless"/></param>
        </member>
        <member name="P:Gu.Units.LengthPerUnitlessUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.LengthPerUnitlessUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.LengthPerUnitlessUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.LengthPerUnitlessUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LengthPerUnitlessUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.op_Multiply(System.Double,Gu.Units.LengthPerUnitlessUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LengthPerUnitless"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.op_Equality(Gu.Units.LengthPerUnitlessUnit,Gu.Units.LengthPerUnitlessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LengthPerUnitlessUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitlessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitlessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.op_Inequality(Gu.Units.LengthPerUnitlessUnit,Gu.Units.LengthPerUnitlessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LengthPerUnitlessUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthPerUnitlessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthPerUnitlessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.LengthPerUnitlessUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.LengthPerUnitlessUnit"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.TryParse(System.String,Gu.Units.LengthPerUnitlessUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthPerUnitlessUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthPerUnitlessUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.LengthPerUnitlessUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LengthPerUnitlessUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to MetresPerUnitless.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from metresPerUnitless.
            </summary>
            <param name="metresPerUnitless">The value in MetresPerUnitless</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new LengthPerUnitless(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.GetScalarValue(Gu.Units.LengthPerUnitless)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in MetresPerUnitless
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.Equals(Gu.Units.LengthPerUnitlessUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LengthPerUnitlessUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.LengthPerUnitlessUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same LengthPerUnitlessUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LengthPerUnitlessUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.LengthPerUnitlessUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthPerUnitlessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LengthTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Length'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.LengthTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LengthUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Length"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Metres">
            <summary>
            The Metres unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Inches">
            <summary>
            The Inches unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Miles">
            <summary>
            The Miles unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Yards">
            <summary>
            The Yards unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.NauticalMiles">
            <summary>
            The NauticalMiles unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Feet">
            <summary>
            The Feet unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Nanometres">
            <summary>
            The Nanometres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Micrometres">
            <summary>
            The Micrometres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Millimetres">
            <summary>
            The Millimetres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Centimetres">
            <summary>
            The Centimetres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Decimetres">
            <summary>
            The Decimetres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.Kilometres">
            <summary>
            The Kilometres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LengthUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.LengthUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.LengthUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.LengthUnit"/> struct.
            </summary>
            <param name="toMetres">The conversion to <see cref="F:Gu.Units.LengthUnit.Metres"/></param>
            <param name="fromMetres">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.LengthUnit.Metres"/></param>
        </member>
        <member name="P:Gu.Units.LengthUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.LengthUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.LengthUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.LengthUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LengthUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthUnit.op_Multiply(System.Double,Gu.Units.LengthUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.op_Equality(Gu.Units.LengthUnit,Gu.Units.LengthUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LengthUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthUnit.op_Inequality(Gu.Units.LengthUnit,Gu.Units.LengthUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LengthUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LengthUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LengthUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.LengthUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.LengthUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.LengthUnit"/></returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.TryParse(System.String,Gu.Units.LengthUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LengthUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LengthUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.LengthUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LengthUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Metres.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from metres.
            </summary>
            <param name="metres">The value in Metres</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Length(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.GetScalarValue(Gu.Units.Length)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Metres
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.Equals(Gu.Units.LengthUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LengthUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.LengthUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same LengthUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.LengthUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LengthUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.LengthUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.LengthUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LengthUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LuminousFlux">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.LuminousFlux"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.LuminousFlux.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.LuminousFluxUnit.Lumens"/>
            </summary>
        </member>
        <member name="F:Gu.Units.LuminousFlux.lumens">
            <summary>
            The quantity in <see cref="F:Gu.Units.LuminousFluxUnit.Lumens"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.LuminousFlux.#ctor(System.Double,Gu.Units.LuminousFluxUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.LuminousFlux"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.LuminousFluxUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.LuminousFlux.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.LuminousFluxUnit.Lumens"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousFlux.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.LuminousFluxUnit"/> for the <see cref="P:Gu.Units.LuminousFlux.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousFlux.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.LuminousFlux.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousFlux.Lumens">
            <summary>
            Gets the quantity in lumens".
            </summary>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Division(Gu.Units.LuminousFlux,Gu.Units.LuminousIntensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SolidAngle"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Division(Gu.Units.LuminousFlux,Gu.Units.SolidAngle)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LuminousIntensity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Division(Gu.Units.LuminousFlux,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Illuminance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Division(Gu.Units.LuminousFlux,Gu.Units.Illuminance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Division(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Equality(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LuminousFlux"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Inequality(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LuminousFlux"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_LessThan(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LuminousFlux"/> is less than another specified <see cref="T:Gu.Units.LuminousFlux"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_GreaterThan(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LuminousFlux"/> is greater than another specified <see cref="T:Gu.Units.LuminousFlux"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_LessThanOrEqual(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LuminousFlux"/> is less than or equal to another specified <see cref="T:Gu.Units.LuminousFlux"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_GreaterThanOrEqual(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LuminousFlux"/> is greater than or equal to another specified <see cref="T:Gu.Units.LuminousFlux"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Multiply(System.Double,Gu.Units.LuminousFlux)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.LuminousFlux"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.LuminousFlux"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Multiply(Gu.Units.LuminousFlux,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.LuminousFlux"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.LuminousFlux"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Division(Gu.Units.LuminousFlux,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.LuminousFlux"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.LuminousFlux"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Addition(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.LuminousFlux"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.LuminousFlux"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_Subtraction(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Subtracts an LuminousFlux from another LuminousFlux and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.LuminousFlux"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFlux"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFlux"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_UnaryNegation(Gu.Units.LuminousFlux)">
            <summary>
            Returns an <see cref="T:Gu.Units.LuminousFlux"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.LuminousFlux"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="luminousFlux">An instance of <see cref="T:Gu.Units.LuminousFlux"/></param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.op_UnaryPlus(Gu.Units.LuminousFlux)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.LuminousFlux"/>.
            </summary>
            <returns>
            Returns <paramref name="luminousFlux"/>.
            </returns>
            <param name="luminousFlux">An instance of <see cref="T:Gu.Units.LuminousFlux"/></param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></param>
            <returns>The <see cref="T:Gu.Units.LuminousFlux"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.LuminousFlux"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.LuminousFlux"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.LuminousFlux"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.TryParse(System.String,Gu.Units.LuminousFlux@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousFlux"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousFlux"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.TryParse(System.String,System.IFormatProvider,Gu.Units.LuminousFlux@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousFlux"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousFlux"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.LuminousFlux@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousFlux"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousFlux"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.LuminousFlux@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousFlux"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousFlux"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.LuminousFlux"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.LuminousFlux"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.From(System.Double,Gu.Units.LuminousFluxUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.LuminousFlux"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.LuminousFlux"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.FromLumens(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.LuminousFlux"/>.
            </summary>
            <param name="lumens">The value in <see cref="F:Gu.Units.LuminousFluxUnit.Lumens"/></param>
            <returns>An instance of <see cref="T:Gu.Units.LuminousFlux"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.GetValue(Gu.Units.LuminousFluxUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.LuminousFlux.SiValue"/> and <see cref="P:Gu.Units.LuminousFlux.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.LuminousFlux.SiValue"/> and <see cref="P:Gu.Units.LuminousFlux.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 lm\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 lm\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex lm</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex lm</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousFlux"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(Gu.Units.LuminousFluxUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(Gu.Units.LuminousFluxUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(Gu.Units.LuminousFluxUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(Gu.Units.LuminousFluxUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(System.String,Gu.Units.LuminousFluxUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(System.String,Gu.Units.LuminousFluxUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(System.String,Gu.Units.LuminousFluxUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ToString(System.String,Gu.Units.LuminousFluxUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.CompareTo(Gu.Units.LuminousFlux)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.LuminousFlux"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.LuminousFlux"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.LuminousFlux"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.Equals(Gu.Units.LuminousFlux)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LuminousFlux"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same LuminousFlux as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.LuminousFlux"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.Equals(Gu.Units.LuminousFlux,Gu.Units.LuminousFlux)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LuminousFlux"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same LuminousFlux as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.LuminousFlux"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LuminousFlux"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.LuminousFlux"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.LuminousFlux.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.LuminousFlux.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.LuminousFluxTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.LuminousFlux'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.LuminousFluxTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousFluxTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousFluxTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousFluxTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LuminousFluxUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.LuminousFlux"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LuminousFluxUnit.Lumens">
            <summary>
            The Lumens unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LuminousFluxUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.LuminousFluxUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.LuminousFluxUnit"/> struct.
            </summary>
            <param name="toLumens">The conversion to <see cref="F:Gu.Units.LuminousFluxUnit.Lumens"/></param>
            <param name="fromLumens">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.LuminousFluxUnit.Lumens"/></param>
        </member>
        <member name="P:Gu.Units.LuminousFluxUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.LuminousFluxUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousFluxUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.LuminousFluxUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousFluxUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.op_Multiply(System.Double,Gu.Units.LuminousFluxUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LuminousFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.op_Equality(Gu.Units.LuminousFluxUnit,Gu.Units.LuminousFluxUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LuminousFluxUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFluxUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFluxUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.op_Inequality(Gu.Units.LuminousFluxUnit,Gu.Units.LuminousFluxUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LuminousFluxUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousFluxUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousFluxUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.LuminousFluxUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.LuminousFluxUnit"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.TryParse(System.String,Gu.Units.LuminousFluxUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousFluxUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousFluxUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousFluxUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousFluxUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Lumens.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from lumens.
            </summary>
            <param name="lumens">The value in Lumens</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new LuminousFlux(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.GetScalarValue(Gu.Units.LuminousFlux)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Lumens
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.Equals(Gu.Units.LuminousFluxUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LuminousFluxUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.LuminousFluxUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same LuminousFluxUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousFluxUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LuminousFluxUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.LuminousFluxUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.LuminousFluxUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousFluxUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousFluxUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousFluxUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LuminousIntensity">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.LuminousIntensity"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.LuminousIntensity.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.LuminousIntensityUnit.Candelas"/>
            </summary>
        </member>
        <member name="F:Gu.Units.LuminousIntensity.candelas">
            <summary>
            The quantity in <see cref="F:Gu.Units.LuminousIntensityUnit.Candelas"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.#ctor(System.Double,Gu.Units.LuminousIntensityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.LuminousIntensity"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.LuminousIntensityUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.LuminousIntensity.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.LuminousIntensityUnit.Candelas"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousIntensity.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.LuminousIntensityUnit"/> for the <see cref="P:Gu.Units.LuminousIntensity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousIntensity.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.LuminousIntensity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousIntensity.Candelas">
            <summary>
            Gets the quantity in candelas".
            </summary>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_Multiply(Gu.Units.LuminousIntensity,Gu.Units.SolidAngle)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LuminousFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_Division(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_Equality(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LuminousIntensity"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_Inequality(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LuminousIntensity"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_LessThan(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LuminousIntensity"/> is less than another specified <see cref="T:Gu.Units.LuminousIntensity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_GreaterThan(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LuminousIntensity"/> is greater than another specified <see cref="T:Gu.Units.LuminousIntensity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_LessThanOrEqual(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LuminousIntensity"/> is less than or equal to another specified <see cref="T:Gu.Units.LuminousIntensity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_GreaterThanOrEqual(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.LuminousIntensity"/> is greater than or equal to another specified <see cref="T:Gu.Units.LuminousIntensity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_Multiply(System.Double,Gu.Units.LuminousIntensity)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.LuminousIntensity"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.LuminousIntensity"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_Multiply(Gu.Units.LuminousIntensity,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.LuminousIntensity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.LuminousIntensity"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_Division(Gu.Units.LuminousIntensity,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.LuminousIntensity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.LuminousIntensity"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_Addition(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.LuminousIntensity"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.LuminousIntensity"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensity"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_Subtraction(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Subtracts an LuminousIntensity from another LuminousIntensity and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.LuminousIntensity"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensity"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensity"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_UnaryNegation(Gu.Units.LuminousIntensity)">
            <summary>
            Returns an <see cref="T:Gu.Units.LuminousIntensity"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.LuminousIntensity"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="luminousIntensity">An instance of <see cref="T:Gu.Units.LuminousIntensity"/></param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.op_UnaryPlus(Gu.Units.LuminousIntensity)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.LuminousIntensity"/>.
            </summary>
            <returns>
            Returns <paramref name="luminousIntensity"/>.
            </returns>
            <param name="luminousIntensity">An instance of <see cref="T:Gu.Units.LuminousIntensity"/></param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousIntensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <returns>The <see cref="T:Gu.Units.LuminousIntensity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousIntensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.LuminousIntensity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousIntensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.LuminousIntensity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousIntensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.LuminousIntensity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.TryParse(System.String,Gu.Units.LuminousIntensity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousIntensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousIntensity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.TryParse(System.String,System.IFormatProvider,Gu.Units.LuminousIntensity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousIntensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousIntensity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.LuminousIntensity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousIntensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousIntensity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.LuminousIntensity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousIntensity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousIntensity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousIntensity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.LuminousIntensity"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.LuminousIntensity"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.From(System.Double,Gu.Units.LuminousIntensityUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.LuminousIntensity"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.LuminousIntensity"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.FromCandelas(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.LuminousIntensity"/>.
            </summary>
            <param name="candelas">The value in <see cref="F:Gu.Units.LuminousIntensityUnit.Candelas"/></param>
            <returns>An instance of <see cref="T:Gu.Units.LuminousIntensity"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.GetValue(Gu.Units.LuminousIntensityUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.LuminousIntensity.SiValue"/> and <see cref="P:Gu.Units.LuminousIntensity.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.LuminousIntensity.SiValue"/> and <see cref="P:Gu.Units.LuminousIntensity.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 cd\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 cd\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex cd</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex cd</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.LuminousIntensity"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(Gu.Units.LuminousIntensityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(Gu.Units.LuminousIntensityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(Gu.Units.LuminousIntensityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(Gu.Units.LuminousIntensityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(System.String,Gu.Units.LuminousIntensityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(System.String,Gu.Units.LuminousIntensityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(System.String,Gu.Units.LuminousIntensityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ToString(System.String,Gu.Units.LuminousIntensityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.CompareTo(Gu.Units.LuminousIntensity)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.LuminousIntensity"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.LuminousIntensity"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.LuminousIntensity"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.Equals(Gu.Units.LuminousIntensity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LuminousIntensity"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same LuminousIntensity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.LuminousIntensity"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.Equals(Gu.Units.LuminousIntensity,Gu.Units.LuminousIntensity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LuminousIntensity"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same LuminousIntensity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.LuminousIntensity"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LuminousIntensity"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.LuminousIntensity"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.LuminousIntensity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.LuminousIntensityTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.LuminousIntensity'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.LuminousIntensityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousIntensityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousIntensityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousIntensityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LuminousIntensityUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.LuminousIntensity"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LuminousIntensityUnit.Candelas">
            <summary>
            The Candelas unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.LuminousIntensityUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.LuminousIntensityUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.LuminousIntensityUnit"/> struct.
            </summary>
            <param name="toCandelas">The conversion to <see cref="F:Gu.Units.LuminousIntensityUnit.Candelas"/></param>
            <param name="fromCandelas">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.LuminousIntensityUnit.Candelas"/></param>
        </member>
        <member name="P:Gu.Units.LuminousIntensityUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.LuminousIntensityUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousIntensityUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.LuminousIntensityUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.LuminousIntensityUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.op_Multiply(System.Double,Gu.Units.LuminousIntensityUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LuminousIntensity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.op_Equality(Gu.Units.LuminousIntensityUnit,Gu.Units.LuminousIntensityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LuminousIntensityUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.op_Inequality(Gu.Units.LuminousIntensityUnit,Gu.Units.LuminousIntensityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.LuminousIntensityUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.LuminousIntensityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.LuminousIntensityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.LuminousIntensityUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.LuminousIntensityUnit"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.TryParse(System.String,Gu.Units.LuminousIntensityUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.LuminousIntensityUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.LuminousIntensityUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.LuminousIntensityUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.LuminousIntensityUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Candelas.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from candelas.
            </summary>
            <param name="candelas">The value in Candelas</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new LuminousIntensity(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.GetScalarValue(Gu.Units.LuminousIntensity)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Candelas
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.Equals(Gu.Units.LuminousIntensityUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.LuminousIntensityUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.LuminousIntensityUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same LuminousIntensityUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.LuminousIntensityUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.LuminousIntensityUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.LuminousIntensityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MagneticFieldStrength">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.MagneticFieldStrength"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.MagneticFieldStrength.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.MagneticFieldStrengthUnit.Teslas"/>
            </summary>
        </member>
        <member name="F:Gu.Units.MagneticFieldStrength.teslas">
            <summary>
            The quantity in <see cref="F:Gu.Units.MagneticFieldStrengthUnit.Teslas"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.#ctor(System.Double,Gu.Units.MagneticFieldStrengthUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MagneticFieldStrength"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.MagneticFieldStrengthUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.MagneticFieldStrength.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.MagneticFieldStrengthUnit.Teslas"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFieldStrength.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/> for the <see cref="P:Gu.Units.MagneticFieldStrength.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFieldStrength.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.MagneticFieldStrength.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFieldStrength.Teslas">
            <summary>
            Gets the quantity in teslas".
            </summary>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Multiply(Gu.Units.MagneticFieldStrength,Gu.Units.Current)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Multiply(Gu.Units.MagneticFieldStrength,Gu.Units.Area)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Multiply(Gu.Units.MagneticFieldStrength,Gu.Units.ElectricCharge)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Multiply(Gu.Units.MagneticFieldStrength,Gu.Units.KinematicViscosity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Division(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Equality(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MagneticFieldStrength"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Inequality(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MagneticFieldStrength"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_LessThan(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MagneticFieldStrength"/> is less than another specified <see cref="T:Gu.Units.MagneticFieldStrength"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_GreaterThan(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MagneticFieldStrength"/> is greater than another specified <see cref="T:Gu.Units.MagneticFieldStrength"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_LessThanOrEqual(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MagneticFieldStrength"/> is less than or equal to another specified <see cref="T:Gu.Units.MagneticFieldStrength"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_GreaterThanOrEqual(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MagneticFieldStrength"/> is greater than or equal to another specified <see cref="T:Gu.Units.MagneticFieldStrength"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Multiply(System.Double,Gu.Units.MagneticFieldStrength)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.MagneticFieldStrength"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Multiply(Gu.Units.MagneticFieldStrength,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.MagneticFieldStrength"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Division(Gu.Units.MagneticFieldStrength,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Addition(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.MagneticFieldStrength"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MagneticFieldStrength"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_Subtraction(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Subtracts an MagneticFieldStrength from another MagneticFieldStrength and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MagneticFieldStrength"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_UnaryNegation(Gu.Units.MagneticFieldStrength)">
            <summary>
            Returns an <see cref="T:Gu.Units.MagneticFieldStrength"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MagneticFieldStrength"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="magneticFieldStrength">An instance of <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.op_UnaryPlus(Gu.Units.MagneticFieldStrength)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.
            </summary>
            <returns>
            Returns <paramref name="magneticFieldStrength"/>.
            </returns>
            <param name="magneticFieldStrength">An instance of <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <returns>The <see cref="T:Gu.Units.MagneticFieldStrength"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MagneticFieldStrength"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.MagneticFieldStrength"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MagneticFieldStrength"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.TryParse(System.String,Gu.Units.MagneticFieldStrength@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.TryParse(System.String,System.IFormatProvider,Gu.Units.MagneticFieldStrength@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.MagneticFieldStrength@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.MagneticFieldStrength@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFieldStrength"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.MagneticFieldStrength"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.From(System.Double,Gu.Units.MagneticFieldStrengthUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MagneticFieldStrength"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.FromTeslas(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MagneticFieldStrength"/>.
            </summary>
            <param name="teslas">The value in <see cref="F:Gu.Units.MagneticFieldStrengthUnit.Teslas"/></param>
            <returns>An instance of <see cref="T:Gu.Units.MagneticFieldStrength"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.GetValue(Gu.Units.MagneticFieldStrengthUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MagneticFieldStrength.SiValue"/> and <see cref="P:Gu.Units.MagneticFieldStrength.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MagneticFieldStrength.SiValue"/> and <see cref="P:Gu.Units.MagneticFieldStrength.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 T\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 T\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex T</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex T</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFieldStrength"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(Gu.Units.MagneticFieldStrengthUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(Gu.Units.MagneticFieldStrengthUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(Gu.Units.MagneticFieldStrengthUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(Gu.Units.MagneticFieldStrengthUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(System.String,Gu.Units.MagneticFieldStrengthUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(System.String,Gu.Units.MagneticFieldStrengthUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(System.String,Gu.Units.MagneticFieldStrengthUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ToString(System.String,Gu.Units.MagneticFieldStrengthUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.CompareTo(Gu.Units.MagneticFieldStrength)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.MagneticFieldStrength"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.MagneticFieldStrength"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.Equals(Gu.Units.MagneticFieldStrength)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MagneticFieldStrength"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MagneticFieldStrength as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.Equals(Gu.Units.MagneticFieldStrength,Gu.Units.MagneticFieldStrength)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MagneticFieldStrength"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MagneticFieldStrength as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MagneticFieldStrength"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MagneticFieldStrength"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.MagneticFieldStrength"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrength.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.MagneticFieldStrengthTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MagneticFieldStrength'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MagneticFieldStrengthUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.MagneticFieldStrength"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MagneticFieldStrengthUnit.Teslas">
            <summary>
            The Teslas unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MagneticFieldStrengthUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/> struct.
            </summary>
            <param name="toTeslas">The conversion to <see cref="F:Gu.Units.MagneticFieldStrengthUnit.Teslas"/></param>
            <param name="fromTeslas">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.MagneticFieldStrengthUnit.Teslas"/></param>
        </member>
        <member name="P:Gu.Units.MagneticFieldStrengthUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFieldStrengthUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFieldStrengthUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.op_Multiply(System.Double,Gu.Units.MagneticFieldStrengthUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFieldStrength"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.op_Equality(Gu.Units.MagneticFieldStrengthUnit,Gu.Units.MagneticFieldStrengthUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.op_Inequality(Gu.Units.MagneticFieldStrengthUnit,Gu.Units.MagneticFieldStrengthUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.TryParse(System.String,Gu.Units.MagneticFieldStrengthUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Teslas.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from teslas.
            </summary>
            <param name="teslas">The value in Teslas</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new MagneticFieldStrength(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.GetScalarValue(Gu.Units.MagneticFieldStrength)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Teslas
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.Equals(Gu.Units.MagneticFieldStrengthUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.MagneticFieldStrengthUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same MagneticFieldStrengthUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MagneticFieldStrengthUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MagneticFieldStrengthUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFieldStrengthUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MagneticFlux">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.MagneticFlux"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.MagneticFlux.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.MagneticFluxUnit.Webers"/>
            </summary>
        </member>
        <member name="F:Gu.Units.MagneticFlux.webers">
            <summary>
            The quantity in <see cref="F:Gu.Units.MagneticFluxUnit.Webers"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MagneticFlux.#ctor(System.Double,Gu.Units.MagneticFluxUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MagneticFlux"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.MagneticFluxUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.MagneticFlux.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.MagneticFluxUnit.Webers"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFlux.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.MagneticFluxUnit"/> for the <see cref="P:Gu.Units.MagneticFlux.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFlux.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.MagneticFlux.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFlux.Webers">
            <summary>
            Gets the quantity in webers".
            </summary>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Multiply(Gu.Units.MagneticFlux,Gu.Units.Current)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,Gu.Units.Current)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFieldStrength"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Multiply(Gu.Units.MagneticFlux,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,Gu.Units.Voltage)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,Gu.Units.Resistance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,Gu.Units.ElectricCharge)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,Gu.Units.Inductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Multiply(Gu.Units.MagneticFlux,Gu.Units.ElectricalConductance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,Gu.Units.MagneticFieldStrength)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Equality(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MagneticFlux"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Inequality(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MagneticFlux"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_LessThan(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MagneticFlux"/> is less than another specified <see cref="T:Gu.Units.MagneticFlux"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_GreaterThan(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MagneticFlux"/> is greater than another specified <see cref="T:Gu.Units.MagneticFlux"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_LessThanOrEqual(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MagneticFlux"/> is less than or equal to another specified <see cref="T:Gu.Units.MagneticFlux"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_GreaterThanOrEqual(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MagneticFlux"/> is greater than or equal to another specified <see cref="T:Gu.Units.MagneticFlux"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Multiply(System.Double,Gu.Units.MagneticFlux)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MagneticFlux"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.MagneticFlux"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Multiply(Gu.Units.MagneticFlux,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MagneticFlux"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.MagneticFlux"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Division(Gu.Units.MagneticFlux,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.MagneticFlux"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.MagneticFlux"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Addition(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.MagneticFlux"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MagneticFlux"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFlux"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_Subtraction(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Subtracts an MagneticFlux from another MagneticFlux and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MagneticFlux"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFlux"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFlux"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_UnaryNegation(Gu.Units.MagneticFlux)">
            <summary>
            Returns an <see cref="T:Gu.Units.MagneticFlux"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MagneticFlux"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="magneticFlux">An instance of <see cref="T:Gu.Units.MagneticFlux"/></param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.op_UnaryPlus(Gu.Units.MagneticFlux)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.MagneticFlux"/>.
            </summary>
            <returns>
            Returns <paramref name="magneticFlux"/>.
            </returns>
            <param name="magneticFlux">An instance of <see cref="T:Gu.Units.MagneticFlux"/></param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.TryParse(System.String,Gu.Units.MagneticFlux@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFlux"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFlux"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.TryParse(System.String,System.IFormatProvider,Gu.Units.MagneticFlux@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFlux"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFlux"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.MagneticFlux@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFlux"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFlux"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.MagneticFlux@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFlux"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFlux"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFlux"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.MagneticFlux"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.MagneticFlux"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.From(System.Double,Gu.Units.MagneticFluxUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MagneticFlux"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MagneticFlux"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.FromWebers(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MagneticFlux"/>.
            </summary>
            <param name="webers">The value in <see cref="F:Gu.Units.MagneticFluxUnit.Webers"/></param>
            <returns>An instance of <see cref="T:Gu.Units.MagneticFlux"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.GetValue(Gu.Units.MagneticFluxUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MagneticFlux.SiValue"/> and <see cref="P:Gu.Units.MagneticFlux.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MagneticFlux.SiValue"/> and <see cref="P:Gu.Units.MagneticFlux.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 Wb\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 Wb\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex Wb</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex Wb</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MagneticFlux"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(Gu.Units.MagneticFluxUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(Gu.Units.MagneticFluxUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(Gu.Units.MagneticFluxUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(Gu.Units.MagneticFluxUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(System.String,Gu.Units.MagneticFluxUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(System.String,Gu.Units.MagneticFluxUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(System.String,Gu.Units.MagneticFluxUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ToString(System.String,Gu.Units.MagneticFluxUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.CompareTo(Gu.Units.MagneticFlux)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.MagneticFlux"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.MagneticFlux"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.MagneticFlux"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.Equals(Gu.Units.MagneticFlux)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MagneticFlux"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MagneticFlux as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MagneticFlux"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.Equals(Gu.Units.MagneticFlux,Gu.Units.MagneticFlux)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MagneticFlux"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MagneticFlux as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MagneticFlux"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MagneticFlux"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.MagneticFlux"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.MagneticFlux.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.MagneticFlux.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.MagneticFluxTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MagneticFlux'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MagneticFluxTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFluxTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFluxTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFluxTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MagneticFluxUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.MagneticFlux"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MagneticFluxUnit.Webers">
            <summary>
            The Webers unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MagneticFluxUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MagneticFluxUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MagneticFluxUnit"/> struct.
            </summary>
            <param name="toWebers">The conversion to <see cref="F:Gu.Units.MagneticFluxUnit.Webers"/></param>
            <param name="fromWebers">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.MagneticFluxUnit.Webers"/></param>
        </member>
        <member name="P:Gu.Units.MagneticFluxUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MagneticFluxUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFluxUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.MagneticFluxUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MagneticFluxUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.op_Multiply(System.Double,Gu.Units.MagneticFluxUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.op_Equality(Gu.Units.MagneticFluxUnit,Gu.Units.MagneticFluxUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MagneticFluxUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFluxUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFluxUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.op_Inequality(Gu.Units.MagneticFluxUnit,Gu.Units.MagneticFluxUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MagneticFluxUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MagneticFluxUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MagneticFluxUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.MagneticFluxUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MagneticFluxUnit"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.TryParse(System.String,Gu.Units.MagneticFluxUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MagneticFluxUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MagneticFluxUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MagneticFluxUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MagneticFluxUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Webers.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from webers.
            </summary>
            <param name="webers">The value in Webers</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new MagneticFlux(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.GetScalarValue(Gu.Units.MagneticFlux)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Webers
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.Equals(Gu.Units.MagneticFluxUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MagneticFluxUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.MagneticFluxUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same MagneticFluxUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFluxUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MagneticFluxUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MagneticFluxUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MagneticFluxUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFluxUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFluxUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MagneticFluxUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Mass">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Mass"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Mass.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.MassUnit.Kilograms"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Mass.kilograms">
            <summary>
            The quantity in <see cref="F:Gu.Units.MassUnit.Kilograms"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Mass.#ctor(System.Double,Gu.Units.MassUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Mass"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.MassUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Mass.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.MassUnit.Kilograms"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.MassUnit"/> for the <see cref="P:Gu.Units.Mass.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Mass.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.Kilograms">
            <summary>
            Gets the quantity in kilograms".
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.Grams">
            <summary>
            Gets the quantity in Grams
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.Milligrams">
            <summary>
            Gets the quantity in Milligrams
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.Micrograms">
            <summary>
            Gets the quantity in Micrograms
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.AvoirdupoisPounds">
            <summary>
            Gets the quantity in AvoirdupoisPounds
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.AvoirdupoisOunces">
            <summary>
            Gets the quantity in AvoirdupoisOunces
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.TroyOunces">
            <summary>
            Gets the quantity in TroyOunces
            </summary>
        </member>
        <member name="P:Gu.Units.Mass.TroyGrains">
            <summary>
            Gets the quantity in TroyGrains
            </summary>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,Gu.Units.AmountOfSubstance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MolarMass"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,Gu.Units.Volume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Density"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,Gu.Units.Density)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Multiply(Gu.Units.Mass,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Multiply(Gu.Units.Mass,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Multiply(Gu.Units.Mass,Gu.Units.Acceleration)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Multiply(Gu.Units.Mass,Gu.Units.SpecificEnergy)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,Gu.Units.AreaDensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Multiply(Gu.Units.Mass,Gu.Units.SpecificVolume)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,Gu.Units.MassFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,Gu.Units.MolarMass)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AmountOfSubstance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Equality(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Mass"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Mass"/>.</param>
        </member>
        <member name="M:Gu.Units.Mass.op_Inequality(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Mass"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Mass"/>.</param>
        </member>
        <member name="M:Gu.Units.Mass.op_LessThan(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Mass"/> is less than another specified <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Mass"/>.</param>
        </member>
        <member name="M:Gu.Units.Mass.op_GreaterThan(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Mass"/> is greater than another specified <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Mass"/>.</param>
        </member>
        <member name="M:Gu.Units.Mass.op_LessThanOrEqual(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Mass"/> is less than or equal to another specified <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Mass"/>.</param>
        </member>
        <member name="M:Gu.Units.Mass.op_GreaterThanOrEqual(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Mass"/> is greater than or equal to another specified <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Mass"/>.</param>
        </member>
        <member name="M:Gu.Units.Mass.op_Multiply(System.Double,Gu.Units.Mass)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Mass"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Mass"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Mass"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Multiply(Gu.Units.Mass,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Mass"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Mass"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Division(Gu.Units.Mass,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Mass"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Mass"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Mass.op_Addition(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Mass"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Mass"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Mass"/>.</param>
        </member>
        <member name="M:Gu.Units.Mass.op_Subtraction(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Subtracts an Mass from another Mass and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Mass"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Mass"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Mass"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Mass.op_UnaryNegation(Gu.Units.Mass)">
            <summary>
            Returns an <see cref="T:Gu.Units.Mass"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Mass"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="mass">An instance of <see cref="T:Gu.Units.Mass"/></param>
        </member>
        <member name="M:Gu.Units.Mass.op_UnaryPlus(Gu.Units.Mass)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <returns>
            Returns <paramref name="mass"/>.
            </returns>
            <param name="mass">An instance of <see cref="T:Gu.Units.Mass"/></param>
        </member>
        <member name="M:Gu.Units.Mass.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Mass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Mass"/></param>
            <returns>The <see cref="T:Gu.Units.Mass"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Mass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Mass"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Mass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Mass"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Mass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Mass"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.TryParse(System.String,Gu.Units.Mass@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Mass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Mass"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Mass"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Mass"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.TryParse(System.String,System.IFormatProvider,Gu.Units.Mass@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Mass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Mass"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Mass"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Mass"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Mass@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Mass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Mass"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Mass"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Mass"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Mass@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Mass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Mass"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Mass"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Mass"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Mass"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.From(System.Double,Gu.Units.MassUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.FromKilograms(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <param name="kilograms">The value in <see cref="F:Gu.Units.MassUnit.Kilograms"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.FromGrams(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <param name="grams">The value in g.</param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.FromMilligrams(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <param name="milligrams">The value in mg.</param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.FromMicrograms(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <param name="micrograms">The value in μg.</param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.FromAvoirdupoisPounds(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <param name="avoirdupoisPounds">The value in lb.</param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.FromAvoirdupoisOunces(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <param name="avoirdupoisOunces">The value in oz.</param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.FromTroyOunces(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <param name="troyOunces">The value in troy.</param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.FromTroyGrains(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Mass"/>.
            </summary>
            <param name="troyGrains">The value in gr.</param>
            <returns>An instance of <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.GetValue(Gu.Units.MassUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Mass.SiValue"/> and <see cref="P:Gu.Units.Mass.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Mass.SiValue"/> and <see cref="P:Gu.Units.Mass.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex kg</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex kg</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Mass"/></returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(Gu.Units.MassUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(Gu.Units.MassUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(Gu.Units.MassUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(Gu.Units.MassUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(System.String,Gu.Units.MassUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(System.String,Gu.Units.MassUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(System.String,Gu.Units.MassUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Mass.ToString(System.String,Gu.Units.MassUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Mass.CompareTo(Gu.Units.Mass)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Mass"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Mass"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Mass"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Mass.Equals(Gu.Units.Mass)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Mass"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Mass as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Mass"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Mass.Equals(Gu.Units.Mass,Gu.Units.Mass)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Mass"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Mass as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Mass"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Mass.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Mass"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Mass"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Mass.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Mass.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Mass.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Mass.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.MassFlow">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.MassFlow"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.MassFlow.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.MassFlowUnit.KilogramsPerSecond"/>
            </summary>
        </member>
        <member name="F:Gu.Units.MassFlow.kilogramsPerSecond">
            <summary>
            The quantity in <see cref="F:Gu.Units.MassFlowUnit.KilogramsPerSecond"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MassFlow.#ctor(System.Double,Gu.Units.MassFlowUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MassFlow"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.MassFlowUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.MassFlow.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.MassFlowUnit.KilogramsPerSecond"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MassFlow.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.MassFlowUnit"/> for the <see cref="P:Gu.Units.MassFlow.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MassFlow.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.MassFlow.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MassFlow.KilogramsPerSecond">
            <summary>
            Gets the quantity in kilogramsPerSecond".
            </summary>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.Mass)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(Gu.Units.MassFlow,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(Gu.Units.MassFlow,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.Density)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(Gu.Units.MassFlow,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(Gu.Units.MassFlow,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.Stiffness)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Density"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(Gu.Units.MassFlow,Gu.Units.SpecificEnergy)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.ElectricCharge)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFieldStrength"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(Gu.Units.MassFlow,Gu.Units.Flexibility)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.MagneticFieldStrength)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.CatalyticActivity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MolarMass"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.Momentum)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.AreaDensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(Gu.Units.MassFlow,Gu.Units.SpecificVolume)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(Gu.Units.MassFlow,Gu.Units.KinematicViscosity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.KinematicViscosity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.MolarMass)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.CatalyticActivity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Equality(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MassFlow"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Inequality(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MassFlow"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.op_LessThan(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MassFlow"/> is less than another specified <see cref="T:Gu.Units.MassFlow"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.op_GreaterThan(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MassFlow"/> is greater than another specified <see cref="T:Gu.Units.MassFlow"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.op_LessThanOrEqual(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MassFlow"/> is less than or equal to another specified <see cref="T:Gu.Units.MassFlow"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.op_GreaterThanOrEqual(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MassFlow"/> is greater than or equal to another specified <see cref="T:Gu.Units.MassFlow"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(System.Double,Gu.Units.MassFlow)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MassFlow"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.MassFlow"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Multiply(Gu.Units.MassFlow,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MassFlow"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.MassFlow"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Division(Gu.Units.MassFlow,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.MassFlow"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.MassFlow"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Addition(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.MassFlow"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MassFlow"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.op_Subtraction(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Subtracts an MassFlow from another MassFlow and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MassFlow"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlow"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlow"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.MassFlow.op_UnaryNegation(Gu.Units.MassFlow)">
            <summary>
            Returns an <see cref="T:Gu.Units.MassFlow"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MassFlow"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="massFlow">An instance of <see cref="T:Gu.Units.MassFlow"/></param>
        </member>
        <member name="M:Gu.Units.MassFlow.op_UnaryPlus(Gu.Units.MassFlow)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.MassFlow"/>.
            </summary>
            <returns>
            Returns <paramref name="massFlow"/>.
            </returns>
            <param name="massFlow">An instance of <see cref="T:Gu.Units.MassFlow"/></param>
        </member>
        <member name="M:Gu.Units.MassFlow.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassFlow"/></param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.TryParse(System.String,Gu.Units.MassFlow@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MassFlow"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MassFlow"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.TryParse(System.String,System.IFormatProvider,Gu.Units.MassFlow@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MassFlow"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MassFlow"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.MassFlow@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MassFlow"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MassFlow"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.MassFlow@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassFlow"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MassFlow"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MassFlow"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.MassFlow"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.MassFlow"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.From(System.Double,Gu.Units.MassFlowUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MassFlow"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MassFlow"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.FromKilogramsPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MassFlow"/>.
            </summary>
            <param name="kilogramsPerSecond">The value in <see cref="F:Gu.Units.MassFlowUnit.KilogramsPerSecond"/></param>
            <returns>An instance of <see cref="T:Gu.Units.MassFlow"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.GetValue(Gu.Units.MassFlowUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MassFlow.SiValue"/> and <see cref="P:Gu.Units.MassFlow.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.MassFlow"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MassFlow.SiValue"/> and <see cref="P:Gu.Units.MassFlow.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MassFlow"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg/s\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MassFlow"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg/s\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MassFlow"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex kg/s</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MassFlow"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex kg/s</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MassFlow"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(Gu.Units.MassFlowUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(Gu.Units.MassFlowUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(Gu.Units.MassFlowUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(Gu.Units.MassFlowUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(System.String,Gu.Units.MassFlowUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(System.String,Gu.Units.MassFlowUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(System.String,Gu.Units.MassFlowUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ToString(System.String,Gu.Units.MassFlowUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.CompareTo(Gu.Units.MassFlow)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.MassFlow"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.MassFlow"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.MassFlow"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.Equals(Gu.Units.MassFlow)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MassFlow"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MassFlow as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MassFlow"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.Equals(Gu.Units.MassFlow,Gu.Units.MassFlow)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MassFlow"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MassFlow as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MassFlow"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.MassFlow.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MassFlow"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.MassFlow"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MassFlow.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.MassFlow.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.MassFlow.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.MassFlow.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.MassFlowTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MassFlow'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MassFlowTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassFlowTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassFlowTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassFlowTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MassFlowUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.MassFlow"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassFlowUnit.KilogramsPerSecond">
            <summary>
            The KilogramsPerSecond unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassFlowUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MassFlowUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MassFlowUnit"/> struct.
            </summary>
            <param name="toKilogramsPerSecond">The conversion to <see cref="F:Gu.Units.MassFlowUnit.KilogramsPerSecond"/></param>
            <param name="fromKilogramsPerSecond">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.MassFlowUnit.KilogramsPerSecond"/></param>
        </member>
        <member name="P:Gu.Units.MassFlowUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MassFlowUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.MassFlowUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.MassFlowUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MassFlowUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassFlowUnit.op_Multiply(System.Double,Gu.Units.MassFlowUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.op_Equality(Gu.Units.MassFlowUnit,Gu.Units.MassFlowUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MassFlowUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlowUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlowUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.op_Inequality(Gu.Units.MassFlowUnit,Gu.Units.MassFlowUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MassFlowUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassFlowUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassFlowUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.MassFlowUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MassFlowUnit"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.TryParse(System.String,Gu.Units.MassFlowUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassFlowUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassFlowUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MassFlowUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MassFlowUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to KilogramsPerSecond.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from kilogramsPerSecond.
            </summary>
            <param name="kilogramsPerSecond">The value in KilogramsPerSecond</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new MassFlow(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.GetScalarValue(Gu.Units.MassFlow)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in KilogramsPerSecond
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassFlowUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.Equals(Gu.Units.MassFlowUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MassFlowUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.MassFlowUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same MassFlowUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MassFlowUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassFlowUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MassFlowUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MassFlowUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MassFlowUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassFlowUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassFlowUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassFlowUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MassTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Mass'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MassTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MassUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Mass"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassUnit.Kilograms">
            <summary>
            The Kilograms unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassUnit.Grams">
            <summary>
            The Grams unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassUnit.Milligrams">
            <summary>
            The Milligrams unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassUnit.Micrograms">
            <summary>
            The Micrograms unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassUnit.AvoirdupoisPounds">
            <summary>
            The AvoirdupoisPounds unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassUnit.AvoirdupoisOunces">
            <summary>
            The AvoirdupoisOunces unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassUnit.TroyOunces">
            <summary>
            The TroyOunces unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassUnit.TroyGrains">
            <summary>
            The TroyGrains unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MassUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MassUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MassUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MassUnit"/> struct.
            </summary>
            <param name="toKilograms">The conversion to <see cref="F:Gu.Units.MassUnit.Kilograms"/></param>
            <param name="fromKilograms">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.MassUnit.Kilograms"/></param>
        </member>
        <member name="P:Gu.Units.MassUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MassUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.MassUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.MassUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MassUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassUnit.op_Multiply(System.Double,Gu.Units.MassUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MassUnit.op_Equality(Gu.Units.MassUnit,Gu.Units.MassUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MassUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MassUnit.op_Inequality(Gu.Units.MassUnit,Gu.Units.MassUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MassUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MassUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MassUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MassUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.MassUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MassUnit"/></returns>
        </member>
        <member name="M:Gu.Units.MassUnit.TryParse(System.String,Gu.Units.MassUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MassUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MassUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MassUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MassUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MassUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Kilograms.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MassUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from kilograms.
            </summary>
            <param name="kilograms">The value in Kilograms</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MassUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Mass(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.MassUnit.GetScalarValue(Gu.Units.Mass)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Kilograms
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.MassUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MassUnit.Equals(Gu.Units.MassUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MassUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.MassUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same MassUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MassUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MassUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MassUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MassUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MassUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MolarHeatCapacity">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.MolarHeatCapacity"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.MolarHeatCapacity.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.MolarHeatCapacityUnit.JoulesPerKelvinMole"/>
            </summary>
        </member>
        <member name="F:Gu.Units.MolarHeatCapacity.joulesPerKelvinMole">
            <summary>
            The quantity in <see cref="F:Gu.Units.MolarHeatCapacityUnit.JoulesPerKelvinMole"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.#ctor(System.Double,Gu.Units.MolarHeatCapacityUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MolarHeatCapacity"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.MolarHeatCapacityUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.MolarHeatCapacity.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.MolarHeatCapacityUnit.JoulesPerKelvinMole"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MolarHeatCapacity.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.MolarHeatCapacityUnit"/> for the <see cref="P:Gu.Units.MolarHeatCapacity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MolarHeatCapacity.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.MolarHeatCapacity.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MolarHeatCapacity.JoulesPerKelvinMole">
            <summary>
            Gets the quantity in joulesPerKelvinMole".
            </summary>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_Division(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_Equality(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MolarHeatCapacity"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_Inequality(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MolarHeatCapacity"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_LessThan(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MolarHeatCapacity"/> is less than another specified <see cref="T:Gu.Units.MolarHeatCapacity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_GreaterThan(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MolarHeatCapacity"/> is greater than another specified <see cref="T:Gu.Units.MolarHeatCapacity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_LessThanOrEqual(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MolarHeatCapacity"/> is less than or equal to another specified <see cref="T:Gu.Units.MolarHeatCapacity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_GreaterThanOrEqual(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MolarHeatCapacity"/> is greater than or equal to another specified <see cref="T:Gu.Units.MolarHeatCapacity"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_Multiply(System.Double,Gu.Units.MolarHeatCapacity)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.MolarHeatCapacity"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_Multiply(Gu.Units.MolarHeatCapacity,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.MolarHeatCapacity"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_Division(Gu.Units.MolarHeatCapacity,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_Addition(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.MolarHeatCapacity"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MolarHeatCapacity"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_Subtraction(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Subtracts an MolarHeatCapacity from another MolarHeatCapacity and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MolarHeatCapacity"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_UnaryNegation(Gu.Units.MolarHeatCapacity)">
            <summary>
            Returns an <see cref="T:Gu.Units.MolarHeatCapacity"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MolarHeatCapacity"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="molarHeatCapacity">An instance of <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.op_UnaryPlus(Gu.Units.MolarHeatCapacity)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.
            </summary>
            <returns>
            Returns <paramref name="molarHeatCapacity"/>.
            </returns>
            <param name="molarHeatCapacity">An instance of <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <returns>The <see cref="T:Gu.Units.MolarHeatCapacity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MolarHeatCapacity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.MolarHeatCapacity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MolarHeatCapacity"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.TryParse(System.String,Gu.Units.MolarHeatCapacity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.TryParse(System.String,System.IFormatProvider,Gu.Units.MolarHeatCapacity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.MolarHeatCapacity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.MolarHeatCapacity@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarHeatCapacity"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.MolarHeatCapacity"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.From(System.Double,Gu.Units.MolarHeatCapacityUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MolarHeatCapacity"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.FromJoulesPerKelvinMole(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MolarHeatCapacity"/>.
            </summary>
            <param name="joulesPerKelvinMole">The value in <see cref="F:Gu.Units.MolarHeatCapacityUnit.JoulesPerKelvinMole"/></param>
            <returns>An instance of <see cref="T:Gu.Units.MolarHeatCapacity"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.GetValue(Gu.Units.MolarHeatCapacityUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MolarHeatCapacity.SiValue"/> and <see cref="P:Gu.Units.MolarHeatCapacity.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MolarHeatCapacity.SiValue"/> and <see cref="P:Gu.Units.MolarHeatCapacity.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 J/K⋅mol\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 J/K⋅mol\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex J/K⋅mol</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex J/K⋅mol</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarHeatCapacity"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(Gu.Units.MolarHeatCapacityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(Gu.Units.MolarHeatCapacityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(Gu.Units.MolarHeatCapacityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(Gu.Units.MolarHeatCapacityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(System.String,Gu.Units.MolarHeatCapacityUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(System.String,Gu.Units.MolarHeatCapacityUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(System.String,Gu.Units.MolarHeatCapacityUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ToString(System.String,Gu.Units.MolarHeatCapacityUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.CompareTo(Gu.Units.MolarHeatCapacity)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.MolarHeatCapacity"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.MolarHeatCapacity"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.Equals(Gu.Units.MolarHeatCapacity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MolarHeatCapacity"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MolarHeatCapacity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.Equals(Gu.Units.MolarHeatCapacity,Gu.Units.MolarHeatCapacity)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MolarHeatCapacity"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MolarHeatCapacity as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MolarHeatCapacity"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MolarHeatCapacity"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.MolarHeatCapacity"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacity.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.MolarHeatCapacityTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MolarHeatCapacity'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MolarHeatCapacityUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.MolarHeatCapacity"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MolarHeatCapacityUnit.JoulesPerKelvinMole">
            <summary>
            The JoulesPerKelvinMole unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MolarHeatCapacityUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MolarHeatCapacityUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MolarHeatCapacityUnit"/> struct.
            </summary>
            <param name="toJoulesPerKelvinMole">The conversion to <see cref="F:Gu.Units.MolarHeatCapacityUnit.JoulesPerKelvinMole"/></param>
            <param name="fromJoulesPerKelvinMole">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.MolarHeatCapacityUnit.JoulesPerKelvinMole"/></param>
        </member>
        <member name="P:Gu.Units.MolarHeatCapacityUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MolarHeatCapacityUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.MolarHeatCapacityUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.MolarHeatCapacityUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MolarHeatCapacityUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.op_Multiply(System.Double,Gu.Units.MolarHeatCapacityUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MolarHeatCapacity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.op_Equality(Gu.Units.MolarHeatCapacityUnit,Gu.Units.MolarHeatCapacityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MolarHeatCapacityUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.op_Inequality(Gu.Units.MolarHeatCapacityUnit,Gu.Units.MolarHeatCapacityUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MolarHeatCapacityUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarHeatCapacityUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarHeatCapacityUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.MolarHeatCapacityUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MolarHeatCapacityUnit"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.TryParse(System.String,Gu.Units.MolarHeatCapacityUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarHeatCapacityUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarHeatCapacityUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarHeatCapacityUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarHeatCapacityUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to JoulesPerKelvinMole.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from joulesPerKelvinMole.
            </summary>
            <param name="joulesPerKelvinMole">The value in JoulesPerKelvinMole</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new MolarHeatCapacity(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.GetScalarValue(Gu.Units.MolarHeatCapacity)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in JoulesPerKelvinMole
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.Equals(Gu.Units.MolarHeatCapacityUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MolarHeatCapacityUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.MolarHeatCapacityUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same MolarHeatCapacityUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MolarHeatCapacityUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MolarHeatCapacityUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarHeatCapacityUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MolarMass">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.MolarMass"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.MolarMass.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.MolarMassUnit.KilogramsPerMole"/>
            </summary>
        </member>
        <member name="F:Gu.Units.MolarMass.kilogramsPerMole">
            <summary>
            The quantity in <see cref="F:Gu.Units.MolarMassUnit.KilogramsPerMole"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MolarMass.#ctor(System.Double,Gu.Units.MolarMassUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MolarMass"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.MolarMassUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.MolarMass.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.MolarMassUnit.KilogramsPerMole"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MolarMass.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.MolarMassUnit"/> for the <see cref="P:Gu.Units.MolarMass.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MolarMass.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.MolarMass.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MolarMass.KilogramsPerMole">
            <summary>
            Gets the quantity in kilogramsPerMole".
            </summary>
        </member>
        <member name="P:Gu.Units.MolarMass.GramsPerMole">
            <summary>
            Gets the quantity in GramsPerMole
            </summary>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Multiply(Gu.Units.MolarMass,Gu.Units.AmountOfSubstance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Multiply(Gu.Units.MolarMass,Gu.Units.CatalyticActivity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Division(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Equality(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MolarMass"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Inequality(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MolarMass"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.op_LessThan(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MolarMass"/> is less than another specified <see cref="T:Gu.Units.MolarMass"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.op_GreaterThan(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MolarMass"/> is greater than another specified <see cref="T:Gu.Units.MolarMass"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.op_LessThanOrEqual(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MolarMass"/> is less than or equal to another specified <see cref="T:Gu.Units.MolarMass"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.op_GreaterThanOrEqual(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.MolarMass"/> is greater than or equal to another specified <see cref="T:Gu.Units.MolarMass"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Multiply(System.Double,Gu.Units.MolarMass)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MolarMass"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.MolarMass"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Multiply(Gu.Units.MolarMass,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.MolarMass"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.MolarMass"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Division(Gu.Units.MolarMass,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.MolarMass"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.MolarMass"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Addition(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.MolarMass"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MolarMass"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMass"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.op_Subtraction(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Subtracts an MolarMass from another MolarMass and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MolarMass"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMass"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMass"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.MolarMass.op_UnaryNegation(Gu.Units.MolarMass)">
            <summary>
            Returns an <see cref="T:Gu.Units.MolarMass"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.MolarMass"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="molarMass">An instance of <see cref="T:Gu.Units.MolarMass"/></param>
        </member>
        <member name="M:Gu.Units.MolarMass.op_UnaryPlus(Gu.Units.MolarMass)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.MolarMass"/>.
            </summary>
            <returns>
            Returns <paramref name="molarMass"/>.
            </returns>
            <param name="molarMass">An instance of <see cref="T:Gu.Units.MolarMass"/></param>
        </member>
        <member name="M:Gu.Units.MolarMass.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarMass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarMass"/></param>
            <returns>The <see cref="T:Gu.Units.MolarMass"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarMass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MolarMass"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarMass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.MolarMass"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarMass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.MolarMass"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.TryParse(System.String,Gu.Units.MolarMass@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarMass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarMass"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarMass"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.TryParse(System.String,System.IFormatProvider,Gu.Units.MolarMass@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarMass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarMass"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarMass"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.MolarMass@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarMass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarMass"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarMass"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.MolarMass@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarMass"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarMass"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarMass"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarMass"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.MolarMass"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.From(System.Double,Gu.Units.MolarMassUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MolarMass"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.FromKilogramsPerMole(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MolarMass"/>.
            </summary>
            <param name="kilogramsPerMole">The value in <see cref="F:Gu.Units.MolarMassUnit.KilogramsPerMole"/></param>
            <returns>An instance of <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.FromGramsPerMole(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.MolarMass"/>.
            </summary>
            <param name="gramsPerMole">The value in g/mol.</param>
            <returns>An instance of <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.GetValue(Gu.Units.MolarMassUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MolarMass.SiValue"/> and <see cref="P:Gu.Units.MolarMass.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.MolarMass.SiValue"/> and <see cref="P:Gu.Units.MolarMass.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg/mol\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 kg/mol\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex kg/mol</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex kg/mol</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.MolarMass"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(Gu.Units.MolarMassUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(Gu.Units.MolarMassUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(Gu.Units.MolarMassUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(Gu.Units.MolarMassUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(System.String,Gu.Units.MolarMassUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(System.String,Gu.Units.MolarMassUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(System.String,Gu.Units.MolarMassUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ToString(System.String,Gu.Units.MolarMassUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.CompareTo(Gu.Units.MolarMass)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.MolarMass"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.MolarMass"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.MolarMass"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.Equals(Gu.Units.MolarMass)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MolarMass"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MolarMass as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MolarMass"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.Equals(Gu.Units.MolarMass,Gu.Units.MolarMass)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MolarMass"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same MolarMass as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.MolarMass"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.MolarMass.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MolarMass"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.MolarMass"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MolarMass.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.MolarMass.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.MolarMass.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.MolarMass.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.MolarMassTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MolarMass'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MolarMassTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarMassTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarMassTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarMassTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MolarMassUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.MolarMass"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MolarMassUnit.KilogramsPerMole">
            <summary>
            The KilogramsPerMole unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MolarMassUnit.GramsPerMole">
            <summary>
            The GramsPerMole unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MolarMassUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MolarMassUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MolarMassUnit"/> struct.
            </summary>
            <param name="toKilogramsPerMole">The conversion to <see cref="F:Gu.Units.MolarMassUnit.KilogramsPerMole"/></param>
            <param name="fromKilogramsPerMole">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.MolarMassUnit.KilogramsPerMole"/></param>
        </member>
        <member name="P:Gu.Units.MolarMassUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MolarMassUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.MolarMassUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.MolarMassUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MolarMassUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarMassUnit.op_Multiply(System.Double,Gu.Units.MolarMassUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MolarMass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.op_Equality(Gu.Units.MolarMassUnit,Gu.Units.MolarMassUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MolarMassUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMassUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMassUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.op_Inequality(Gu.Units.MolarMassUnit,Gu.Units.MolarMassUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MolarMassUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MolarMassUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MolarMassUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.MolarMassUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MolarMassUnit"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.TryParse(System.String,Gu.Units.MolarMassUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MolarMassUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MolarMassUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MolarMassUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MolarMassUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to KilogramsPerMole.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from kilogramsPerMole.
            </summary>
            <param name="kilogramsPerMole">The value in KilogramsPerMole</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new MolarMass(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.GetScalarValue(Gu.Units.MolarMass)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in KilogramsPerMole
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarMassUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.Equals(Gu.Units.MolarMassUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MolarMassUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.MolarMassUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same MolarMassUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MolarMassUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarMassUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MolarMassUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MolarMassUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MolarMassUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarMassUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarMassUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MolarMassUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Momentum">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Momentum"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Momentum.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.MomentumUnit.NewtonSecond"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Momentum.newtonSecond">
            <summary>
            The quantity in <see cref="F:Gu.Units.MomentumUnit.NewtonSecond"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Momentum.#ctor(System.Double,Gu.Units.MomentumUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Momentum"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.MomentumUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Momentum.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.MomentumUnit.NewtonSecond"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Momentum.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.MomentumUnit"/> for the <see cref="P:Gu.Units.Momentum.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Momentum.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Momentum.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Momentum.NewtonSecond">
            <summary>
            Gets the quantity in newtonSecond".
            </summary>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,Gu.Units.Mass)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,Gu.Units.Force)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Multiply(Gu.Units.Momentum,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Multiply(Gu.Units.Momentum,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Multiply(Gu.Units.Momentum,Gu.Units.Acceleration)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,Gu.Units.VolumetricFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Multiply(Gu.Units.Momentum,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,Gu.Units.AreaDensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,Gu.Units.MassFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Equality(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Momentum"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Momentum"/>.</param>
        </member>
        <member name="M:Gu.Units.Momentum.op_Inequality(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Momentum"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Momentum"/>.</param>
        </member>
        <member name="M:Gu.Units.Momentum.op_LessThan(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Momentum"/> is less than another specified <see cref="T:Gu.Units.Momentum"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Momentum"/>.</param>
        </member>
        <member name="M:Gu.Units.Momentum.op_GreaterThan(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Momentum"/> is greater than another specified <see cref="T:Gu.Units.Momentum"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Momentum"/>.</param>
        </member>
        <member name="M:Gu.Units.Momentum.op_LessThanOrEqual(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Momentum"/> is less than or equal to another specified <see cref="T:Gu.Units.Momentum"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Momentum"/>.</param>
        </member>
        <member name="M:Gu.Units.Momentum.op_GreaterThanOrEqual(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Momentum"/> is greater than or equal to another specified <see cref="T:Gu.Units.Momentum"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Momentum"/>.</param>
        </member>
        <member name="M:Gu.Units.Momentum.op_Multiply(System.Double,Gu.Units.Momentum)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Momentum"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Momentum"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Momentum"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Multiply(Gu.Units.Momentum,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Momentum"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Momentum"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Division(Gu.Units.Momentum,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Momentum"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Momentum"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.op_Addition(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Momentum"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Momentum"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Momentum"/>.</param>
        </member>
        <member name="M:Gu.Units.Momentum.op_Subtraction(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Subtracts an Momentum from another Momentum and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Momentum"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Momentum"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Momentum"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Momentum.op_UnaryNegation(Gu.Units.Momentum)">
            <summary>
            Returns an <see cref="T:Gu.Units.Momentum"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Momentum"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="momentum">An instance of <see cref="T:Gu.Units.Momentum"/></param>
        </member>
        <member name="M:Gu.Units.Momentum.op_UnaryPlus(Gu.Units.Momentum)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Momentum"/>.
            </summary>
            <returns>
            Returns <paramref name="momentum"/>.
            </returns>
            <param name="momentum">An instance of <see cref="T:Gu.Units.Momentum"/></param>
        </member>
        <member name="M:Gu.Units.Momentum.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Momentum"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Momentum"/></param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Momentum"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Momentum"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Momentum"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Momentum"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Momentum"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Momentum"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.TryParse(System.String,Gu.Units.Momentum@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Momentum"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Momentum"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Momentum"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Momentum"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.TryParse(System.String,System.IFormatProvider,Gu.Units.Momentum@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Momentum"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Momentum"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Momentum"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Momentum"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Momentum@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Momentum"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Momentum"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Momentum"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Momentum"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Momentum@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Momentum"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Momentum"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Momentum"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Momentum"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Momentum"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Momentum"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.From(System.Double,Gu.Units.MomentumUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Momentum"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Momentum"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.FromNewtonSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Momentum"/>.
            </summary>
            <param name="newtonSecond">The value in <see cref="F:Gu.Units.MomentumUnit.NewtonSecond"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Momentum"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.GetValue(Gu.Units.MomentumUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Momentum.SiValue"/> and <see cref="P:Gu.Units.Momentum.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Momentum"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Momentum.SiValue"/> and <see cref="P:Gu.Units.Momentum.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Momentum"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N⋅s\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Momentum"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N⋅s\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Momentum"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex N⋅s</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Momentum"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex N⋅s</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Momentum"/></returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(Gu.Units.MomentumUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(Gu.Units.MomentumUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(Gu.Units.MomentumUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(Gu.Units.MomentumUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(System.String,Gu.Units.MomentumUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(System.String,Gu.Units.MomentumUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(System.String,Gu.Units.MomentumUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.ToString(System.String,Gu.Units.MomentumUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.CompareTo(Gu.Units.Momentum)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Momentum"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Momentum"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Momentum"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Momentum.Equals(Gu.Units.Momentum)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Momentum"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Momentum as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Momentum"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Momentum.Equals(Gu.Units.Momentum,Gu.Units.Momentum)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Momentum"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Momentum as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Momentum"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Momentum.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Momentum"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Momentum"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Momentum.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Momentum.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Momentum.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Momentum.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.MomentumTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Momentum'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MomentumTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MomentumTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MomentumTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MomentumTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MomentumUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Momentum"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MomentumUnit.NewtonSecond">
            <summary>
            The NewtonSecond unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.MomentumUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MomentumUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.MomentumUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.MomentumUnit"/> struct.
            </summary>
            <param name="toNewtonSecond">The conversion to <see cref="F:Gu.Units.MomentumUnit.NewtonSecond"/></param>
            <param name="fromNewtonSecond">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.MomentumUnit.NewtonSecond"/></param>
        </member>
        <member name="P:Gu.Units.MomentumUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.MomentumUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.MomentumUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.MomentumUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.MomentumUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MomentumUnit.op_Multiply(System.Double,Gu.Units.MomentumUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.op_Equality(Gu.Units.MomentumUnit,Gu.Units.MomentumUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MomentumUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MomentumUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MomentumUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MomentumUnit.op_Inequality(Gu.Units.MomentumUnit,Gu.Units.MomentumUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.MomentumUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.MomentumUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.MomentumUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.MomentumUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.MomentumUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.MomentumUnit"/></returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.TryParse(System.String,Gu.Units.MomentumUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.MomentumUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.MomentumUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.MomentumUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.MomentumUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to NewtonSecond.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from newtonSecond.
            </summary>
            <param name="newtonSecond">The value in NewtonSecond</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Momentum(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.GetScalarValue(Gu.Units.Momentum)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in NewtonSecond
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MomentumUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.Equals(Gu.Units.MomentumUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.MomentumUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.MomentumUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same MomentumUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.MomentumUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MomentumUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.MomentumUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.MomentumUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.MomentumUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MomentumUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MomentumUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.MomentumUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Power">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Power"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Power.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.PowerUnit.Watts"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Power.watts">
            <summary>
            The quantity in <see cref="F:Gu.Units.PowerUnit.Watts"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Power.#ctor(System.Double,Gu.Units.PowerUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Power"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.PowerUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Power.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.PowerUnit.Watts"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Power.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.PowerUnit"/> for the <see cref="P:Gu.Units.Power.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Power.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Power.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Power.Watts">
            <summary>
            Gets the quantity in watts".
            </summary>
        </member>
        <member name="P:Gu.Units.Power.Nanowatts">
            <summary>
            Gets the quantity in Nanowatts
            </summary>
        </member>
        <member name="P:Gu.Units.Power.Microwatts">
            <summary>
            Gets the quantity in Microwatts
            </summary>
        </member>
        <member name="P:Gu.Units.Power.Milliwatts">
            <summary>
            Gets the quantity in Milliwatts
            </summary>
        </member>
        <member name="P:Gu.Units.Power.Kilowatts">
            <summary>
            Gets the quantity in Kilowatts
            </summary>
        </member>
        <member name="P:Gu.Units.Power.Megawatts">
            <summary>
            Gets the quantity in Megawatts
            </summary>
        </member>
        <member name="P:Gu.Units.Power.Gigawatts">
            <summary>
            Gets the quantity in Gigawatts
            </summary>
        </member>
        <member name="M:Gu.Units.Power.op_Multiply(Gu.Units.Power,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Current)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Force)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Pressure)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Energy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.AngularSpeed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Torque"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Acceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Torque)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Stiffness)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.VolumetricFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Voltage)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.SpecificEnergy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Multiply(Gu.Units.Power,Gu.Units.Flexibility)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Momentum)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.MassFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.KinematicViscosity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Equality(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Power"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Power"/>.</param>
        </member>
        <member name="M:Gu.Units.Power.op_Inequality(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Power"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Power"/>.</param>
        </member>
        <member name="M:Gu.Units.Power.op_LessThan(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Power"/> is less than another specified <see cref="T:Gu.Units.Power"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Power"/>.</param>
        </member>
        <member name="M:Gu.Units.Power.op_GreaterThan(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Power"/> is greater than another specified <see cref="T:Gu.Units.Power"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Power"/>.</param>
        </member>
        <member name="M:Gu.Units.Power.op_LessThanOrEqual(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Power"/> is less than or equal to another specified <see cref="T:Gu.Units.Power"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Power"/>.</param>
        </member>
        <member name="M:Gu.Units.Power.op_GreaterThanOrEqual(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Power"/> is greater than or equal to another specified <see cref="T:Gu.Units.Power"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Power"/>.</param>
        </member>
        <member name="M:Gu.Units.Power.op_Multiply(System.Double,Gu.Units.Power)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Power"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Power"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Power"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Multiply(Gu.Units.Power,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Power"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Power"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Division(Gu.Units.Power,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Power"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Power"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Power.op_Addition(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Power"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Power"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Power"/>.</param>
        </member>
        <member name="M:Gu.Units.Power.op_Subtraction(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Subtracts an Power from another Power and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Power"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Power"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Power"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Power.op_UnaryNegation(Gu.Units.Power)">
            <summary>
            Returns an <see cref="T:Gu.Units.Power"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Power"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="power">An instance of <see cref="T:Gu.Units.Power"/></param>
        </member>
        <member name="M:Gu.Units.Power.op_UnaryPlus(Gu.Units.Power)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Power"/>.
            </summary>
            <returns>
            Returns <paramref name="power"/>.
            </returns>
            <param name="power">An instance of <see cref="T:Gu.Units.Power"/></param>
        </member>
        <member name="M:Gu.Units.Power.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Power"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Power"/></param>
            <returns>The <see cref="T:Gu.Units.Power"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Power.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Power"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Power"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Power"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Power.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Power"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Power"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Power"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Power.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Power"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Power"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Power"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Power.TryParse(System.String,Gu.Units.Power@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Power"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Power"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Power"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Power"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Power.TryParse(System.String,System.IFormatProvider,Gu.Units.Power@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Power"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Power"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Power"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Power"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Power.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Power@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Power"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Power"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Power"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Power"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Power.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Power@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Power"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Power"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Power"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Power"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Power.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Power"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.From(System.Double,Gu.Units.PowerUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Power"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.FromWatts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Power"/>.
            </summary>
            <param name="watts">The value in <see cref="F:Gu.Units.PowerUnit.Watts"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.FromNanowatts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Power"/>.
            </summary>
            <param name="nanowatts">The value in nW.</param>
            <returns>An instance of <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.FromMicrowatts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Power"/>.
            </summary>
            <param name="microwatts">The value in μW.</param>
            <returns>An instance of <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.FromMilliwatts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Power"/>.
            </summary>
            <param name="milliwatts">The value in mW.</param>
            <returns>An instance of <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.FromKilowatts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Power"/>.
            </summary>
            <param name="kilowatts">The value in kW.</param>
            <returns>An instance of <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.FromMegawatts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Power"/>.
            </summary>
            <param name="megawatts">The value in MW.</param>
            <returns>An instance of <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.FromGigawatts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Power"/>.
            </summary>
            <param name="gigawatts">The value in GW.</param>
            <returns>An instance of <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.GetValue(Gu.Units.PowerUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Power.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Power.SiValue"/> and <see cref="P:Gu.Units.Power.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Power.SiValue"/> and <see cref="P:Gu.Units.Power.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 W\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 W\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex W</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex W</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Power"/></returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(Gu.Units.PowerUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(Gu.Units.PowerUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(Gu.Units.PowerUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(Gu.Units.PowerUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(System.String,Gu.Units.PowerUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(System.String,Gu.Units.PowerUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(System.String,Gu.Units.PowerUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Power.ToString(System.String,Gu.Units.PowerUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Power.CompareTo(Gu.Units.Power)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Power"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Power"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Power"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Power.Equals(Gu.Units.Power)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Power"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Power as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Power"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Power.Equals(Gu.Units.Power,Gu.Units.Power)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Power"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Power as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Power"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Power.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Power"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Power"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Power.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Power.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Power.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Power.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.PowerTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Power'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.PowerTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PowerTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PowerTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PowerTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.PowerUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Power"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PowerUnit.Watts">
            <summary>
            The Watts unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PowerUnit.Nanowatts">
            <summary>
            The Nanowatts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PowerUnit.Microwatts">
            <summary>
            The Microwatts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PowerUnit.Milliwatts">
            <summary>
            The Milliwatts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PowerUnit.Kilowatts">
            <summary>
            The Kilowatts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PowerUnit.Megawatts">
            <summary>
            The Megawatts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PowerUnit.Gigawatts">
            <summary>
            The Gigawatts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PowerUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.PowerUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.PowerUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.PowerUnit"/> struct.
            </summary>
            <param name="toWatts">The conversion to <see cref="F:Gu.Units.PowerUnit.Watts"/></param>
            <param name="fromWatts">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.PowerUnit.Watts"/></param>
        </member>
        <member name="P:Gu.Units.PowerUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.PowerUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.PowerUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.PowerUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.PowerUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PowerUnit.op_Multiply(System.Double,Gu.Units.PowerUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.op_Equality(Gu.Units.PowerUnit,Gu.Units.PowerUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.PowerUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.PowerUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.PowerUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.PowerUnit.op_Inequality(Gu.Units.PowerUnit,Gu.Units.PowerUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.PowerUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.PowerUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.PowerUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.PowerUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.PowerUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.PowerUnit"/></returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.TryParse(System.String,Gu.Units.PowerUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.PowerUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.PowerUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.PowerUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.PowerUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Watts.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from watts.
            </summary>
            <param name="watts">The value in Watts</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Power(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.GetScalarValue(Gu.Units.Power)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Watts
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PowerUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.Equals(Gu.Units.PowerUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.PowerUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.PowerUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same PowerUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.PowerUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PowerUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.PowerUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.PowerUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.PowerUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PowerUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PowerUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PowerUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Pressure">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Pressure"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Pressure.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.PressureUnit.Pascals"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Pressure.pascals">
            <summary>
            The quantity in <see cref="F:Gu.Units.PressureUnit.Pascals"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Pressure.#ctor(System.Double,Gu.Units.PressureUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Pressure"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.PressureUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Pressure.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.PressureUnit.Pascals"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.PressureUnit"/> for the <see cref="P:Gu.Units.Pressure.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Pressure.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Pascals">
            <summary>
            Gets the quantity in pascals".
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Bars">
            <summary>
            Gets the quantity in Bars
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Millibars">
            <summary>
            Gets the quantity in Millibars
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Nanopascals">
            <summary>
            Gets the quantity in Nanopascals
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Micropascals">
            <summary>
            Gets the quantity in Micropascals
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Millipascals">
            <summary>
            Gets the quantity in Millipascals
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Kilopascals">
            <summary>
            Gets the quantity in Kilopascals
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Megapascals">
            <summary>
            Gets the quantity in Megapascals
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.Gigapascals">
            <summary>
            Gets the quantity in Gigapascals
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.NewtonsPerSquareMillimetre">
            <summary>
            Gets the quantity in NewtonsPerSquareMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.KilonewtonsPerSquareMillimetre">
            <summary>
            Gets the quantity in KilonewtonsPerSquareMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Pressure.NewtonsPerSquareMetre">
            <summary>
            Gets the quantity in NewtonsPerSquareMetre
            </summary>
        </member>
        <member name="M:Gu.Units.Pressure.op_Multiply(Gu.Units.Pressure,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Multiply(Gu.Units.Pressure,Gu.Units.Area)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Multiply(Gu.Units.Pressure,Gu.Units.Volume)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Division(Gu.Units.Pressure,Gu.Units.Density)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Division(Gu.Units.Pressure,Gu.Units.Acceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Division(Gu.Units.Pressure,Gu.Units.Stiffness)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Multiply(Gu.Units.Pressure,Gu.Units.VolumetricFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Division(Gu.Units.Pressure,Gu.Units.SpecificEnergy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Density"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Multiply(Gu.Units.Pressure,Gu.Units.Flexibility)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Division(Gu.Units.Pressure,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Division(Gu.Units.Pressure,Gu.Units.AreaDensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Multiply(Gu.Units.Pressure,Gu.Units.SpecificVolume)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Division(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Equality(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Pressure"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Pressure"/>.</param>
        </member>
        <member name="M:Gu.Units.Pressure.op_Inequality(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Pressure"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Pressure"/>.</param>
        </member>
        <member name="M:Gu.Units.Pressure.op_LessThan(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Pressure"/> is less than another specified <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Pressure"/>.</param>
        </member>
        <member name="M:Gu.Units.Pressure.op_GreaterThan(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Pressure"/> is greater than another specified <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Pressure"/>.</param>
        </member>
        <member name="M:Gu.Units.Pressure.op_LessThanOrEqual(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Pressure"/> is less than or equal to another specified <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Pressure"/>.</param>
        </member>
        <member name="M:Gu.Units.Pressure.op_GreaterThanOrEqual(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Pressure"/> is greater than or equal to another specified <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Pressure"/>.</param>
        </member>
        <member name="M:Gu.Units.Pressure.op_Multiply(System.Double,Gu.Units.Pressure)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Pressure"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Pressure"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Pressure"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Multiply(Gu.Units.Pressure,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Pressure"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Pressure"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Division(Gu.Units.Pressure,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Pressure"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Pressure"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.op_Addition(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Pressure"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Pressure"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Pressure"/>.</param>
        </member>
        <member name="M:Gu.Units.Pressure.op_Subtraction(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Subtracts an Pressure from another Pressure and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Pressure"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Pressure"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Pressure"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Pressure.op_UnaryNegation(Gu.Units.Pressure)">
            <summary>
            Returns an <see cref="T:Gu.Units.Pressure"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Pressure"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="pressure">An instance of <see cref="T:Gu.Units.Pressure"/></param>
        </member>
        <member name="M:Gu.Units.Pressure.op_UnaryPlus(Gu.Units.Pressure)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <returns>
            Returns <paramref name="pressure"/>.
            </returns>
            <param name="pressure">An instance of <see cref="T:Gu.Units.Pressure"/></param>
        </member>
        <member name="M:Gu.Units.Pressure.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Pressure"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Pressure"/></param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Pressure"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Pressure"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Pressure"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Pressure"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Pressure"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Pressure"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.TryParse(System.String,Gu.Units.Pressure@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Pressure"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Pressure"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Pressure"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Pressure"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.TryParse(System.String,System.IFormatProvider,Gu.Units.Pressure@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Pressure"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Pressure"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Pressure"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Pressure"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Pressure@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Pressure"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Pressure"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Pressure"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Pressure"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Pressure@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Pressure"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Pressure"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Pressure"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Pressure"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Pressure"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.From(System.Double,Gu.Units.PressureUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromPascals(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="pascals">The value in <see cref="F:Gu.Units.PressureUnit.Pascals"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromBars(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="bars">The value in bar.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromMillibars(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="millibars">The value in mbar.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromNanopascals(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="nanopascals">The value in nPa.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromMicropascals(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="micropascals">The value in μPa.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromMillipascals(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="millipascals">The value in mPa.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromKilopascals(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="kilopascals">The value in kPa.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromMegapascals(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="megapascals">The value in MPa.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromGigapascals(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="gigapascals">The value in GPa.</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromNewtonsPerSquareMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="newtonsPerSquareMillimetre">The value in N⋅mm⁻².</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromKilonewtonsPerSquareMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="kilonewtonsPerSquareMillimetre">The value in kN⋅mm⁻².</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.FromNewtonsPerSquareMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Pressure"/>.
            </summary>
            <param name="newtonsPerSquareMetre">The value in N/m².</param>
            <returns>An instance of <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.GetValue(Gu.Units.PressureUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Pressure.SiValue"/> and <see cref="P:Gu.Units.Pressure.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Pressure.SiValue"/> and <see cref="P:Gu.Units.Pressure.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 Pa\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 Pa\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex Pa</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex Pa</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Pressure"/></returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(Gu.Units.PressureUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(Gu.Units.PressureUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(Gu.Units.PressureUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(Gu.Units.PressureUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(System.String,Gu.Units.PressureUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(System.String,Gu.Units.PressureUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(System.String,Gu.Units.PressureUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.ToString(System.String,Gu.Units.PressureUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.CompareTo(Gu.Units.Pressure)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Pressure"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Pressure"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Pressure"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Pressure.Equals(Gu.Units.Pressure)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Pressure"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Pressure as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Pressure"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Pressure.Equals(Gu.Units.Pressure,Gu.Units.Pressure)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Pressure"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Pressure as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Pressure"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Pressure.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Pressure"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Pressure"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Pressure.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Pressure.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Pressure.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Pressure.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.PressureTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Pressure'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.PressureTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PressureTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PressureTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PressureTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.PressureUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Pressure"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.Pascals">
            <summary>
            The Pascals unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.Bars">
            <summary>
            The Bars unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.Millibars">
            <summary>
            The Millibars unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.Nanopascals">
            <summary>
            The Nanopascals unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.Micropascals">
            <summary>
            The Micropascals unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.Millipascals">
            <summary>
            The Millipascals unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.Kilopascals">
            <summary>
            The Kilopascals unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.Megapascals">
            <summary>
            The Megapascals unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.Gigapascals">
            <summary>
            The Gigapascals unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.NewtonsPerSquareMillimetre">
            <summary>
            The NewtonsPerSquareMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.KilonewtonsPerSquareMillimetre">
            <summary>
            The KilonewtonsPerSquareMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.NewtonsPerSquareMetre">
            <summary>
            The NewtonsPerSquareMetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.PressureUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.PressureUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.PressureUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.PressureUnit"/> struct.
            </summary>
            <param name="toPascals">The conversion to <see cref="F:Gu.Units.PressureUnit.Pascals"/></param>
            <param name="fromPascals">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.PressureUnit.Pascals"/></param>
        </member>
        <member name="P:Gu.Units.PressureUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.PressureUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.PressureUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.PressureUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.PressureUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PressureUnit.op_Multiply(System.Double,Gu.Units.PressureUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.op_Equality(Gu.Units.PressureUnit,Gu.Units.PressureUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.PressureUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.PressureUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.PressureUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.PressureUnit.op_Inequality(Gu.Units.PressureUnit,Gu.Units.PressureUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.PressureUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.PressureUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.PressureUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.PressureUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.PressureUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.PressureUnit"/></returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.TryParse(System.String,Gu.Units.PressureUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.PressureUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.PressureUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.PressureUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.PressureUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Pascals.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from pascals.
            </summary>
            <param name="pascals">The value in Pascals</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Pressure(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.GetScalarValue(Gu.Units.Pressure)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Pascals
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PressureUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.Equals(Gu.Units.PressureUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.PressureUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.PressureUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same PressureUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.PressureUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PressureUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.PressureUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.PressureUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.PressureUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PressureUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PressureUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.PressureUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Resistance">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Resistance"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Resistance.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.ResistanceUnit.Ohms"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Resistance.ohms">
            <summary>
            The quantity in <see cref="F:Gu.Units.ResistanceUnit.Ohms"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Resistance.#ctor(System.Double,Gu.Units.ResistanceUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Resistance"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.ResistanceUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Resistance.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.ResistanceUnit.Ohms"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Resistance.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.ResistanceUnit"/> for the <see cref="P:Gu.Units.Resistance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Resistance.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Resistance.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Resistance.Ohms">
            <summary>
            Gets the quantity in ohms".
            </summary>
        </member>
        <member name="P:Gu.Units.Resistance.Microohms">
            <summary>
            Gets the quantity in Microohms
            </summary>
        </member>
        <member name="P:Gu.Units.Resistance.Milliohms">
            <summary>
            Gets the quantity in Milliohms
            </summary>
        </member>
        <member name="P:Gu.Units.Resistance.Kiloohms">
            <summary>
            Gets the quantity in Kiloohms
            </summary>
        </member>
        <member name="P:Gu.Units.Resistance.Megaohms">
            <summary>
            Gets the quantity in Megaohms
            </summary>
        </member>
        <member name="M:Gu.Units.Resistance.op_Multiply(Gu.Units.Resistance,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Multiply(Gu.Units.Resistance,Gu.Units.Current)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Division(Gu.Units.Resistance,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Multiply(Gu.Units.Resistance,Gu.Units.ElectricCharge)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Division(Gu.Units.Resistance,Gu.Units.Inductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Multiply(Gu.Units.Resistance,Gu.Units.Capacitance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Multiply(Gu.Units.Resistance,Gu.Units.Conductivity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Division(System.Double,Gu.Units.Resistance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The ElectricalConductance that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Division(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Equality(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Resistance"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Resistance"/>.</param>
        </member>
        <member name="M:Gu.Units.Resistance.op_Inequality(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Resistance"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Resistance"/>.</param>
        </member>
        <member name="M:Gu.Units.Resistance.op_LessThan(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Resistance"/> is less than another specified <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Resistance"/>.</param>
        </member>
        <member name="M:Gu.Units.Resistance.op_GreaterThan(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Resistance"/> is greater than another specified <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Resistance"/>.</param>
        </member>
        <member name="M:Gu.Units.Resistance.op_LessThanOrEqual(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Resistance"/> is less than or equal to another specified <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Resistance"/>.</param>
        </member>
        <member name="M:Gu.Units.Resistance.op_GreaterThanOrEqual(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Resistance"/> is greater than or equal to another specified <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Resistance"/>.</param>
        </member>
        <member name="M:Gu.Units.Resistance.op_Multiply(System.Double,Gu.Units.Resistance)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Resistance"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Resistance"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Resistance"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Multiply(Gu.Units.Resistance,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Resistance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Resistance"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Division(Gu.Units.Resistance,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Resistance"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Resistance"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.op_Addition(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Resistance"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Resistance"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Resistance"/>.</param>
        </member>
        <member name="M:Gu.Units.Resistance.op_Subtraction(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Subtracts an Resistance from another Resistance and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Resistance"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Resistance"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Resistance"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Resistance.op_UnaryNegation(Gu.Units.Resistance)">
            <summary>
            Returns an <see cref="T:Gu.Units.Resistance"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Resistance"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="resistance">An instance of <see cref="T:Gu.Units.Resistance"/></param>
        </member>
        <member name="M:Gu.Units.Resistance.op_UnaryPlus(Gu.Units.Resistance)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <returns>
            Returns <paramref name="resistance"/>.
            </returns>
            <param name="resistance">An instance of <see cref="T:Gu.Units.Resistance"/></param>
        </member>
        <member name="M:Gu.Units.Resistance.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Resistance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Resistance"/></param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Resistance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Resistance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Resistance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Resistance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Resistance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Resistance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.TryParse(System.String,Gu.Units.Resistance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Resistance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Resistance"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Resistance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Resistance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.TryParse(System.String,System.IFormatProvider,Gu.Units.Resistance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Resistance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Resistance"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Resistance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Resistance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Resistance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Resistance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Resistance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Resistance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Resistance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Resistance@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Resistance"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Resistance"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Resistance"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Resistance"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Resistance"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.From(System.Double,Gu.Units.ResistanceUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.FromOhms(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <param name="ohms">The value in <see cref="F:Gu.Units.ResistanceUnit.Ohms"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.FromMicroohms(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <param name="microohms">The value in μΩ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.FromMilliohms(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <param name="milliohms">The value in mΩ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.FromKiloohms(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <param name="kiloohms">The value in kΩ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.FromMegaohms(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Resistance"/>.
            </summary>
            <param name="megaohms">The value in MΩ.</param>
            <returns>An instance of <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.GetValue(Gu.Units.ResistanceUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Resistance.SiValue"/> and <see cref="P:Gu.Units.Resistance.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Resistance.SiValue"/> and <see cref="P:Gu.Units.Resistance.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 Ω\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 Ω\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex Ω</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex Ω</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Resistance"/></returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(Gu.Units.ResistanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(Gu.Units.ResistanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(Gu.Units.ResistanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(Gu.Units.ResistanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(System.String,Gu.Units.ResistanceUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(System.String,Gu.Units.ResistanceUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(System.String,Gu.Units.ResistanceUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.ToString(System.String,Gu.Units.ResistanceUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.CompareTo(Gu.Units.Resistance)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Resistance"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Resistance"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Resistance"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Resistance.Equals(Gu.Units.Resistance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Resistance"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Resistance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Resistance"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Resistance.Equals(Gu.Units.Resistance,Gu.Units.Resistance)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Resistance"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Resistance as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Resistance"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Resistance.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Resistance"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Resistance"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Resistance.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Resistance.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Resistance.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Resistance.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.ResistanceTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Resistance'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ResistanceTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ResistanceTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ResistanceTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ResistanceTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ResistanceUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Resistance"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ResistanceUnit.Ohms">
            <summary>
            The Ohms unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ResistanceUnit.Microohms">
            <summary>
            The Microohms unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ResistanceUnit.Milliohms">
            <summary>
            The Milliohms unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ResistanceUnit.Kiloohms">
            <summary>
            The Kiloohms unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ResistanceUnit.Megaohms">
            <summary>
            The Megaohms unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.ResistanceUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ResistanceUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.ResistanceUnit"/> struct.
            </summary>
            <param name="toOhms">The conversion to <see cref="F:Gu.Units.ResistanceUnit.Ohms"/></param>
            <param name="fromOhms">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.ResistanceUnit.Ohms"/></param>
        </member>
        <member name="P:Gu.Units.ResistanceUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.ResistanceUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.ResistanceUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.ResistanceUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.ResistanceUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ResistanceUnit.op_Multiply(System.Double,Gu.Units.ResistanceUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.op_Equality(Gu.Units.ResistanceUnit,Gu.Units.ResistanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ResistanceUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ResistanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ResistanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.op_Inequality(Gu.Units.ResistanceUnit,Gu.Units.ResistanceUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.ResistanceUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.ResistanceUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.ResistanceUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.ResistanceUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.ResistanceUnit"/></returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.TryParse(System.String,Gu.Units.ResistanceUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.ResistanceUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.ResistanceUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.ResistanceUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.ResistanceUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Ohms.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from ohms.
            </summary>
            <param name="ohms">The value in Ohms</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Resistance(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.GetScalarValue(Gu.Units.Resistance)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Ohms
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ResistanceUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.Equals(Gu.Units.ResistanceUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.ResistanceUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.ResistanceUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same ResistanceUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.ResistanceUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ResistanceUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.ResistanceUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.ResistanceUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.ResistanceUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ResistanceUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ResistanceUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.ResistanceUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SolidAngle">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.SolidAngle"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.SolidAngle.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.SolidAngleUnit.Steradians"/>
            </summary>
        </member>
        <member name="F:Gu.Units.SolidAngle.steradians">
            <summary>
            The quantity in <see cref="F:Gu.Units.SolidAngleUnit.Steradians"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.SolidAngle.#ctor(System.Double,Gu.Units.SolidAngleUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.SolidAngle"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.SolidAngleUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.SolidAngle.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.SolidAngleUnit.Steradians"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SolidAngle.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.SolidAngleUnit"/> for the <see cref="P:Gu.Units.SolidAngle.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SolidAngle.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.SolidAngle.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SolidAngle.Steradians">
            <summary>
            Gets the quantity in steradians".
            </summary>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_Multiply(Gu.Units.SolidAngle,Gu.Units.LuminousIntensity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.LuminousFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_Division(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_Equality(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SolidAngle"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_Inequality(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SolidAngle"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_LessThan(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SolidAngle"/> is less than another specified <see cref="T:Gu.Units.SolidAngle"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_GreaterThan(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SolidAngle"/> is greater than another specified <see cref="T:Gu.Units.SolidAngle"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_LessThanOrEqual(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SolidAngle"/> is less than or equal to another specified <see cref="T:Gu.Units.SolidAngle"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_GreaterThanOrEqual(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SolidAngle"/> is greater than or equal to another specified <see cref="T:Gu.Units.SolidAngle"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_Multiply(System.Double,Gu.Units.SolidAngle)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.SolidAngle"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.SolidAngle"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_Multiply(Gu.Units.SolidAngle,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.SolidAngle"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.SolidAngle"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_Division(Gu.Units.SolidAngle,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.SolidAngle"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.SolidAngle"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_Addition(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.SolidAngle"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.SolidAngle"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngle"/>.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_Subtraction(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Subtracts an SolidAngle from another SolidAngle and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.SolidAngle"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngle"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngle"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_UnaryNegation(Gu.Units.SolidAngle)">
            <summary>
            Returns an <see cref="T:Gu.Units.SolidAngle"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.SolidAngle"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="solidAngle">An instance of <see cref="T:Gu.Units.SolidAngle"/></param>
        </member>
        <member name="M:Gu.Units.SolidAngle.op_UnaryPlus(Gu.Units.SolidAngle)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.SolidAngle"/>.
            </summary>
            <returns>
            Returns <paramref name="solidAngle"/>.
            </returns>
            <param name="solidAngle">An instance of <see cref="T:Gu.Units.SolidAngle"/></param>
        </member>
        <member name="M:Gu.Units.SolidAngle.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SolidAngle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SolidAngle"/></param>
            <returns>The <see cref="T:Gu.Units.SolidAngle"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SolidAngle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.SolidAngle"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SolidAngle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.SolidAngle"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SolidAngle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.SolidAngle"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.TryParse(System.String,Gu.Units.SolidAngle@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SolidAngle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.SolidAngle"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SolidAngle"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.TryParse(System.String,System.IFormatProvider,Gu.Units.SolidAngle@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SolidAngle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.SolidAngle"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SolidAngle"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.SolidAngle@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SolidAngle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.SolidAngle"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SolidAngle"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.SolidAngle@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SolidAngle"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SolidAngle"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.SolidAngle"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SolidAngle"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.SolidAngle"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.SolidAngle"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.From(System.Double,Gu.Units.SolidAngleUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.SolidAngle"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.SolidAngle"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.FromSteradians(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.SolidAngle"/>.
            </summary>
            <param name="steradians">The value in <see cref="F:Gu.Units.SolidAngleUnit.Steradians"/></param>
            <returns>An instance of <see cref="T:Gu.Units.SolidAngle"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.GetValue(Gu.Units.SolidAngleUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.SolidAngle.SiValue"/> and <see cref="P:Gu.Units.SolidAngle.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.SolidAngle"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.SolidAngle.SiValue"/> and <see cref="P:Gu.Units.SolidAngle.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SolidAngle"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 sr\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SolidAngle"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 sr\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SolidAngle"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex sr</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SolidAngle"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex sr</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SolidAngle"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(Gu.Units.SolidAngleUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(Gu.Units.SolidAngleUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(Gu.Units.SolidAngleUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(Gu.Units.SolidAngleUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(System.String,Gu.Units.SolidAngleUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(System.String,Gu.Units.SolidAngleUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(System.String,Gu.Units.SolidAngleUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ToString(System.String,Gu.Units.SolidAngleUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.CompareTo(Gu.Units.SolidAngle)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.SolidAngle"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.SolidAngle"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.SolidAngle"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.Equals(Gu.Units.SolidAngle)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SolidAngle"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same SolidAngle as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.SolidAngle"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.Equals(Gu.Units.SolidAngle,Gu.Units.SolidAngle)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SolidAngle"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same SolidAngle as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.SolidAngle"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.SolidAngle.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SolidAngle"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.SolidAngle"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.SolidAngle.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.SolidAngle.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.SolidAngleTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.SolidAngle'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.SolidAngleTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SolidAngleTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SolidAngleTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SolidAngleTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SolidAngleUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.SolidAngle"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SolidAngleUnit.Steradians">
            <summary>
            The Steradians unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SolidAngleUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.SolidAngleUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.SolidAngleUnit"/> struct.
            </summary>
            <param name="toSteradians">The conversion to <see cref="F:Gu.Units.SolidAngleUnit.Steradians"/></param>
            <param name="fromSteradians">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.SolidAngleUnit.Steradians"/></param>
        </member>
        <member name="P:Gu.Units.SolidAngleUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.SolidAngleUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.SolidAngleUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.SolidAngleUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SolidAngleUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.op_Multiply(System.Double,Gu.Units.SolidAngleUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SolidAngle"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.op_Equality(Gu.Units.SolidAngleUnit,Gu.Units.SolidAngleUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SolidAngleUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngleUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngleUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.op_Inequality(Gu.Units.SolidAngleUnit,Gu.Units.SolidAngleUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SolidAngleUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SolidAngleUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SolidAngleUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.SolidAngleUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.SolidAngleUnit"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.TryParse(System.String,Gu.Units.SolidAngleUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SolidAngleUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SolidAngleUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.SolidAngleUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SolidAngleUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Steradians.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from steradians.
            </summary>
            <param name="steradians">The value in Steradians</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new SolidAngle(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.GetScalarValue(Gu.Units.SolidAngle)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Steradians
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.Equals(Gu.Units.SolidAngleUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SolidAngleUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.SolidAngleUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same SolidAngleUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SolidAngleUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SolidAngleUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.SolidAngleUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.SolidAngleUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SolidAngleUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SolidAngleUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SolidAngleUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SpecificEnergy">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.SpecificEnergy"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificEnergy.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.SpecificEnergyUnit.JoulesPerKilogram"/>
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificEnergy.joulesPerKilogram">
            <summary>
            The quantity in <see cref="F:Gu.Units.SpecificEnergyUnit.JoulesPerKilogram"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.#ctor(System.Double,Gu.Units.SpecificEnergyUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.SpecificEnergy"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.SpecificEnergyUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.SpecificEnergy.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.SpecificEnergyUnit.JoulesPerKilogram"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificEnergy.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.SpecificEnergyUnit"/> for the <see cref="P:Gu.Units.SpecificEnergy.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificEnergy.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.SpecificEnergy.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificEnergy.JoulesPerKilogram">
            <summary>
            Gets the quantity in joulesPerKilogram".
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificEnergy.KilojoulesPerKilogram">
            <summary>
            Gets the quantity in KilojoulesPerKilogram
            </summary>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Multiply(Gu.Units.SpecificEnergy,Gu.Units.Mass)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Division(Gu.Units.SpecificEnergy,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Multiply(Gu.Units.SpecificEnergy,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Division(Gu.Units.SpecificEnergy,Gu.Units.Pressure)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificVolume"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Multiply(Gu.Units.SpecificEnergy,Gu.Units.Density)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Division(Gu.Units.SpecificEnergy,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Division(Gu.Units.SpecificEnergy,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Division(Gu.Units.SpecificEnergy,Gu.Units.Acceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Multiply(Gu.Units.SpecificEnergy,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Multiply(Gu.Units.SpecificEnergy,Gu.Units.AreaDensity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Division(Gu.Units.SpecificEnergy,Gu.Units.SpecificVolume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Multiply(Gu.Units.SpecificEnergy,Gu.Units.MassFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Division(Gu.Units.SpecificEnergy,Gu.Units.KinematicViscosity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Division(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Equality(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpecificEnergy"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Inequality(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpecificEnergy"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_LessThan(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SpecificEnergy"/> is less than another specified <see cref="T:Gu.Units.SpecificEnergy"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_GreaterThan(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SpecificEnergy"/> is greater than another specified <see cref="T:Gu.Units.SpecificEnergy"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_LessThanOrEqual(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SpecificEnergy"/> is less than or equal to another specified <see cref="T:Gu.Units.SpecificEnergy"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_GreaterThanOrEqual(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SpecificEnergy"/> is greater than or equal to another specified <see cref="T:Gu.Units.SpecificEnergy"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Multiply(System.Double,Gu.Units.SpecificEnergy)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.SpecificEnergy"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.SpecificEnergy"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Multiply(Gu.Units.SpecificEnergy,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.SpecificEnergy"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.SpecificEnergy"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Division(Gu.Units.SpecificEnergy,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.SpecificEnergy"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.SpecificEnergy"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Addition(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.SpecificEnergy"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.SpecificEnergy"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergy"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_Subtraction(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Subtracts an SpecificEnergy from another SpecificEnergy and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.SpecificEnergy"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergy"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergy"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_UnaryNegation(Gu.Units.SpecificEnergy)">
            <summary>
            Returns an <see cref="T:Gu.Units.SpecificEnergy"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.SpecificEnergy"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="specificEnergy">An instance of <see cref="T:Gu.Units.SpecificEnergy"/></param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.op_UnaryPlus(Gu.Units.SpecificEnergy)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.SpecificEnergy"/>.
            </summary>
            <returns>
            Returns <paramref name="specificEnergy"/>.
            </returns>
            <param name="specificEnergy">An instance of <see cref="T:Gu.Units.SpecificEnergy"/></param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificEnergy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificEnergy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificEnergy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificEnergy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.TryParse(System.String,Gu.Units.SpecificEnergy@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificEnergy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificEnergy"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.TryParse(System.String,System.IFormatProvider,Gu.Units.SpecificEnergy@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificEnergy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificEnergy"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.SpecificEnergy@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificEnergy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificEnergy"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.SpecificEnergy@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificEnergy"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificEnergy"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificEnergy"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.SpecificEnergy"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.From(System.Double,Gu.Units.SpecificEnergyUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.SpecificEnergy"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.FromJoulesPerKilogram(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.SpecificEnergy"/>.
            </summary>
            <param name="joulesPerKilogram">The value in <see cref="F:Gu.Units.SpecificEnergyUnit.JoulesPerKilogram"/></param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.FromKilojoulesPerKilogram(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.SpecificEnergy"/>.
            </summary>
            <param name="kilojoulesPerKilogram">The value in kJ/kg.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.GetValue(Gu.Units.SpecificEnergyUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.SpecificEnergy.SiValue"/> and <see cref="P:Gu.Units.SpecificEnergy.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.SpecificEnergy.SiValue"/> and <see cref="P:Gu.Units.SpecificEnergy.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 J/kg\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 J/kg\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex J/kg</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex J/kg</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificEnergy"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(Gu.Units.SpecificEnergyUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(Gu.Units.SpecificEnergyUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(Gu.Units.SpecificEnergyUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(Gu.Units.SpecificEnergyUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(System.String,Gu.Units.SpecificEnergyUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(System.String,Gu.Units.SpecificEnergyUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(System.String,Gu.Units.SpecificEnergyUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ToString(System.String,Gu.Units.SpecificEnergyUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.CompareTo(Gu.Units.SpecificEnergy)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.SpecificEnergy"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.SpecificEnergy"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.SpecificEnergy"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.Equals(Gu.Units.SpecificEnergy)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SpecificEnergy"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same SpecificEnergy as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.SpecificEnergy"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.Equals(Gu.Units.SpecificEnergy,Gu.Units.SpecificEnergy)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SpecificEnergy"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same SpecificEnergy as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.SpecificEnergy"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SpecificEnergy"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.SpecificEnergy"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.SpecificEnergy.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.SpecificEnergyTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.SpecificEnergy'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.SpecificEnergyTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificEnergyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificEnergyTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificEnergyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SpecificEnergyUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.SpecificEnergy"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificEnergyUnit.JoulesPerKilogram">
            <summary>
            The JoulesPerKilogram unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificEnergyUnit.KilojoulesPerKilogram">
            <summary>
            The KilojoulesPerKilogram unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificEnergyUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.SpecificEnergyUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.SpecificEnergyUnit"/> struct.
            </summary>
            <param name="toJoulesPerKilogram">The conversion to <see cref="F:Gu.Units.SpecificEnergyUnit.JoulesPerKilogram"/></param>
            <param name="fromJoulesPerKilogram">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.SpecificEnergyUnit.JoulesPerKilogram"/></param>
        </member>
        <member name="P:Gu.Units.SpecificEnergyUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.SpecificEnergyUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificEnergyUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.SpecificEnergyUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificEnergyUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.op_Multiply(System.Double,Gu.Units.SpecificEnergyUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.op_Equality(Gu.Units.SpecificEnergyUnit,Gu.Units.SpecificEnergyUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpecificEnergyUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergyUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergyUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.op_Inequality(Gu.Units.SpecificEnergyUnit,Gu.Units.SpecificEnergyUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpecificEnergyUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificEnergyUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificEnergyUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.SpecificEnergyUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificEnergyUnit"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.TryParse(System.String,Gu.Units.SpecificEnergyUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificEnergyUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificEnergyUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificEnergyUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificEnergyUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to JoulesPerKilogram.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from joulesPerKilogram.
            </summary>
            <param name="joulesPerKilogram">The value in JoulesPerKilogram</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new SpecificEnergy(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.GetScalarValue(Gu.Units.SpecificEnergy)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in JoulesPerKilogram
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.Equals(Gu.Units.SpecificEnergyUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SpecificEnergyUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.SpecificEnergyUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same SpecificEnergyUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SpecificEnergyUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.SpecificEnergyUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificEnergyUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SpecificVolume">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificVolume.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.SpecificVolumeUnit.CubicMetresPerKilogram"/>
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificVolume.cubicMetresPerKilogram">
            <summary>
            The quantity in <see cref="F:Gu.Units.SpecificVolumeUnit.CubicMetresPerKilogram"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.SpecificVolume.#ctor(System.Double,Gu.Units.SpecificVolumeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.SpecificVolume"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.SpecificVolumeUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.SpecificVolume.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.SpecificVolumeUnit.CubicMetresPerKilogram"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificVolume.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.SpecificVolumeUnit"/> for the <see cref="P:Gu.Units.SpecificVolume.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificVolume.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.SpecificVolume.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificVolume.CubicMetresPerKilogram">
            <summary>
            Gets the quantity in cubicMetresPerKilogram".
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificVolume.CubicMetresPerGram">
            <summary>
            Gets the quantity in CubicMetresPerGram
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificVolume.CubicCentimetresPerGram">
            <summary>
            Gets the quantity in CubicCentimetresPerGram
            </summary>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Multiply(Gu.Units.SpecificVolume,Gu.Units.Mass)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Multiply(Gu.Units.SpecificVolume,Gu.Units.Pressure)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Multiply(Gu.Units.SpecificVolume,Gu.Units.AreaDensity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Multiply(Gu.Units.SpecificVolume,Gu.Units.MassFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Division(System.Double,Gu.Units.SpecificVolume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The Density that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Division(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Equality(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpecificVolume"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Inequality(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpecificVolume"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_LessThan(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SpecificVolume"/> is less than another specified <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_GreaterThan(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SpecificVolume"/> is greater than another specified <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_LessThanOrEqual(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SpecificVolume"/> is less than or equal to another specified <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_GreaterThanOrEqual(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.SpecificVolume"/> is greater than or equal to another specified <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Multiply(System.Double,Gu.Units.SpecificVolume)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.SpecificVolume"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.SpecificVolume"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Multiply(Gu.Units.SpecificVolume,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.SpecificVolume"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.SpecificVolume"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Division(Gu.Units.SpecificVolume,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.SpecificVolume"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.SpecificVolume"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Addition(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.SpecificVolume"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.SpecificVolume"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolume"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_Subtraction(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Subtracts an SpecificVolume from another SpecificVolume and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.SpecificVolume"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolume"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolume"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_UnaryNegation(Gu.Units.SpecificVolume)">
            <summary>
            Returns an <see cref="T:Gu.Units.SpecificVolume"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.SpecificVolume"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="specificVolume">An instance of <see cref="T:Gu.Units.SpecificVolume"/></param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.op_UnaryPlus(Gu.Units.SpecificVolume)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
            <returns>
            Returns <paramref name="specificVolume"/>.
            </returns>
            <param name="specificVolume">An instance of <see cref="T:Gu.Units.SpecificVolume"/></param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificVolume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></param>
            <returns>The <see cref="T:Gu.Units.SpecificVolume"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificVolume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.SpecificVolume"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificVolume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.SpecificVolume"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificVolume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.SpecificVolume"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.TryParse(System.String,Gu.Units.SpecificVolume@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificVolume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificVolume"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificVolume"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.TryParse(System.String,System.IFormatProvider,Gu.Units.SpecificVolume@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificVolume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificVolume"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificVolume"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.SpecificVolume@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificVolume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificVolume"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificVolume"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.SpecificVolume@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificVolume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificVolume"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificVolume"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.SpecificVolume"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.From(System.Double,Gu.Units.SpecificVolumeUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.FromCubicMetresPerKilogram(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
            <param name="cubicMetresPerKilogram">The value in <see cref="F:Gu.Units.SpecificVolumeUnit.CubicMetresPerKilogram"/></param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.FromCubicMetresPerGram(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
            <param name="cubicMetresPerGram">The value in m³/g.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.FromCubicCentimetresPerGram(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.SpecificVolume"/>.
            </summary>
            <param name="cubicCentimetresPerGram">The value in cm³/g.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.GetValue(Gu.Units.SpecificVolumeUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.SpecificVolume.SiValue"/> and <see cref="P:Gu.Units.SpecificVolume.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.SpecificVolume.SiValue"/> and <see cref="P:Gu.Units.SpecificVolume.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m³/kg\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m³/kg\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m³/kg</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m³/kg</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.SpecificVolume"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(Gu.Units.SpecificVolumeUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(Gu.Units.SpecificVolumeUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(Gu.Units.SpecificVolumeUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(Gu.Units.SpecificVolumeUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(System.String,Gu.Units.SpecificVolumeUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(System.String,Gu.Units.SpecificVolumeUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(System.String,Gu.Units.SpecificVolumeUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ToString(System.String,Gu.Units.SpecificVolumeUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.CompareTo(Gu.Units.SpecificVolume)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.SpecificVolume"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.SpecificVolume"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.SpecificVolume"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.Equals(Gu.Units.SpecificVolume)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SpecificVolume"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same SpecificVolume as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.SpecificVolume"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.Equals(Gu.Units.SpecificVolume,Gu.Units.SpecificVolume)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SpecificVolume"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same SpecificVolume as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.SpecificVolume"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SpecificVolume"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.SpecificVolume"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.SpecificVolume.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.SpecificVolume.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.SpecificVolumeTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.SpecificVolume'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.SpecificVolumeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificVolumeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificVolumeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificVolumeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SpecificVolumeUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.SpecificVolume"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificVolumeUnit.CubicMetresPerKilogram">
            <summary>
            The CubicMetresPerKilogram unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificVolumeUnit.CubicMetresPerGram">
            <summary>
            The CubicMetresPerGram unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificVolumeUnit.CubicCentimetresPerGram">
            <summary>
            The CubicCentimetresPerGram unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpecificVolumeUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.SpecificVolumeUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.SpecificVolumeUnit"/> struct.
            </summary>
            <param name="toCubicMetresPerKilogram">The conversion to <see cref="F:Gu.Units.SpecificVolumeUnit.CubicMetresPerKilogram"/></param>
            <param name="fromCubicMetresPerKilogram">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.SpecificVolumeUnit.CubicMetresPerKilogram"/></param>
        </member>
        <member name="P:Gu.Units.SpecificVolumeUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.SpecificVolumeUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificVolumeUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.SpecificVolumeUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SpecificVolumeUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.op_Multiply(System.Double,Gu.Units.SpecificVolumeUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificVolume"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.op_Equality(Gu.Units.SpecificVolumeUnit,Gu.Units.SpecificVolumeUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpecificVolumeUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolumeUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolumeUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.op_Inequality(Gu.Units.SpecificVolumeUnit,Gu.Units.SpecificVolumeUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpecificVolumeUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpecificVolumeUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpecificVolumeUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.SpecificVolumeUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpecificVolumeUnit"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.TryParse(System.String,Gu.Units.SpecificVolumeUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpecificVolumeUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpecificVolumeUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpecificVolumeUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpecificVolumeUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to CubicMetresPerKilogram.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from cubicMetresPerKilogram.
            </summary>
            <param name="cubicMetresPerKilogram">The value in CubicMetresPerKilogram</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new SpecificVolume(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.GetScalarValue(Gu.Units.SpecificVolume)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in CubicMetresPerKilogram
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.Equals(Gu.Units.SpecificVolumeUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SpecificVolumeUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.SpecificVolumeUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same SpecificVolumeUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SpecificVolumeUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.SpecificVolumeUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpecificVolumeUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Speed">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Speed"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Speed.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.SpeedUnit.MetresPerSecond"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Speed.metresPerSecond">
            <summary>
            The quantity in <see cref="F:Gu.Units.SpeedUnit.MetresPerSecond"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Speed.#ctor(System.Double,Gu.Units.SpeedUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Speed"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.SpeedUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Speed.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.SpeedUnit.MetresPerSecond"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.SpeedUnit"/> for the <see cref="P:Gu.Units.Speed.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Speed.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.MetresPerSecond">
            <summary>
            Gets the quantity in metresPerSecond".
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.KilometresPerHour">
            <summary>
            Gets the quantity in KilometresPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.CentimetresPerMinute">
            <summary>
            Gets the quantity in CentimetresPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.MetresPerMinute">
            <summary>
            Gets the quantity in MetresPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.MetresPerHour">
            <summary>
            Gets the quantity in MetresPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.MillimetresPerHour">
            <summary>
            Gets the quantity in MillimetresPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.CentimetresPerHour">
            <summary>
            Gets the quantity in CentimetresPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.MillimetresPerMinute">
            <summary>
            Gets the quantity in MillimetresPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.MillimetresPerSecond">
            <summary>
            Gets the quantity in MillimetresPerSecond
            </summary>
        </member>
        <member name="P:Gu.Units.Speed.CentimetresPerSecond">
            <summary>
            Gets the quantity in CentimetresPerSecond
            </summary>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.Mass)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Division(Gu.Units.Speed,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Division(Gu.Units.Speed,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.Area)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.Force)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Division(Gu.Units.Speed,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Division(Gu.Units.Speed,Gu.Units.Acceleration)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.Momentum)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Division(Gu.Units.Speed,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,Gu.Units.MassFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Division(Gu.Units.Speed,Gu.Units.KinematicViscosity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Division(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Equality(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Speed"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Speed"/>.</param>
        </member>
        <member name="M:Gu.Units.Speed.op_Inequality(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Speed"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Speed"/>.</param>
        </member>
        <member name="M:Gu.Units.Speed.op_LessThan(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Speed"/> is less than another specified <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Speed"/>.</param>
        </member>
        <member name="M:Gu.Units.Speed.op_GreaterThan(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Speed"/> is greater than another specified <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Speed"/>.</param>
        </member>
        <member name="M:Gu.Units.Speed.op_LessThanOrEqual(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Speed"/> is less than or equal to another specified <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Speed"/>.</param>
        </member>
        <member name="M:Gu.Units.Speed.op_GreaterThanOrEqual(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Speed"/> is greater than or equal to another specified <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Speed"/>.</param>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(System.Double,Gu.Units.Speed)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Speed"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Speed"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Speed"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Multiply(Gu.Units.Speed,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Speed"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Speed"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Division(Gu.Units.Speed,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Speed"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Speed"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Speed.op_Addition(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Speed"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Speed"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Speed"/>.</param>
        </member>
        <member name="M:Gu.Units.Speed.op_Subtraction(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Subtracts an Speed from another Speed and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Speed"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Speed"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Speed"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Speed.op_UnaryNegation(Gu.Units.Speed)">
            <summary>
            Returns an <see cref="T:Gu.Units.Speed"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Speed"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="speed">An instance of <see cref="T:Gu.Units.Speed"/></param>
        </member>
        <member name="M:Gu.Units.Speed.op_UnaryPlus(Gu.Units.Speed)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <returns>
            Returns <paramref name="speed"/>.
            </returns>
            <param name="speed">An instance of <see cref="T:Gu.Units.Speed"/></param>
        </member>
        <member name="M:Gu.Units.Speed.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Speed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Speed"/></param>
            <returns>The <see cref="T:Gu.Units.Speed"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Speed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Speed"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Speed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Speed"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Speed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Speed"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.TryParse(System.String,Gu.Units.Speed@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Speed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Speed"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Speed"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Speed"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.TryParse(System.String,System.IFormatProvider,Gu.Units.Speed@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Speed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Speed"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Speed"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Speed"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Speed@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Speed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Speed"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Speed"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Speed"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Speed@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Speed"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Speed"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Speed"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Speed"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Speed"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.From(System.Double,Gu.Units.SpeedUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromMetresPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="metresPerSecond">The value in <see cref="F:Gu.Units.SpeedUnit.MetresPerSecond"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromKilometresPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="kilometresPerHour">The value in km/h.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromCentimetresPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="centimetresPerMinute">The value in cm/min.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromMetresPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="metresPerMinute">The value in m/min.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromMetresPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="metresPerHour">The value in m/h.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromMillimetresPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="millimetresPerHour">The value in mm/h.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromCentimetresPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="centimetresPerHour">The value in cm/h.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromMillimetresPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="millimetresPerMinute">The value in mm/min.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromMillimetresPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="millimetresPerSecond">The value in mm/s.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.FromCentimetresPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Speed"/>.
            </summary>
            <param name="centimetresPerSecond">The value in cm/s.</param>
            <returns>An instance of <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.GetValue(Gu.Units.SpeedUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Speed.SiValue"/> and <see cref="P:Gu.Units.Speed.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Speed.SiValue"/> and <see cref="P:Gu.Units.Speed.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/s\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m/s\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m/s</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m/s</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Speed"/></returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(Gu.Units.SpeedUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(Gu.Units.SpeedUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(Gu.Units.SpeedUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(Gu.Units.SpeedUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(System.String,Gu.Units.SpeedUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(System.String,Gu.Units.SpeedUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(System.String,Gu.Units.SpeedUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Speed.ToString(System.String,Gu.Units.SpeedUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Speed.CompareTo(Gu.Units.Speed)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Speed"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Speed"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Speed"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Speed.Equals(Gu.Units.Speed)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Speed"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Speed as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Speed"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Speed.Equals(Gu.Units.Speed,Gu.Units.Speed)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Speed"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Speed as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Speed"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Speed.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Speed"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Speed"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Speed.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Speed.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Speed.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Speed.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.SpeedTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Speed'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.SpeedTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpeedTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpeedTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpeedTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SpeedUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Speed"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.MetresPerSecond">
            <summary>
            The MetresPerSecond unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.KilometresPerHour">
            <summary>
            The KilometresPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.CentimetresPerMinute">
            <summary>
            The CentimetresPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.MetresPerMinute">
            <summary>
            The MetresPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.MetresPerHour">
            <summary>
            The MetresPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.MillimetresPerHour">
            <summary>
            The MillimetresPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.CentimetresPerHour">
            <summary>
            The CentimetresPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.MillimetresPerMinute">
            <summary>
            The MillimetresPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.MillimetresPerSecond">
            <summary>
            The MillimetresPerSecond unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.CentimetresPerSecond">
            <summary>
            The CentimetresPerSecond unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.SpeedUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.SpeedUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.SpeedUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.SpeedUnit"/> struct.
            </summary>
            <param name="toMetresPerSecond">The conversion to <see cref="F:Gu.Units.SpeedUnit.MetresPerSecond"/></param>
            <param name="fromMetresPerSecond">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.SpeedUnit.MetresPerSecond"/></param>
        </member>
        <member name="P:Gu.Units.SpeedUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.SpeedUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.SpeedUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.SpeedUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.SpeedUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpeedUnit.op_Multiply(System.Double,Gu.Units.SpeedUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.op_Equality(Gu.Units.SpeedUnit,Gu.Units.SpeedUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpeedUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpeedUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpeedUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.SpeedUnit.op_Inequality(Gu.Units.SpeedUnit,Gu.Units.SpeedUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.SpeedUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.SpeedUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.SpeedUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.SpeedUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.SpeedUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.SpeedUnit"/></returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.TryParse(System.String,Gu.Units.SpeedUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.SpeedUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.SpeedUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.SpeedUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.SpeedUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to MetresPerSecond.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from metresPerSecond.
            </summary>
            <param name="metresPerSecond">The value in MetresPerSecond</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Speed(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.GetScalarValue(Gu.Units.Speed)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in MetresPerSecond
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpeedUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.Equals(Gu.Units.SpeedUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.SpeedUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.SpeedUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same SpeedUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.SpeedUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpeedUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SpeedUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.SpeedUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.SpeedUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpeedUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpeedUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.SpeedUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Stiffness">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Stiffness.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.StiffnessUnit.NewtonsPerMetre"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Stiffness.newtonsPerMetre">
            <summary>
            The quantity in <see cref="F:Gu.Units.StiffnessUnit.NewtonsPerMetre"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Stiffness.#ctor(System.Double,Gu.Units.StiffnessUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Stiffness"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.StiffnessUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Stiffness.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.StiffnessUnit.NewtonsPerMetre"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.StiffnessUnit"/> for the <see cref="P:Gu.Units.Stiffness.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Stiffness.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.NewtonsPerMetre">
            <summary>
            Gets the quantity in newtonsPerMetre".
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.NewtonsPerNanometre">
            <summary>
            Gets the quantity in NewtonsPerNanometre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.NewtonsPerMicrometre">
            <summary>
            Gets the quantity in NewtonsPerMicrometre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.NewtonsPerMillimetre">
            <summary>
            Gets the quantity in NewtonsPerMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.KilonewtonsPerNanometre">
            <summary>
            Gets the quantity in KilonewtonsPerNanometre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.KilonewtonsPerMicrometre">
            <summary>
            Gets the quantity in KilonewtonsPerMicrometre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.KilonewtonsPerMillimetre">
            <summary>
            Gets the quantity in KilonewtonsPerMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.MeganewtonsPerNanometre">
            <summary>
            Gets the quantity in MeganewtonsPerNanometre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.MeganewtonsPerMicrometre">
            <summary>
            Gets the quantity in MeganewtonsPerMicrometre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.MeganewtonsPerMillimetre">
            <summary>
            Gets the quantity in MeganewtonsPerMillimetre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.GiganewtonsPerMicrometre">
            <summary>
            Gets the quantity in GiganewtonsPerMicrometre
            </summary>
        </member>
        <member name="P:Gu.Units.Stiffness.GiganewtonsPerMillimetre">
            <summary>
            Gets the quantity in GiganewtonsPerMillimetre
            </summary>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Multiply(Gu.Units.Stiffness,Gu.Units.Length)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Multiply(Gu.Units.Stiffness,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.Current)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFieldStrength"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Multiply(Gu.Units.Stiffness,Gu.Units.Area)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.Force)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.Pressure)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.SpecificEnergy)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AreaDensity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Multiply(Gu.Units.Stiffness,Gu.Units.LengthPerUnitless)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ForcePerUnitless"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.MagneticFieldStrength)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Multiply(Gu.Units.Stiffness,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.AreaDensity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificEnergy"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.MassFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Multiply(Gu.Units.Stiffness,Gu.Units.KinematicViscosity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(System.Double,Gu.Units.Stiffness)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The Flexibility that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Equality(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Stiffness"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Inequality(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Stiffness"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.op_LessThan(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Stiffness"/> is less than another specified <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.op_GreaterThan(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Stiffness"/> is greater than another specified <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.op_LessThanOrEqual(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Stiffness"/> is less than or equal to another specified <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.op_GreaterThanOrEqual(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Stiffness"/> is greater than or equal to another specified <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Multiply(System.Double,Gu.Units.Stiffness)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Stiffness"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Stiffness"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Multiply(Gu.Units.Stiffness,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Stiffness"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Stiffness"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Division(Gu.Units.Stiffness,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Stiffness"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Stiffness"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Addition(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Stiffness"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Stiffness"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Stiffness"/>.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.op_Subtraction(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Subtracts an Stiffness from another Stiffness and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Stiffness"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Stiffness"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Stiffness"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Stiffness.op_UnaryNegation(Gu.Units.Stiffness)">
            <summary>
            Returns an <see cref="T:Gu.Units.Stiffness"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Stiffness"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="stiffness">An instance of <see cref="T:Gu.Units.Stiffness"/></param>
        </member>
        <member name="M:Gu.Units.Stiffness.op_UnaryPlus(Gu.Units.Stiffness)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <returns>
            Returns <paramref name="stiffness"/>.
            </returns>
            <param name="stiffness">An instance of <see cref="T:Gu.Units.Stiffness"/></param>
        </member>
        <member name="M:Gu.Units.Stiffness.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Stiffness"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Stiffness"/></param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Stiffness"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Stiffness"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Stiffness"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.TryParse(System.String,Gu.Units.Stiffness@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Stiffness"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Stiffness"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Stiffness"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.TryParse(System.String,System.IFormatProvider,Gu.Units.Stiffness@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Stiffness"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Stiffness"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Stiffness"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Stiffness@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Stiffness"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Stiffness"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Stiffness"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Stiffness@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Stiffness"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Stiffness"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Stiffness"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Stiffness"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Stiffness"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.From(System.Double,Gu.Units.StiffnessUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromNewtonsPerMetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="newtonsPerMetre">The value in <see cref="F:Gu.Units.StiffnessUnit.NewtonsPerMetre"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromNewtonsPerNanometre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="newtonsPerNanometre">The value in N/nm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromNewtonsPerMicrometre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="newtonsPerMicrometre">The value in N/μm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromNewtonsPerMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="newtonsPerMillimetre">The value in N/mm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromKilonewtonsPerNanometre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="kilonewtonsPerNanometre">The value in kN/nm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromKilonewtonsPerMicrometre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="kilonewtonsPerMicrometre">The value in kN/μm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromKilonewtonsPerMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="kilonewtonsPerMillimetre">The value in kN/mm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromMeganewtonsPerNanometre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="meganewtonsPerNanometre">The value in MN/nm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromMeganewtonsPerMicrometre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="meganewtonsPerMicrometre">The value in MN/μm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromMeganewtonsPerMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="meganewtonsPerMillimetre">The value in MN/mm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromGiganewtonsPerMicrometre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="giganewtonsPerMicrometre">The value in GN/μm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.FromGiganewtonsPerMillimetre(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Stiffness"/>.
            </summary>
            <param name="giganewtonsPerMillimetre">The value in GN/mm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.GetValue(Gu.Units.StiffnessUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Stiffness.SiValue"/> and <see cref="P:Gu.Units.Stiffness.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Stiffness.SiValue"/> and <see cref="P:Gu.Units.Stiffness.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N/m\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N/m\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex N/m</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex N/m</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Stiffness"/></returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(Gu.Units.StiffnessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(Gu.Units.StiffnessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(Gu.Units.StiffnessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(Gu.Units.StiffnessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(System.String,Gu.Units.StiffnessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(System.String,Gu.Units.StiffnessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(System.String,Gu.Units.StiffnessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ToString(System.String,Gu.Units.StiffnessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.CompareTo(Gu.Units.Stiffness)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Stiffness"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Stiffness"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Stiffness"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.Equals(Gu.Units.Stiffness)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Stiffness"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Stiffness as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Stiffness"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.Equals(Gu.Units.Stiffness,Gu.Units.Stiffness)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Stiffness"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Stiffness as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Stiffness"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Stiffness.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Stiffness"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Stiffness"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Stiffness.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Stiffness.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Stiffness.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Stiffness.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.StiffnessTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Stiffness'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.StiffnessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.StiffnessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.StiffnessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.StiffnessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.StiffnessUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Stiffness"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.NewtonsPerMetre">
            <summary>
            The NewtonsPerMetre unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.NewtonsPerNanometre">
            <summary>
            The NewtonsPerNanometre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.NewtonsPerMicrometre">
            <summary>
            The NewtonsPerMicrometre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.NewtonsPerMillimetre">
            <summary>
            The NewtonsPerMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.KilonewtonsPerNanometre">
            <summary>
            The KilonewtonsPerNanometre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.KilonewtonsPerMicrometre">
            <summary>
            The KilonewtonsPerMicrometre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.KilonewtonsPerMillimetre">
            <summary>
            The KilonewtonsPerMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.MeganewtonsPerNanometre">
            <summary>
            The MeganewtonsPerNanometre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.MeganewtonsPerMicrometre">
            <summary>
            The MeganewtonsPerMicrometre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.MeganewtonsPerMillimetre">
            <summary>
            The MeganewtonsPerMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.GiganewtonsPerMicrometre">
            <summary>
            The GiganewtonsPerMicrometre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.GiganewtonsPerMillimetre">
            <summary>
            The GiganewtonsPerMillimetre unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.StiffnessUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.StiffnessUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.StiffnessUnit"/> struct.
            </summary>
            <param name="toNewtonsPerMetre">The conversion to <see cref="F:Gu.Units.StiffnessUnit.NewtonsPerMetre"/></param>
            <param name="fromNewtonsPerMetre">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.StiffnessUnit.NewtonsPerMetre"/></param>
        </member>
        <member name="P:Gu.Units.StiffnessUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.StiffnessUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.StiffnessUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.StiffnessUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.StiffnessUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.StiffnessUnit.op_Multiply(System.Double,Gu.Units.StiffnessUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.op_Equality(Gu.Units.StiffnessUnit,Gu.Units.StiffnessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.StiffnessUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.StiffnessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.StiffnessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.op_Inequality(Gu.Units.StiffnessUnit,Gu.Units.StiffnessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.StiffnessUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.StiffnessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.StiffnessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.StiffnessUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.StiffnessUnit"/></returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.TryParse(System.String,Gu.Units.StiffnessUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.StiffnessUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.StiffnessUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.StiffnessUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.StiffnessUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to NewtonsPerMetre.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from newtonsPerMetre.
            </summary>
            <param name="newtonsPerMetre">The value in NewtonsPerMetre</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Stiffness(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.GetScalarValue(Gu.Units.Stiffness)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in NewtonsPerMetre
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.StiffnessUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.Equals(Gu.Units.StiffnessUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.StiffnessUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.StiffnessUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same StiffnessUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.StiffnessUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.StiffnessUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.StiffnessUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.StiffnessUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.StiffnessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.StiffnessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.StiffnessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.StiffnessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.SuperScript">
            <summary>
            Helper class for working with superscript numbers.
            </summary>
        </member>
        <member name="F:Gu.Units.SuperScript.Plus">
            <summary>
            The superscript plus
            </summary>
        </member>
        <member name="F:Gu.Units.SuperScript.Minus">
            <summary>
            The superscript minus
            </summary>
        </member>
        <member name="M:Gu.Units.SuperScript.GetChar(System.Int32)">
            <summary>
            Gest the superscript for a number
            </summary>
            <param name="i">A value between -9 and +9</param>
            <returns>The superscript char for <paramref name="i"/></returns>
        </member>
        <member name="M:Gu.Units.SuperScript.GetString(System.Int32)">
            <summary>
            Gest the superscript for a number
            </summary>
            <param name="i">A value between -9 and +9</param>
            <returns>The superscript for <paramref name="i"/></returns>
        </member>
        <member name="M:Gu.Units.SuperScript.GetDigit(System.Char)">
            <summary>
            Gets the integer value for a superscript char
            </summary>
            <param name="c">A value in the range {⁰¹²³⁴⁵⁶⁷⁸⁹}</param>
            <returns>The integer value for <paramref name="c"/></returns>
        </member>
        <member name="T:Gu.Units.SymbolFormat">
            <summary>
            Specifies how units are formatted
            </summary>
        </member>
        <member name="F:Gu.Units.SymbolFormat.Default">
            <summary>
            The default format
            </summary>
        </member>
        <member name="F:Gu.Units.SymbolFormat.SignedHatPowers">
            <summary>
            Example: N*mm^-2
            </summary>
        </member>
        <member name="F:Gu.Units.SymbolFormat.FractionHatPowers">
            <summary>
            Example: N/mm^2
            </summary>
        </member>
        <member name="F:Gu.Units.SymbolFormat.SignedSuperScript">
            <summary>
            Example: N⋅mm⁻²
            </summary>
        </member>
        <member name="F:Gu.Units.SymbolFormat.FractionSuperScript">
            <summary>
            Example: N/mm²
            </summary>
        </member>
        <member name="T:Gu.Units.Temperature">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Temperature"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Temperature.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.TemperatureUnit.Kelvin"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Temperature.kelvin">
            <summary>
            The quantity in <see cref="F:Gu.Units.TemperatureUnit.Kelvin"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Temperature.#ctor(System.Double,Gu.Units.TemperatureUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Temperature"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.TemperatureUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Temperature.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.TemperatureUnit.Kelvin"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Temperature.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.TemperatureUnit"/> for the <see cref="P:Gu.Units.Temperature.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Temperature.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Temperature.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Temperature.Kelvin">
            <summary>
            Gets the quantity in kelvin".
            </summary>
        </member>
        <member name="P:Gu.Units.Temperature.Celsius">
            <summary>
            Gets the quantity in Celsius
            </summary>
        </member>
        <member name="P:Gu.Units.Temperature.Fahrenheit">
            <summary>
            Gets the quantity in Fahrenheit
            </summary>
        </member>
        <member name="M:Gu.Units.Temperature.op_Division(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.op_Equality(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Temperature"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Temperature"/>.</param>
        </member>
        <member name="M:Gu.Units.Temperature.op_Inequality(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Temperature"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Temperature"/>.</param>
        </member>
        <member name="M:Gu.Units.Temperature.op_LessThan(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Temperature"/> is less than another specified <see cref="T:Gu.Units.Temperature"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Temperature"/>.</param>
        </member>
        <member name="M:Gu.Units.Temperature.op_GreaterThan(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Temperature"/> is greater than another specified <see cref="T:Gu.Units.Temperature"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Temperature"/>.</param>
        </member>
        <member name="M:Gu.Units.Temperature.op_LessThanOrEqual(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Temperature"/> is less than or equal to another specified <see cref="T:Gu.Units.Temperature"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Temperature"/>.</param>
        </member>
        <member name="M:Gu.Units.Temperature.op_GreaterThanOrEqual(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Temperature"/> is greater than or equal to another specified <see cref="T:Gu.Units.Temperature"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Temperature"/>.</param>
        </member>
        <member name="M:Gu.Units.Temperature.op_Multiply(System.Double,Gu.Units.Temperature)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Temperature"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Temperature"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Temperature"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.op_Multiply(Gu.Units.Temperature,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Temperature"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Temperature"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.op_Division(Gu.Units.Temperature,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Temperature"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Temperature"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.op_Addition(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Temperature"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Temperature"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Temperature"/>.</param>
        </member>
        <member name="M:Gu.Units.Temperature.op_Subtraction(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Subtracts an Temperature from another Temperature and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Temperature"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Temperature"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Temperature"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Temperature.op_UnaryNegation(Gu.Units.Temperature)">
            <summary>
            Returns an <see cref="T:Gu.Units.Temperature"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Temperature"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="temperature">An instance of <see cref="T:Gu.Units.Temperature"/></param>
        </member>
        <member name="M:Gu.Units.Temperature.op_UnaryPlus(Gu.Units.Temperature)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Temperature"/>.
            </summary>
            <returns>
            Returns <paramref name="temperature"/>.
            </returns>
            <param name="temperature">An instance of <see cref="T:Gu.Units.Temperature"/></param>
        </member>
        <member name="M:Gu.Units.Temperature.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Temperature"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Temperature"/></param>
            <returns>The <see cref="T:Gu.Units.Temperature"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Temperature"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Temperature"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Temperature"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Temperature"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Temperature"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Temperature"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Temperature"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Temperature"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Temperature"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.TryParse(System.String,Gu.Units.Temperature@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Temperature"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Temperature"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Temperature"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Temperature"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.TryParse(System.String,System.IFormatProvider,Gu.Units.Temperature@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Temperature"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Temperature"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Temperature"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Temperature"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Temperature@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Temperature"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Temperature"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Temperature"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Temperature"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Temperature@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Temperature"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Temperature"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Temperature"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Temperature"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Temperature"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.From(System.Double,Gu.Units.TemperatureUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Temperature"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.FromKelvin(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Temperature"/>.
            </summary>
            <param name="kelvin">The value in <see cref="F:Gu.Units.TemperatureUnit.Kelvin"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.FromCelsius(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Temperature"/>.
            </summary>
            <param name="celsius">The value in °C.</param>
            <returns>An instance of <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.FromFahrenheit(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Temperature"/>.
            </summary>
            <param name="fahrenheit">The value in °F.</param>
            <returns>An instance of <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.GetValue(Gu.Units.TemperatureUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Temperature.SiValue"/> and <see cref="P:Gu.Units.Temperature.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Temperature.SiValue"/> and <see cref="P:Gu.Units.Temperature.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 K\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 K\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex K</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex K</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Temperature"/></returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(Gu.Units.TemperatureUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(Gu.Units.TemperatureUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(Gu.Units.TemperatureUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(Gu.Units.TemperatureUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(System.String,Gu.Units.TemperatureUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(System.String,Gu.Units.TemperatureUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(System.String,Gu.Units.TemperatureUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.ToString(System.String,Gu.Units.TemperatureUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.CompareTo(Gu.Units.Temperature)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Temperature"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Temperature"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Temperature"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Temperature.Equals(Gu.Units.Temperature)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Temperature"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Temperature as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Temperature"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Temperature.Equals(Gu.Units.Temperature,Gu.Units.Temperature)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Temperature"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Temperature as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Temperature"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Temperature.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Temperature"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Temperature"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Temperature.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Temperature.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Temperature.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Temperature.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.TemperatureTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Temperature'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.TemperatureTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TemperatureTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TemperatureTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TemperatureTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.TemperatureUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Temperature"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TemperatureUnit.Kelvin">
            <summary>
            The Kelvin unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TemperatureUnit.Celsius">
            <summary>
            The Celsius unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TemperatureUnit.Fahrenheit">
            <summary>
            The Fahrenheit unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TemperatureUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.TemperatureUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.TemperatureUnit"/> struct.
            </summary>
            <param name="toKelvin">The conversion to <see cref="F:Gu.Units.TemperatureUnit.Kelvin"/></param>
            <param name="fromKelvin">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.TemperatureUnit.Kelvin"/></param>
        </member>
        <member name="P:Gu.Units.TemperatureUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.TemperatureUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.TemperatureUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.TemperatureUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.TemperatureUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TemperatureUnit.op_Multiply(System.Double,Gu.Units.TemperatureUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Temperature"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.op_Equality(Gu.Units.TemperatureUnit,Gu.Units.TemperatureUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.TemperatureUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.TemperatureUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.TemperatureUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.op_Inequality(Gu.Units.TemperatureUnit,Gu.Units.TemperatureUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.TemperatureUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.TemperatureUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.TemperatureUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.TemperatureUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.TemperatureUnit"/></returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.TryParse(System.String,Gu.Units.TemperatureUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.TemperatureUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.TemperatureUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.TemperatureUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.TemperatureUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Kelvin.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from kelvin.
            </summary>
            <param name="kelvin">The value in Kelvin</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Temperature(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.GetScalarValue(Gu.Units.Temperature)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Kelvin
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TemperatureUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.Equals(Gu.Units.TemperatureUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.TemperatureUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.TemperatureUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same TemperatureUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.TemperatureUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TemperatureUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.TemperatureUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.TemperatureUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.TemperatureUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TemperatureUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TemperatureUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TemperatureUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Time">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Time"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Time.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.TimeUnit.Seconds"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Time.seconds">
            <summary>
            The quantity in <see cref="F:Gu.Units.TimeUnit.Seconds"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Time.#ctor(System.Double,Gu.Units.TimeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Time"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.TimeUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Time.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.TimeUnit.Seconds"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Time.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.TimeUnit"/> for the <see cref="P:Gu.Units.Time.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Time.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Time.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Time.Seconds">
            <summary>
            Gets the quantity in seconds".
            </summary>
        </member>
        <member name="P:Gu.Units.Time.Hours">
            <summary>
            Gets the quantity in Hours
            </summary>
        </member>
        <member name="P:Gu.Units.Time.Minutes">
            <summary>
            Gets the quantity in Minutes
            </summary>
        </member>
        <member name="P:Gu.Units.Time.Days">
            <summary>
            Gets the quantity in Days
            </summary>
        </member>
        <member name="P:Gu.Units.Time.Nanoseconds">
            <summary>
            Gets the quantity in Nanoseconds
            </summary>
        </member>
        <member name="P:Gu.Units.Time.Microseconds">
            <summary>
            Gets the quantity in Microseconds
            </summary>
        </member>
        <member name="P:Gu.Units.Time.Milliseconds">
            <summary>
            Gets the quantity in Milliseconds
            </summary>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.Current)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.Force)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.Power)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.AngularSpeed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.Acceleration)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.Stiffness)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.VolumetricFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.Voltage)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.Resistance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Division(Gu.Units.Time,Gu.Units.Resistance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.SpecificEnergy)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Division(Gu.Units.Time,Gu.Units.Inductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricalConductance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Division(Gu.Units.Time,Gu.Units.Capacitance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Division(Gu.Units.Time,Gu.Units.Flexibility)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.AngularAcceleration)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularSpeed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.AngularJerk)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AngularAcceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.Jerk)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.ElectricalConductance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Capacitance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Division(Gu.Units.Time,Gu.Units.ElectricalConductance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Inductance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.CatalyticActivity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.AmountOfSubstance"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.MassFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Division(Gu.Units.Time,Gu.Units.MassFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,Gu.Units.KinematicViscosity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Division(System.Double,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The Frequency that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Division(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Equality(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Time"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Time"/>.</param>
        </member>
        <member name="M:Gu.Units.Time.op_Inequality(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Time"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Time"/>.</param>
        </member>
        <member name="M:Gu.Units.Time.op_LessThan(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Time"/> is less than another specified <see cref="T:Gu.Units.Time"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Time"/>.</param>
        </member>
        <member name="M:Gu.Units.Time.op_GreaterThan(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Time"/> is greater than another specified <see cref="T:Gu.Units.Time"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Time"/>.</param>
        </member>
        <member name="M:Gu.Units.Time.op_LessThanOrEqual(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Time"/> is less than or equal to another specified <see cref="T:Gu.Units.Time"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Time"/>.</param>
        </member>
        <member name="M:Gu.Units.Time.op_GreaterThanOrEqual(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Time"/> is greater than or equal to another specified <see cref="T:Gu.Units.Time"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Time"/>.</param>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(System.Double,Gu.Units.Time)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Time"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Time"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Time"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Multiply(Gu.Units.Time,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Time"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Time"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Division(Gu.Units.Time,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Time"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Time"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Time.op_Addition(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Time"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Time"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Time"/>.</param>
        </member>
        <member name="M:Gu.Units.Time.op_Subtraction(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Subtracts an Time from another Time and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Time"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Time"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Time"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Time.op_UnaryNegation(Gu.Units.Time)">
            <summary>
            Returns an <see cref="T:Gu.Units.Time"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Time"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="time">An instance of <see cref="T:Gu.Units.Time"/></param>
        </member>
        <member name="M:Gu.Units.Time.op_UnaryPlus(Gu.Units.Time)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Time"/>.
            </summary>
            <returns>
            Returns <paramref name="time"/>.
            </returns>
            <param name="time">An instance of <see cref="T:Gu.Units.Time"/></param>
        </member>
        <member name="M:Gu.Units.Time.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Time"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Time"/></param>
            <returns>The <see cref="T:Gu.Units.Time"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Time.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Time"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Time"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Time"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Time.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Time"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Time"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Time"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Time.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Time"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Time"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Time"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Time.TryParse(System.String,Gu.Units.Time@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Time"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Time"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Time"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Time"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Time.TryParse(System.String,System.IFormatProvider,Gu.Units.Time@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Time"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Time"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Time"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Time"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Time.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Time@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Time"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Time"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Time"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Time"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Time.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Time@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Time"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Time"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Time"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Time"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Time.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Time"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.From(System.Double,Gu.Units.TimeUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Time"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.FromSeconds(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Time"/>.
            </summary>
            <param name="seconds">The value in <see cref="F:Gu.Units.TimeUnit.Seconds"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.FromHours(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Time"/>.
            </summary>
            <param name="hours">The value in h.</param>
            <returns>An instance of <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.FromMinutes(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Time"/>.
            </summary>
            <param name="minutes">The value in min.</param>
            <returns>An instance of <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.FromDays(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Time"/>.
            </summary>
            <param name="days">The value in d.</param>
            <returns>An instance of <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.FromNanoseconds(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Time"/>.
            </summary>
            <param name="nanoseconds">The value in ns.</param>
            <returns>An instance of <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.FromMicroseconds(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Time"/>.
            </summary>
            <param name="microseconds">The value in μs.</param>
            <returns>An instance of <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.FromMilliseconds(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Time"/>.
            </summary>
            <param name="milliseconds">The value in ms.</param>
            <returns>An instance of <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.GetValue(Gu.Units.TimeUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Time.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Time.SiValue"/> and <see cref="P:Gu.Units.Time.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Time.SiValue"/> and <see cref="P:Gu.Units.Time.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 s\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 s\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex s</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex s</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Time"/></returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(Gu.Units.TimeUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(Gu.Units.TimeUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(Gu.Units.TimeUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(Gu.Units.TimeUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(System.String,Gu.Units.TimeUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(System.String,Gu.Units.TimeUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(System.String,Gu.Units.TimeUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Time.ToString(System.String,Gu.Units.TimeUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Time.CompareTo(Gu.Units.Time)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Time"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Time"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Time"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Time.Equals(Gu.Units.Time)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Time"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Time as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Time"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Time.Equals(Gu.Units.Time,Gu.Units.Time)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Time"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Time as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Time"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Time.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Time"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Time"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Time.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Time.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Time.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Time.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.TimeTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Time'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.TimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.TimeUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Time"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TimeUnit.Seconds">
            <summary>
            The Seconds unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TimeUnit.Hours">
            <summary>
            The Hours unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TimeUnit.Minutes">
            <summary>
            The Minutes unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TimeUnit.Days">
            <summary>
            The Days unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TimeUnit.Nanoseconds">
            <summary>
            The Nanoseconds unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TimeUnit.Microseconds">
            <summary>
            The Microseconds unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TimeUnit.Milliseconds">
            <summary>
            The Milliseconds unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TimeUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.TimeUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.TimeUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.TimeUnit"/> struct.
            </summary>
            <param name="toSeconds">The conversion to <see cref="F:Gu.Units.TimeUnit.Seconds"/></param>
            <param name="fromSeconds">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.TimeUnit.Seconds"/></param>
        </member>
        <member name="P:Gu.Units.TimeUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.TimeUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.TimeUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.TimeUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.TimeUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TimeUnit.op_Multiply(System.Double,Gu.Units.TimeUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.op_Equality(Gu.Units.TimeUnit,Gu.Units.TimeUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.TimeUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.TimeUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.TimeUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.TimeUnit.op_Inequality(Gu.Units.TimeUnit,Gu.Units.TimeUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.TimeUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.TimeUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.TimeUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.TimeUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.TimeUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.TimeUnit"/></returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.TryParse(System.String,Gu.Units.TimeUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.TimeUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.TimeUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.TimeUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.TimeUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Seconds.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from seconds.
            </summary>
            <param name="seconds">The value in Seconds</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Time(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.GetScalarValue(Gu.Units.Time)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Seconds
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TimeUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.Equals(Gu.Units.TimeUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.TimeUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.TimeUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same TimeUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.TimeUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TimeUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.TimeUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.TimeUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.TimeUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TimeUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TimeUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TimeUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Torque">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Torque"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Torque.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.TorqueUnit.NewtonMetres"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Torque.newtonMetres">
            <summary>
            The quantity in <see cref="F:Gu.Units.TorqueUnit.NewtonMetres"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Torque.#ctor(System.Double,Gu.Units.TorqueUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Torque"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.TorqueUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Torque.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.TorqueUnit.NewtonMetres"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Torque.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.TorqueUnit"/> for the <see cref="P:Gu.Units.Torque.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Torque.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Torque.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Torque.NewtonMetres">
            <summary>
            Gets the quantity in newtonMetres".
            </summary>
        </member>
        <member name="M:Gu.Units.Torque.op_Multiply(Gu.Units.Torque,Gu.Units.Angle)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Torque.op_Multiply(Gu.Units.Torque,Gu.Units.AngularSpeed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Torque.op_Division(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Torque.op_Equality(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Torque"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Torque"/>.</param>
        </member>
        <member name="M:Gu.Units.Torque.op_Inequality(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Torque"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Torque"/>.</param>
        </member>
        <member name="M:Gu.Units.Torque.op_LessThan(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Torque"/> is less than another specified <see cref="T:Gu.Units.Torque"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Torque"/>.</param>
        </member>
        <member name="M:Gu.Units.Torque.op_GreaterThan(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Torque"/> is greater than another specified <see cref="T:Gu.Units.Torque"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Torque"/>.</param>
        </member>
        <member name="M:Gu.Units.Torque.op_LessThanOrEqual(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Torque"/> is less than or equal to another specified <see cref="T:Gu.Units.Torque"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Torque"/>.</param>
        </member>
        <member name="M:Gu.Units.Torque.op_GreaterThanOrEqual(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Torque"/> is greater than or equal to another specified <see cref="T:Gu.Units.Torque"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Torque"/>.</param>
        </member>
        <member name="M:Gu.Units.Torque.op_Multiply(System.Double,Gu.Units.Torque)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Torque"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Torque"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Torque"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Torque.op_Multiply(Gu.Units.Torque,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Torque"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Torque"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Torque.op_Division(Gu.Units.Torque,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Torque"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Torque"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Torque.op_Addition(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Torque"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Torque"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Torque"/>.</param>
        </member>
        <member name="M:Gu.Units.Torque.op_Subtraction(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Subtracts an Torque from another Torque and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Torque"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Torque"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Torque"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Torque.op_UnaryNegation(Gu.Units.Torque)">
            <summary>
            Returns an <see cref="T:Gu.Units.Torque"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Torque"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="torque">An instance of <see cref="T:Gu.Units.Torque"/></param>
        </member>
        <member name="M:Gu.Units.Torque.op_UnaryPlus(Gu.Units.Torque)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Torque"/>.
            </summary>
            <returns>
            Returns <paramref name="torque"/>.
            </returns>
            <param name="torque">An instance of <see cref="T:Gu.Units.Torque"/></param>
        </member>
        <member name="M:Gu.Units.Torque.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Torque"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Torque"/></param>
            <returns>The <see cref="T:Gu.Units.Torque"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Torque"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Torque"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Torque"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Torque"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Torque"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Torque"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Torque"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Torque"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Torque"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.TryParse(System.String,Gu.Units.Torque@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Torque"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Torque"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Torque"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Torque"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.TryParse(System.String,System.IFormatProvider,Gu.Units.Torque@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Torque"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Torque"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Torque"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Torque"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Torque@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Torque"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Torque"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Torque"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Torque"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Torque@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Torque"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Torque"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Torque"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Torque"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Torque"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Torque"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.From(System.Double,Gu.Units.TorqueUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Torque"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Torque"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.FromNewtonMetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Torque"/>.
            </summary>
            <param name="newtonMetres">The value in <see cref="F:Gu.Units.TorqueUnit.NewtonMetres"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Torque"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.GetValue(Gu.Units.TorqueUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Torque.SiValue"/> and <see cref="P:Gu.Units.Torque.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Torque"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Torque.SiValue"/> and <see cref="P:Gu.Units.Torque.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Torque"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N⋅m\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Torque"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 N⋅m\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Torque"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex N⋅m</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Torque"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex N⋅m</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Torque"/></returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(Gu.Units.TorqueUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(Gu.Units.TorqueUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(Gu.Units.TorqueUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(Gu.Units.TorqueUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(System.String,Gu.Units.TorqueUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(System.String,Gu.Units.TorqueUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(System.String,Gu.Units.TorqueUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Torque.ToString(System.String,Gu.Units.TorqueUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Torque.CompareTo(Gu.Units.Torque)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Torque"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Torque"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Torque"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Torque.Equals(Gu.Units.Torque)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Torque"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Torque as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Torque"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Torque.Equals(Gu.Units.Torque,Gu.Units.Torque)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Torque"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Torque as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Torque"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Torque.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Torque"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Torque"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Torque.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Torque.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Torque.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Torque.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.TorqueTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Torque'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.TorqueTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TorqueTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TorqueTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TorqueTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.TorqueUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Torque"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TorqueUnit.NewtonMetres">
            <summary>
            The NewtonMetres unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.TorqueUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.TorqueUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.TorqueUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.TorqueUnit"/> struct.
            </summary>
            <param name="toNewtonMetres">The conversion to <see cref="F:Gu.Units.TorqueUnit.NewtonMetres"/></param>
            <param name="fromNewtonMetres">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.TorqueUnit.NewtonMetres"/></param>
        </member>
        <member name="P:Gu.Units.TorqueUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.TorqueUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.TorqueUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.TorqueUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.TorqueUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TorqueUnit.op_Multiply(System.Double,Gu.Units.TorqueUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Torque"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.op_Equality(Gu.Units.TorqueUnit,Gu.Units.TorqueUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.TorqueUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.TorqueUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.TorqueUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.TorqueUnit.op_Inequality(Gu.Units.TorqueUnit,Gu.Units.TorqueUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.TorqueUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.TorqueUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.TorqueUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.TorqueUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.TorqueUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.TorqueUnit"/></returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.TryParse(System.String,Gu.Units.TorqueUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.TorqueUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.TorqueUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.TorqueUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.TorqueUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to NewtonMetres.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from newtonMetres.
            </summary>
            <param name="newtonMetres">The value in NewtonMetres</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Torque(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.GetScalarValue(Gu.Units.Torque)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in NewtonMetres
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TorqueUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.Equals(Gu.Units.TorqueUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.TorqueUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.TorqueUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same TorqueUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.TorqueUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TorqueUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.TorqueUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.TorqueUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.TorqueUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TorqueUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TorqueUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.TorqueUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Unitless">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Unitless"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Unitless.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.UnitlessUnit.Scalar"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Unitless.scalar">
            <summary>
            The quantity in <see cref="F:Gu.Units.UnitlessUnit.Scalar"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Unitless.#ctor(System.Double,Gu.Units.UnitlessUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Unitless"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.UnitlessUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Unitless.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.UnitlessUnit.Scalar"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Unitless.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.UnitlessUnit"/> for the <see cref="P:Gu.Units.Unitless.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Unitless.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Unitless.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Unitless.Scalar">
            <summary>
            Gets the quantity in scalar".
            </summary>
        </member>
        <member name="P:Gu.Units.Unitless.Promilles">
            <summary>
            Gets the quantity in Promilles
            </summary>
        </member>
        <member name="P:Gu.Units.Unitless.PartsPerMillion">
            <summary>
            Gets the quantity in PartsPerMillion
            </summary>
        </member>
        <member name="P:Gu.Units.Unitless.Percents">
            <summary>
            Gets the quantity in Percents
            </summary>
        </member>
        <member name="M:Gu.Units.Unitless.op_Multiply(Gu.Units.Unitless,Gu.Units.LengthPerUnitless)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.op_Multiply(Gu.Units.Unitless,Gu.Units.AnglePerUnitless)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Angle"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.op_Multiply(Gu.Units.Unitless,Gu.Units.ForcePerUnitless)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.op_Division(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.op_Equality(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Unitless"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Unitless"/>.</param>
        </member>
        <member name="M:Gu.Units.Unitless.op_Inequality(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Unitless"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Unitless"/>.</param>
        </member>
        <member name="M:Gu.Units.Unitless.op_LessThan(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Unitless"/> is less than another specified <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Unitless"/>.</param>
        </member>
        <member name="M:Gu.Units.Unitless.op_GreaterThan(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Unitless"/> is greater than another specified <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Unitless"/>.</param>
        </member>
        <member name="M:Gu.Units.Unitless.op_LessThanOrEqual(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Unitless"/> is less than or equal to another specified <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Unitless"/>.</param>
        </member>
        <member name="M:Gu.Units.Unitless.op_GreaterThanOrEqual(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Unitless"/> is greater than or equal to another specified <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Unitless"/>.</param>
        </member>
        <member name="M:Gu.Units.Unitless.op_Multiply(System.Double,Gu.Units.Unitless)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Unitless"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Unitless"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Unitless"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.op_Multiply(Gu.Units.Unitless,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Unitless"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Unitless"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.op_Division(Gu.Units.Unitless,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Unitless"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Unitless"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.op_Addition(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Unitless"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Unitless"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Unitless"/>.</param>
        </member>
        <member name="M:Gu.Units.Unitless.op_Subtraction(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Subtracts an Unitless from another Unitless and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Unitless"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Unitless"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Unitless"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Unitless.op_UnaryNegation(Gu.Units.Unitless)">
            <summary>
            Returns an <see cref="T:Gu.Units.Unitless"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Unitless"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="unitless">An instance of <see cref="T:Gu.Units.Unitless"/></param>
        </member>
        <member name="M:Gu.Units.Unitless.op_UnaryPlus(Gu.Units.Unitless)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <returns>
            Returns <paramref name="unitless"/>.
            </returns>
            <param name="unitless">An instance of <see cref="T:Gu.Units.Unitless"/></param>
        </member>
        <member name="M:Gu.Units.Unitless.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Unitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Unitless"/></param>
            <returns>The <see cref="T:Gu.Units.Unitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Unitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Unitless"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Unitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Unitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Unitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Unitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Unitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Unitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Unitless"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.TryParse(System.String,Gu.Units.Unitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Unitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Unitless"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Unitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Unitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.TryParse(System.String,System.IFormatProvider,Gu.Units.Unitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Unitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Unitless"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Unitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Unitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Unitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Unitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Unitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Unitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Unitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Unitless@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Unitless"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Unitless"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Unitless"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Unitless"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Unitless"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.From(System.Double,Gu.Units.UnitlessUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.FromScalar(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <param name="scalar">The value in <see cref="F:Gu.Units.UnitlessUnit.Scalar"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.FromPromilles(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <param name="promilles">The value in ‰.</param>
            <returns>An instance of <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.FromPartsPerMillion(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <param name="partsPerMillion">The value in ppm.</param>
            <returns>An instance of <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.FromPercents(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Unitless"/>.
            </summary>
            <param name="percents">The value in %.</param>
            <returns>An instance of <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.GetValue(Gu.Units.UnitlessUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Unitless.SiValue"/> and <see cref="P:Gu.Units.Unitless.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Unitless.SiValue"/> and <see cref="P:Gu.Units.Unitless.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 ul\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 ul\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex ul</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex ul</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Unitless"/></returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(Gu.Units.UnitlessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(Gu.Units.UnitlessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(Gu.Units.UnitlessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(Gu.Units.UnitlessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(System.String,Gu.Units.UnitlessUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(System.String,Gu.Units.UnitlessUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(System.String,Gu.Units.UnitlessUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.ToString(System.String,Gu.Units.UnitlessUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.CompareTo(Gu.Units.Unitless)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Unitless"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Unitless"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Unitless"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Unitless.Equals(Gu.Units.Unitless)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Unitless"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Unitless as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Unitless"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Unitless.Equals(Gu.Units.Unitless,Gu.Units.Unitless)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Unitless"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Unitless as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Unitless"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Unitless.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Unitless"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Unitless"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Unitless.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Unitless.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Unitless.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Unitless.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.UnitlessTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Unitless'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.UnitlessTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.UnitlessTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.UnitlessTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.UnitlessTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.UnitlessUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Unitless"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.UnitlessUnit.Scalar">
            <summary>
            The Scalar unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.UnitlessUnit.Promilles">
            <summary>
            The Promilles unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.UnitlessUnit.PartsPerMillion">
            <summary>
            The PartsPerMillion unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.UnitlessUnit.Percents">
            <summary>
            The Percents unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.UnitlessUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.UnitlessUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.UnitlessUnit"/> struct.
            </summary>
            <param name="toScalar">The conversion to <see cref="F:Gu.Units.UnitlessUnit.Scalar"/></param>
            <param name="fromScalar">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.UnitlessUnit.Scalar"/></param>
        </member>
        <member name="P:Gu.Units.UnitlessUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.UnitlessUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.UnitlessUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.UnitlessUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.UnitlessUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.UnitlessUnit.op_Multiply(System.Double,Gu.Units.UnitlessUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Unitless"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.op_Equality(Gu.Units.UnitlessUnit,Gu.Units.UnitlessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.UnitlessUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.UnitlessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.UnitlessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.op_Inequality(Gu.Units.UnitlessUnit,Gu.Units.UnitlessUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.UnitlessUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.UnitlessUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.UnitlessUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.UnitlessUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.UnitlessUnit"/></returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.TryParse(System.String,Gu.Units.UnitlessUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.UnitlessUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.UnitlessUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.UnitlessUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.UnitlessUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Scalar.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from scalar.
            </summary>
            <param name="scalar">The value in Scalar</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Unitless(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.GetScalarValue(Gu.Units.Unitless)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Scalar
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.UnitlessUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.Equals(Gu.Units.UnitlessUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.UnitlessUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.UnitlessUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same UnitlessUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.UnitlessUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.UnitlessUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.UnitlessUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.UnitlessUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.UnitlessUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.UnitlessUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.UnitlessUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.UnitlessUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Voltage">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Voltage"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Voltage.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.VoltageUnit.Volts"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Voltage.volts">
            <summary>
            The quantity in <see cref="F:Gu.Units.VoltageUnit.Volts"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Voltage.#ctor(System.Double,Gu.Units.VoltageUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Voltage"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.VoltageUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Voltage.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.VoltageUnit.Volts"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Voltage.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.VoltageUnit"/> for the <see cref="P:Gu.Units.Voltage.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Voltage.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Voltage.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Voltage.Volts">
            <summary>
            Gets the quantity in volts".
            </summary>
        </member>
        <member name="P:Gu.Units.Voltage.Millivolts">
            <summary>
            Gets the quantity in Millivolts
            </summary>
        </member>
        <member name="P:Gu.Units.Voltage.Kilovolts">
            <summary>
            Gets the quantity in Kilovolts
            </summary>
        </member>
        <member name="P:Gu.Units.Voltage.Megavolts">
            <summary>
            Gets the quantity in Megavolts
            </summary>
        </member>
        <member name="P:Gu.Units.Voltage.Microvolts">
            <summary>
            Gets the quantity in Microvolts
            </summary>
        </member>
        <member name="P:Gu.Units.Voltage.Nanovolts">
            <summary>
            Gets the quantity in Nanovolts
            </summary>
        </member>
        <member name="P:Gu.Units.Voltage.Gigavolts">
            <summary>
            Gets the quantity in Gigavolts
            </summary>
        </member>
        <member name="M:Gu.Units.Voltage.op_Multiply(Gu.Units.Voltage,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Multiply(Gu.Units.Voltage,Gu.Units.Current)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Division(Gu.Units.Voltage,Gu.Units.Current)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Division(Gu.Units.Voltage,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFlux"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Division(Gu.Units.Voltage,Gu.Units.Resistance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Multiply(Gu.Units.Voltage,Gu.Units.ElectricCharge)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Multiply(Gu.Units.Voltage,Gu.Units.Capacitance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.ElectricCharge"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Division(Gu.Units.Voltage,Gu.Units.MagneticFlux)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Multiply(Gu.Units.Voltage,Gu.Units.ElectricalConductance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Current"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Division(Gu.Units.Voltage,Gu.Units.MagneticFieldStrength)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Division(Gu.Units.Voltage,Gu.Units.KinematicViscosity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MagneticFieldStrength"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Division(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Equality(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Voltage"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Voltage"/>.</param>
        </member>
        <member name="M:Gu.Units.Voltage.op_Inequality(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Voltage"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Voltage"/>.</param>
        </member>
        <member name="M:Gu.Units.Voltage.op_LessThan(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Voltage"/> is less than another specified <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Voltage"/>.</param>
        </member>
        <member name="M:Gu.Units.Voltage.op_GreaterThan(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Voltage"/> is greater than another specified <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Voltage"/>.</param>
        </member>
        <member name="M:Gu.Units.Voltage.op_LessThanOrEqual(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Voltage"/> is less than or equal to another specified <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Voltage"/>.</param>
        </member>
        <member name="M:Gu.Units.Voltage.op_GreaterThanOrEqual(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Voltage"/> is greater than or equal to another specified <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Voltage"/>.</param>
        </member>
        <member name="M:Gu.Units.Voltage.op_Multiply(System.Double,Gu.Units.Voltage)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Voltage"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Voltage"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Voltage"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Multiply(Gu.Units.Voltage,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Voltage"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Voltage"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Division(Gu.Units.Voltage,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Voltage"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Voltage"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.op_Addition(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Voltage"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Voltage"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Voltage"/>.</param>
        </member>
        <member name="M:Gu.Units.Voltage.op_Subtraction(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Subtracts an Voltage from another Voltage and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Voltage"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Voltage"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Voltage"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Voltage.op_UnaryNegation(Gu.Units.Voltage)">
            <summary>
            Returns an <see cref="T:Gu.Units.Voltage"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Voltage"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="voltage">An instance of <see cref="T:Gu.Units.Voltage"/></param>
        </member>
        <member name="M:Gu.Units.Voltage.op_UnaryPlus(Gu.Units.Voltage)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <returns>
            Returns <paramref name="voltage"/>.
            </returns>
            <param name="voltage">An instance of <see cref="T:Gu.Units.Voltage"/></param>
        </member>
        <member name="M:Gu.Units.Voltage.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Voltage"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Voltage"/></param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Voltage"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Voltage"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Voltage"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Voltage"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Voltage"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Voltage"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.TryParse(System.String,Gu.Units.Voltage@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Voltage"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Voltage"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Voltage"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Voltage"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.TryParse(System.String,System.IFormatProvider,Gu.Units.Voltage@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Voltage"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Voltage"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Voltage"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Voltage"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Voltage@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Voltage"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Voltage"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Voltage"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Voltage"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Voltage@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Voltage"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Voltage"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Voltage"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Voltage"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Voltage"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.From(System.Double,Gu.Units.VoltageUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.FromVolts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <param name="volts">The value in <see cref="F:Gu.Units.VoltageUnit.Volts"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.FromMillivolts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <param name="millivolts">The value in mV.</param>
            <returns>An instance of <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.FromKilovolts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <param name="kilovolts">The value in kV.</param>
            <returns>An instance of <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.FromMegavolts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <param name="megavolts">The value in MV.</param>
            <returns>An instance of <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.FromMicrovolts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <param name="microvolts">The value in μV.</param>
            <returns>An instance of <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.FromNanovolts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <param name="nanovolts">The value in nV.</param>
            <returns>An instance of <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.FromGigavolts(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Voltage"/>.
            </summary>
            <param name="gigavolts">The value in GV.</param>
            <returns>An instance of <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.GetValue(Gu.Units.VoltageUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Voltage.SiValue"/> and <see cref="P:Gu.Units.Voltage.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Voltage.SiValue"/> and <see cref="P:Gu.Units.Voltage.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 V\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 V\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex V</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex V</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Voltage"/></returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(Gu.Units.VoltageUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(Gu.Units.VoltageUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(Gu.Units.VoltageUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(Gu.Units.VoltageUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(System.String,Gu.Units.VoltageUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(System.String,Gu.Units.VoltageUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(System.String,Gu.Units.VoltageUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.ToString(System.String,Gu.Units.VoltageUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.CompareTo(Gu.Units.Voltage)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Voltage"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Voltage"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Voltage"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Voltage.Equals(Gu.Units.Voltage)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Voltage"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Voltage as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Voltage"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Voltage.Equals(Gu.Units.Voltage,Gu.Units.Voltage)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Voltage"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Voltage as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Voltage"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Voltage.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Voltage"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Voltage"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Voltage.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Voltage.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Voltage.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Voltage.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.VoltageTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Voltage'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.VoltageTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VoltageTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VoltageTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VoltageTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.VoltageUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Voltage"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VoltageUnit.Volts">
            <summary>
            The Volts unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VoltageUnit.Millivolts">
            <summary>
            The Millivolts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VoltageUnit.Kilovolts">
            <summary>
            The Kilovolts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VoltageUnit.Megavolts">
            <summary>
            The Megavolts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VoltageUnit.Microvolts">
            <summary>
            The Microvolts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VoltageUnit.Nanovolts">
            <summary>
            The Nanovolts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VoltageUnit.Gigavolts">
            <summary>
            The Gigavolts unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VoltageUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.VoltageUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.VoltageUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.VoltageUnit"/> struct.
            </summary>
            <param name="toVolts">The conversion to <see cref="F:Gu.Units.VoltageUnit.Volts"/></param>
            <param name="fromVolts">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.VoltageUnit.Volts"/></param>
        </member>
        <member name="P:Gu.Units.VoltageUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.VoltageUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.VoltageUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.VoltageUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.VoltageUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VoltageUnit.op_Multiply(System.Double,Gu.Units.VoltageUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Voltage"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.op_Equality(Gu.Units.VoltageUnit,Gu.Units.VoltageUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.VoltageUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VoltageUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VoltageUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.VoltageUnit.op_Inequality(Gu.Units.VoltageUnit,Gu.Units.VoltageUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.VoltageUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VoltageUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VoltageUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.VoltageUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.VoltageUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.VoltageUnit"/></returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.TryParse(System.String,Gu.Units.VoltageUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VoltageUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VoltageUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.VoltageUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.VoltageUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to Volts.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from volts.
            </summary>
            <param name="volts">The value in Volts</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Voltage(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.GetScalarValue(Gu.Units.Voltage)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in Volts
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VoltageUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.Equals(Gu.Units.VoltageUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.VoltageUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.VoltageUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same VoltageUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.VoltageUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VoltageUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.VoltageUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.VoltageUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.VoltageUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VoltageUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VoltageUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VoltageUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Volume">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Volume"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Volume.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.VolumeUnit.CubicMetres"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Volume.cubicMetres">
            <summary>
            The quantity in <see cref="F:Gu.Units.VolumeUnit.CubicMetres"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Volume.#ctor(System.Double,Gu.Units.VolumeUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Volume"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.VolumeUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Volume.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.VolumeUnit.CubicMetres"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.VolumeUnit"/> for the <see cref="P:Gu.Units.Volume.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Volume.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.CubicMetres">
            <summary>
            Gets the quantity in cubicMetres".
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.Litres">
            <summary>
            Gets the quantity in Litres
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.Millilitres">
            <summary>
            Gets the quantity in Millilitres
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.Centilitres">
            <summary>
            Gets the quantity in Centilitres
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.Decilitres">
            <summary>
            Gets the quantity in Decilitres
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.CubicCentimetres">
            <summary>
            Gets the quantity in CubicCentimetres
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.CubicMillimetres">
            <summary>
            Gets the quantity in CubicMillimetres
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.CubicInches">
            <summary>
            Gets the quantity in CubicInches
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.CubicDecimetres">
            <summary>
            Gets the quantity in CubicDecimetres
            </summary>
        </member>
        <member name="P:Gu.Units.Volume.CubicFeet">
            <summary>
            Gets the quantity in CubicFeet
            </summary>
        </member>
        <member name="M:Gu.Units.Volume.op_Division(Gu.Units.Volume,Gu.Units.Mass)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificVolume"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Division(Gu.Units.Volume,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Division(Gu.Units.Volume,Gu.Units.Time)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Division(Gu.Units.Volume,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Multiply(Gu.Units.Volume,Gu.Units.Pressure)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Energy"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Multiply(Gu.Units.Volume,Gu.Units.Density)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Multiply(Gu.Units.Volume,Gu.Units.Frequency)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Division(Gu.Units.Volume,Gu.Units.VolumetricFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Time"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Multiply(Gu.Units.Volume,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Division(Gu.Units.Volume,Gu.Units.SpecificVolume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Mass"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Division(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Equality(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Volume"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Volume"/>.</param>
        </member>
        <member name="M:Gu.Units.Volume.op_Inequality(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Volume"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Volume"/>.</param>
        </member>
        <member name="M:Gu.Units.Volume.op_LessThan(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Volume"/> is less than another specified <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Volume"/>.</param>
        </member>
        <member name="M:Gu.Units.Volume.op_GreaterThan(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Volume"/> is greater than another specified <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Volume"/>.</param>
        </member>
        <member name="M:Gu.Units.Volume.op_LessThanOrEqual(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Volume"/> is less than or equal to another specified <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Volume"/>.</param>
        </member>
        <member name="M:Gu.Units.Volume.op_GreaterThanOrEqual(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Volume"/> is greater than or equal to another specified <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Volume"/>.</param>
        </member>
        <member name="M:Gu.Units.Volume.op_Multiply(System.Double,Gu.Units.Volume)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Volume"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Volume"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Volume"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Multiply(Gu.Units.Volume,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Volume"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Volume"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Division(Gu.Units.Volume,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Volume"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Volume"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Volume.op_Addition(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Volume"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Volume"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Volume"/>.</param>
        </member>
        <member name="M:Gu.Units.Volume.op_Subtraction(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Subtracts an Volume from another Volume and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Volume"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Volume"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Volume"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Volume.op_UnaryNegation(Gu.Units.Volume)">
            <summary>
            Returns an <see cref="T:Gu.Units.Volume"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Volume"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="volume">An instance of <see cref="T:Gu.Units.Volume"/></param>
        </member>
        <member name="M:Gu.Units.Volume.op_UnaryPlus(Gu.Units.Volume)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <returns>
            Returns <paramref name="volume"/>.
            </returns>
            <param name="volume">An instance of <see cref="T:Gu.Units.Volume"/></param>
        </member>
        <member name="M:Gu.Units.Volume.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Volume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Volume"/></param>
            <returns>The <see cref="T:Gu.Units.Volume"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Volume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Volume"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Volume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Volume"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Volume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Volume"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.TryParse(System.String,Gu.Units.Volume@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Volume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Volume"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Volume"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Volume"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.TryParse(System.String,System.IFormatProvider,Gu.Units.Volume@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Volume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Volume"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Volume"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Volume"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Volume@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Volume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Volume"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Volume"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Volume"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Volume@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Volume"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Volume"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Volume"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Volume"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Volume"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.From(System.Double,Gu.Units.VolumeUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromCubicMetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="cubicMetres">The value in <see cref="F:Gu.Units.VolumeUnit.CubicMetres"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromLitres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="litres">The value in L.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromMillilitres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="millilitres">The value in ml.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromCentilitres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="centilitres">The value in cl.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromDecilitres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="decilitres">The value in dl.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromCubicCentimetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="cubicCentimetres">The value in cm³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromCubicMillimetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="cubicMillimetres">The value in mm³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromCubicInches(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="cubicInches">The value in in³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromCubicDecimetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="cubicDecimetres">The value in dm³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.FromCubicFeet(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Volume"/>.
            </summary>
            <param name="cubicFeet">The value in ft³.</param>
            <returns>An instance of <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.GetValue(Gu.Units.VolumeUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Volume.SiValue"/> and <see cref="P:Gu.Units.Volume.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Volume.SiValue"/> and <see cref="P:Gu.Units.Volume.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m³\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m³\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m³</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m³</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Volume"/></returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(Gu.Units.VolumeUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(Gu.Units.VolumeUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(Gu.Units.VolumeUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(Gu.Units.VolumeUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(System.String,Gu.Units.VolumeUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(System.String,Gu.Units.VolumeUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(System.String,Gu.Units.VolumeUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Volume.ToString(System.String,Gu.Units.VolumeUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Volume.CompareTo(Gu.Units.Volume)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Volume"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Volume"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Volume"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Volume.Equals(Gu.Units.Volume)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Volume"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Volume as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Volume"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Volume.Equals(Gu.Units.Volume,Gu.Units.Volume)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Volume"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Volume as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Volume"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Volume.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Volume"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Volume"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Volume.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Volume.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Volume.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Volume.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.VolumetricFlow">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlow.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.VolumetricFlowUnit.CubicMetresPerSecond"/>
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlow.cubicMetresPerSecond">
            <summary>
            The quantity in <see cref="F:Gu.Units.VolumetricFlowUnit.CubicMetresPerSecond"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.#ctor(System.Double,Gu.Units.VolumetricFlowUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.VolumetricFlow"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.VolumetricFlowUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.VolumetricFlowUnit.CubicMetresPerSecond"/>
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.VolumetricFlowUnit"/> for the <see cref="P:Gu.Units.VolumetricFlow.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.VolumetricFlow.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CubicMetresPerSecond">
            <summary>
            Gets the quantity in cubicMetresPerSecond".
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CubicMetresPerMinute">
            <summary>
            Gets the quantity in CubicMetresPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CubicMetresPerHour">
            <summary>
            Gets the quantity in CubicMetresPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.LitresPerSecond">
            <summary>
            Gets the quantity in LitresPerSecond
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.LitresPerHour">
            <summary>
            Gets the quantity in LitresPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.LitresPerMinute">
            <summary>
            Gets the quantity in LitresPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.MillilitresPerSecond">
            <summary>
            Gets the quantity in MillilitresPerSecond
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.MillilitresPerHour">
            <summary>
            Gets the quantity in MillilitresPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.MillilitresPerMinute">
            <summary>
            Gets the quantity in MillilitresPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CentilitresPerSecond">
            <summary>
            Gets the quantity in CentilitresPerSecond
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CentilitresPerHour">
            <summary>
            Gets the quantity in CentilitresPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CentilitresPerMinute">
            <summary>
            Gets the quantity in CentilitresPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CubicFeetPerHour">
            <summary>
            Gets the quantity in CubicFeetPerHour
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CubicFeetPerSecond">
            <summary>
            Gets the quantity in CubicFeetPerSecond
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CubicFeetPerMinute">
            <summary>
            Gets the quantity in CubicFeetPerMinute
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlow.CubicFeetPerDay">
            <summary>
            Gets the quantity in CubicFeetPerDay
            </summary>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,Gu.Units.Length)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Multiply(Gu.Units.VolumetricFlow,Gu.Units.Time)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,Gu.Units.Area)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,Gu.Units.Volume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Multiply(Gu.Units.VolumetricFlow,Gu.Units.Pressure)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Power"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Multiply(Gu.Units.VolumetricFlow,Gu.Units.Density)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,Gu.Units.Speed)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,Gu.Units.Frequency)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Multiply(Gu.Units.VolumetricFlow,Gu.Units.Wavenumber)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Multiply(Gu.Units.VolumetricFlow,Gu.Units.AreaDensity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Momentum"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,Gu.Units.SpecificVolume)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,Gu.Units.MassFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.SpecificVolume"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,Gu.Units.KinematicViscosity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Equality(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.VolumetricFlow"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Inequality(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.VolumetricFlow"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_LessThan(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.VolumetricFlow"/> is less than another specified <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_GreaterThan(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.VolumetricFlow"/> is greater than another specified <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_LessThanOrEqual(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.VolumetricFlow"/> is less than or equal to another specified <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_GreaterThanOrEqual(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.VolumetricFlow"/> is greater than or equal to another specified <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Multiply(System.Double,Gu.Units.VolumetricFlow)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.VolumetricFlow"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.VolumetricFlow"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Multiply(Gu.Units.VolumetricFlow,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.VolumetricFlow"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.VolumetricFlow"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Division(Gu.Units.VolumetricFlow,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.VolumetricFlow"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.VolumetricFlow"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Addition(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.VolumetricFlow"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.VolumetricFlow"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlow"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_Subtraction(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Subtracts an VolumetricFlow from another VolumetricFlow and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.VolumetricFlow"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlow"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlow"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_UnaryNegation(Gu.Units.VolumetricFlow)">
            <summary>
            Returns an <see cref="T:Gu.Units.VolumetricFlow"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.VolumetricFlow"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="volumetricFlow">An instance of <see cref="T:Gu.Units.VolumetricFlow"/></param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.op_UnaryPlus(Gu.Units.VolumetricFlow)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <returns>
            Returns <paramref name="volumetricFlow"/>.
            </returns>
            <param name="volumetricFlow">An instance of <see cref="T:Gu.Units.VolumetricFlow"/></param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumetricFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumetricFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumetricFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumetricFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.TryParse(System.String,Gu.Units.VolumetricFlow@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumetricFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.VolumetricFlow"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.TryParse(System.String,System.IFormatProvider,Gu.Units.VolumetricFlow@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumetricFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.VolumetricFlow"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.VolumetricFlow@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumetricFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.VolumetricFlow"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.VolumetricFlow@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumetricFlow"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.VolumetricFlow"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.VolumetricFlow"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.VolumetricFlow"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.From(System.Double,Gu.Units.VolumetricFlowUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCubicMetresPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="cubicMetresPerSecond">The value in <see cref="F:Gu.Units.VolumetricFlowUnit.CubicMetresPerSecond"/></param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCubicMetresPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="cubicMetresPerMinute">The value in m³/min.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCubicMetresPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="cubicMetresPerHour">The value in m³/h.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromLitresPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="litresPerSecond">The value in L/s.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromLitresPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="litresPerHour">The value in L/h.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromLitresPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="litresPerMinute">The value in L/min.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromMillilitresPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="millilitresPerSecond">The value in ml/s.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromMillilitresPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="millilitresPerHour">The value in ml/h.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromMillilitresPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="millilitresPerMinute">The value in ml/min.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCentilitresPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="centilitresPerSecond">The value in cl/s.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCentilitresPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="centilitresPerHour">The value in cl/h.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCentilitresPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="centilitresPerMinute">The value in cl/min.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCubicFeetPerHour(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="cubicFeetPerHour">The value in ft³/h.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCubicFeetPerSecond(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="cubicFeetPerSecond">The value in ft³/s.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCubicFeetPerMinute(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="cubicFeetPerMinute">The value in ft³/min.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.FromCubicFeetPerDay(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.VolumetricFlow"/>.
            </summary>
            <param name="cubicFeetPerDay">The value in ft³/d.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.GetValue(Gu.Units.VolumetricFlowUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.VolumetricFlow.SiValue"/> and <see cref="P:Gu.Units.VolumetricFlow.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.VolumetricFlow.SiValue"/> and <see cref="P:Gu.Units.VolumetricFlow.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m³/s\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m³/s\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m³/s</param>
            <returns>The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m³/s</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.VolumetricFlow"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(Gu.Units.VolumetricFlowUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(Gu.Units.VolumetricFlowUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(Gu.Units.VolumetricFlowUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(Gu.Units.VolumetricFlowUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(System.String,Gu.Units.VolumetricFlowUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(System.String,Gu.Units.VolumetricFlowUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(System.String,Gu.Units.VolumetricFlowUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ToString(System.String,Gu.Units.VolumetricFlowUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.CompareTo(Gu.Units.VolumetricFlow)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.VolumetricFlow"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.VolumetricFlow"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.VolumetricFlow"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.Equals(Gu.Units.VolumetricFlow)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.VolumetricFlow"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same VolumetricFlow as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.VolumetricFlow"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.Equals(Gu.Units.VolumetricFlow,Gu.Units.VolumetricFlow)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.VolumetricFlow"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same VolumetricFlow as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.VolumetricFlow"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.VolumetricFlow"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.VolumetricFlow"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.VolumetricFlow.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.VolumetricFlowTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.VolumetricFlow'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.VolumetricFlowTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumetricFlowTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumetricFlowTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumetricFlowTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.VolumetricFlowUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.VolumetricFlow"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CubicMetresPerSecond">
            <summary>
            The CubicMetresPerSecond unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CubicMetresPerMinute">
            <summary>
            The CubicMetresPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CubicMetresPerHour">
            <summary>
            The CubicMetresPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.LitresPerSecond">
            <summary>
            The LitresPerSecond unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.LitresPerHour">
            <summary>
            The LitresPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.LitresPerMinute">
            <summary>
            The LitresPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.MillilitresPerSecond">
            <summary>
            The MillilitresPerSecond unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.MillilitresPerHour">
            <summary>
            The MillilitresPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.MillilitresPerMinute">
            <summary>
            The MillilitresPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CentilitresPerSecond">
            <summary>
            The CentilitresPerSecond unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CentilitresPerHour">
            <summary>
            The CentilitresPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CentilitresPerMinute">
            <summary>
            The CentilitresPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CubicFeetPerHour">
            <summary>
            The CubicFeetPerHour unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CubicFeetPerSecond">
            <summary>
            The CubicFeetPerSecond unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CubicFeetPerMinute">
            <summary>
            The CubicFeetPerMinute unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.CubicFeetPerDay">
            <summary>
            The CubicFeetPerDay unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumetricFlowUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.VolumetricFlowUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.VolumetricFlowUnit"/> struct.
            </summary>
            <param name="toCubicMetresPerSecond">The conversion to <see cref="F:Gu.Units.VolumetricFlowUnit.CubicMetresPerSecond"/></param>
            <param name="fromCubicMetresPerSecond">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.VolumetricFlowUnit.CubicMetresPerSecond"/></param>
        </member>
        <member name="P:Gu.Units.VolumetricFlowUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.VolumetricFlowUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlowUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.VolumetricFlowUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.VolumetricFlowUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.op_Multiply(System.Double,Gu.Units.VolumetricFlowUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.VolumetricFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.op_Equality(Gu.Units.VolumetricFlowUnit,Gu.Units.VolumetricFlowUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.VolumetricFlowUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlowUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlowUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.op_Inequality(Gu.Units.VolumetricFlowUnit,Gu.Units.VolumetricFlowUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.VolumetricFlowUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumetricFlowUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumetricFlowUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.VolumetricFlowUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumetricFlowUnit"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.TryParse(System.String,Gu.Units.VolumetricFlowUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumetricFlowUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumetricFlowUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.VolumetricFlowUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.VolumetricFlowUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to CubicMetresPerSecond.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from cubicMetresPerSecond.
            </summary>
            <param name="cubicMetresPerSecond">The value in CubicMetresPerSecond</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new VolumetricFlow(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.GetScalarValue(Gu.Units.VolumetricFlow)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in CubicMetresPerSecond
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.Equals(Gu.Units.VolumetricFlowUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.VolumetricFlowUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.VolumetricFlowUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same VolumetricFlowUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.VolumetricFlowUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.VolumetricFlowUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumetricFlowUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.VolumeTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Volume'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.VolumeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.VolumeUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Volume"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.CubicMetres">
            <summary>
            The CubicMetres unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.Litres">
            <summary>
            The Litres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.Millilitres">
            <summary>
            The Millilitres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.Centilitres">
            <summary>
            The Centilitres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.Decilitres">
            <summary>
            The Decilitres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.CubicCentimetres">
            <summary>
            The CubicCentimetres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.CubicMillimetres">
            <summary>
            The CubicMillimetres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.CubicInches">
            <summary>
            The CubicInches unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.CubicDecimetres">
            <summary>
            The CubicDecimetres unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.CubicFeet">
            <summary>
            The CubicFeet unit
            Contains conversion logic to from and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.VolumeUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.VolumeUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.VolumeUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.VolumeUnit"/> struct.
            </summary>
            <param name="toCubicMetres">The conversion to <see cref="F:Gu.Units.VolumeUnit.CubicMetres"/></param>
            <param name="fromCubicMetres">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.VolumeUnit.CubicMetres"/></param>
        </member>
        <member name="P:Gu.Units.VolumeUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.VolumeUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.VolumeUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.VolumeUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.VolumeUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumeUnit.op_Multiply(System.Double,Gu.Units.VolumeUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Volume"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.op_Equality(Gu.Units.VolumeUnit,Gu.Units.VolumeUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.VolumeUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumeUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumeUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumeUnit.op_Inequality(Gu.Units.VolumeUnit,Gu.Units.VolumeUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.VolumeUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.VolumeUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.VolumeUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.VolumeUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.VolumeUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.VolumeUnit"/></returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.TryParse(System.String,Gu.Units.VolumeUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.VolumeUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.VolumeUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.VolumeUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.VolumeUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to CubicMetres.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from cubicMetres.
            </summary>
            <param name="cubicMetres">The value in CubicMetres</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Volume(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.GetScalarValue(Gu.Units.Volume)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in CubicMetres
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumeUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.Equals(Gu.Units.VolumeUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.VolumeUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.VolumeUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same VolumeUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.VolumeUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumeUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.VolumeUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.VolumeUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.VolumeUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumeUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumeUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.VolumeUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.Wavenumber">
            <summary>
            A type for the quantity <see cref="T:Gu.Units.Wavenumber"/>.
            </summary>
        </member>
        <member name="F:Gu.Units.Wavenumber.Zero">
            <summary>
            Gets a value that is zero <see cref="F:Gu.Units.WavenumberUnit.ReciprocalMetres"/>
            </summary>
        </member>
        <member name="F:Gu.Units.Wavenumber.reciprocalMetres">
            <summary>
            The quantity in <see cref="F:Gu.Units.WavenumberUnit.ReciprocalMetres"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.Wavenumber.#ctor(System.Double,Gu.Units.WavenumberUnit)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.Wavenumber"/> struct.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit"><see cref="T:Gu.Units.WavenumberUnit"/>.</param>
        </member>
        <member name="P:Gu.Units.Wavenumber.SiValue">
            <summary>
            Gets the quantity in <see cref="F:Gu.Units.WavenumberUnit.ReciprocalMetres"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Wavenumber.SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.WavenumberUnit"/> for the <see cref="P:Gu.Units.Wavenumber.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Wavenumber.Gu#Units#IQuantity#SiUnit">
            <summary>
            Gets the <see cref="T:Gu.Units.IUnit"/> for the <see cref="P:Gu.Units.Wavenumber.SiValue"/>
            </summary>
        </member>
        <member name="P:Gu.Units.Wavenumber.ReciprocalMetres">
            <summary>
            Gets the quantity in reciprocalMetres".
            </summary>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.Area)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Length"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.Volume)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Area"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.Force)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Stiffness"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Division(Gu.Units.Wavenumber,Gu.Units.Pressure)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Flexibility"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.Energy)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Force"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.Speed)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Frequency"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.Stiffness)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.VolumetricFlow)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.KinematicViscosity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Division(Gu.Units.Wavenumber,Gu.Units.Resistance)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Conductivity"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.SpecificEnergy)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Acceleration"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Division(Gu.Units.Wavenumber,Gu.Units.Flexibility)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Pressure"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.ElectricalConductance)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Conductivity"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.Momentum)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.MassFlow"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.AreaDensity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Density"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,Gu.Units.KinematicViscosity)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Speed"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Division(Gu.Units.Wavenumber,Gu.Units.Conductivity)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Resistance"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Division(System.Double,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The Length that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Division(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Divides <paramref name="left"/> by <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:System.Double"/> that is the result from the division.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Equality(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Wavenumber"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Inequality(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.Wavenumber"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_LessThan(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Wavenumber"/> is less than another specified <see cref="T:Gu.Units.Wavenumber"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_GreaterThan(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Wavenumber"/> is greater than another specified <see cref="T:Gu.Units.Wavenumber"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_LessThanOrEqual(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Wavenumber"/> is less than or equal to another specified <see cref="T:Gu.Units.Wavenumber"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is less than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_GreaterThanOrEqual(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Indicates whether a specified <see cref="T:Gu.Units.Wavenumber"/> is greater than or equal to another specified <see cref="T:Gu.Units.Wavenumber"/>.
            </summary>
            <returns>
            true if the quantity of <paramref name="left"/> is greater than or equal to the quantity of <paramref name="right"/>; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(System.Double,Gu.Units.Wavenumber)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Wavenumber"/> with <paramref name="left"/> and returns the result.
            </summary>
            <param name="right">The right instance of <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="left">The left instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies <paramref name="left"/> with <see cref="T:Gu.Units.Wavenumber"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Multiply(Gu.Units.Wavenumber,System.Double)">
            <summary>
            Multiplies an instance of <see cref="T:Gu.Units.Wavenumber"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Multiplies an <see cref="T:Gu.Units.Wavenumber"/> with <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Division(Gu.Units.Wavenumber,System.Double)">
            <summary>
            Divides an instance of <see cref="T:Gu.Units.Wavenumber"/> with <paramref name="right"/> and returns the result.
            </summary>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="right">The right instance of <seealso cref="T:System.Double"/></param>
            <returns>Divides an instance of <see cref="T:Gu.Units.Wavenumber"/> by <paramref name="right"/> and returns the result.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Addition(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Adds two specified <see cref="T:Gu.Units.Wavenumber"/> instances.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Wavenumber"/> whose quantity is the sum of the quantitys of <paramref name="left"/> and <paramref name="right"/>.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Wavenumber"/>.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_Subtraction(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Subtracts an Wavenumber from another Wavenumber and returns the difference.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Wavenumber"/> that is the difference
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.Wavenumber"/> (the minuend).</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.Wavenumber"/> (the subtrahend).</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_UnaryNegation(Gu.Units.Wavenumber)">
            <summary>
            Returns an <see cref="T:Gu.Units.Wavenumber"/> whose quantity is the negated quantity of the specified instance.
            </summary>
            <returns>
            An <see cref="T:Gu.Units.Wavenumber"/> with the same numeric quantity as this instance, but the opposite sign.
            </returns>
            <param name="wavenumber">An instance of <see cref="T:Gu.Units.Wavenumber"/></param>
        </member>
        <member name="M:Gu.Units.Wavenumber.op_UnaryPlus(Gu.Units.Wavenumber)">
            <summary>
            Returns the specified instance of <see cref="T:Gu.Units.Wavenumber"/>.
            </summary>
            <returns>
            Returns <paramref name="wavenumber"/>.
            </returns>
            <param name="wavenumber">An instance of <see cref="T:Gu.Units.Wavenumber"/></param>
        </member>
        <member name="M:Gu.Units.Wavenumber.Parse(System.String)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Wavenumber"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Wavenumber"/></param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.Parse(System.String,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Wavenumber"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Wavenumber"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Wavenumber"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.TryParse(System.String,Gu.Units.Wavenumber@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Wavenumber"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.Wavenumber"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Wavenumber"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.TryParse(System.String,System.IFormatProvider,Gu.Units.Wavenumber@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Wavenumber"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Wavenumber"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Wavenumber"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.TryParse(System.String,System.Globalization.NumberStyles,Gu.Units.Wavenumber@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Wavenumber"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Wavenumber"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Wavenumber"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,Gu.Units.Wavenumber@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.Wavenumber"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.Wavenumber"/></param>
            <param name="styles">Specifies the <see cref="T:System.Globalization.NumberStyles"/> to be used.</param>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <param name="result">The parsed <see cref="T:Gu.Units.Wavenumber"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.Wavenumber"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ReadFrom(System.Xml.XmlReader)">
            <summary>
            Reads an instance of <see cref="T:Gu.Units.Wavenumber"/> from the <paramref name="reader"/>
            </summary>
            <param name="reader">The xml reader positioned at the start of the unit value.</param>
            <returns>An instance of <see cref="T:Gu.Units.Wavenumber"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.From(System.Double,Gu.Units.WavenumberUnit)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Wavenumber"/>.
            </summary>
            <param name="value">The scalar value.</param>
            <param name="unit">The unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.Wavenumber"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.FromReciprocalMetres(System.Double)">
            <summary>
            Creates a new instance of <see cref="T:Gu.Units.Wavenumber"/>.
            </summary>
            <param name="reciprocalMetres">The value in <see cref="F:Gu.Units.WavenumberUnit.ReciprocalMetres"/></param>
            <returns>An instance of <see cref="T:Gu.Units.Wavenumber"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.GetValue(Gu.Units.WavenumberUnit)">
            <summary>
            Get the scalar value
            </summary>
            <param name="unit">The unit to get the value in.</param>
            <returns>The scalar value of this in the specified unit</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Wavenumber.SiValue"/> and <see cref="P:Gu.Units.Wavenumber.SiUnit"/>
            </summary>
            <returns>The string representation of the <see cref="T:Gu.Units.Wavenumber"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(System.IFormatProvider)">
            <summary>
            Returns a string with the <see cref="P:Gu.Units.Wavenumber.SiValue"/> and <see cref="P:Gu.Units.Wavenumber.SiUnit"/>
            </summary>
            <param name="provider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Wavenumber"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(System.String)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m⁻¹\"</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Wavenumber"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(System.String,System.IFormatProvider)">
            <summary>
            If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="format">Must be a composite format ex: \"F2 m⁻¹\"</param>
            <param name="formatProvider">Specifies the formatProvider to be used.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Wavenumber"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(System.String,System.String)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting of the unit ex m⁻¹</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Wavenumber"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(System.String,System.String,System.IFormatProvider)">
            <summary>
             If an invalid format is provided the string will look like: {value: ??} {unit: ??}
            </summary>
            <param name="valueFormat">For formatting the scalar, format stings valid for <see cref="T:System.Double"/> are valid
             ex: F2</param>
            <param name="symbolFormat">For formatting the unit ex m⁻¹</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the <see cref="T:Gu.Units.Wavenumber"/></returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(Gu.Units.WavenumberUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(Gu.Units.WavenumberUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(Gu.Units.WavenumberUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(Gu.Units.WavenumberUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(System.String,Gu.Units.WavenumberUnit)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(System.String,Gu.Units.WavenumberUnit,Gu.Units.SymbolFormat)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creting the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(System.String,Gu.Units.WavenumberUnit,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ToString(System.String,Gu.Units.WavenumberUnit,Gu.Units.SymbolFormat,System.IFormatProvider)">
            <summary>
            Converts the quantity value of this instance to its equivalent string representation.
            </summary>
            <param name="valueFormat">The format to use for the scalar value. Valid formats are formats valid for formatting <see cref="T:System.Double"/></param>
            <param name="unit">The unit to use in the conversion</param>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <param name="formatProvider">Specifies the <see cref="T:System.IFormatProvider"/> to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.CompareTo(Gu.Units.Wavenumber)">
            <summary>
            Compares this instance to a specified <see cref="T:Gu.Units.Wavenumber"/> object and returns an integer that indicates whether this <paramref name="quantity"/> is smaller than, equal to, or greater than the <see cref="T:Gu.Units.Wavenumber"/> object.
            </summary>
            <returns>
            A signed number indicating the relative quantitys of this instance and <paramref name="quantity"/>.
            Value
            Description
            A negative integer
            This instance is smaller than <paramref name="quantity"/>.
            Zero
            This instance is equal to <paramref name="quantity"/>.
            A positive integer
            This instance is larger than <paramref name="quantity"/>.
            </returns>
            <param name="quantity">An instance of <see cref="T:Gu.Units.Wavenumber"/> object to compare to this instance.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.Equals(Gu.Units.Wavenumber)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Wavenumber"/> object.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Wavenumber as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Wavenumber"/> object to compare with this instance.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.Equals(Gu.Units.Wavenumber,Gu.Units.Wavenumber)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Wavenumber"/> object within the given tolerance.
            </summary>
            <returns>
            true if <paramref name="other"/> represents the same Wavenumber as this instance; otherwise, false.
            </returns>
            <param name="other">An instance of <see cref="T:Gu.Units.Wavenumber"/> object to compare with this instance.</param>
            <param name="tolerance">The maximum difference for being considered equal. Must be greater than zero.</param>
        </member>
        <member name="M:Gu.Units.Wavenumber.Equals(System.Object)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.Wavenumber"/> object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            true if <paramref name="obj"/> represents the same <see cref="T:Gu.Units.Wavenumber"/> as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.GetSchema">
            <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead,
            if specifying a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> to the class.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema"/> that describes the XML representation of the object that is produced by the
             <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)"/>
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)"/> method.
            </returns>
        </member>
        <member name="M:Gu.Units.Wavenumber.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized. </param>
        </member>
        <member name="M:Gu.Units.Wavenumber.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized. </param>
        </member>
        <member name="T:Gu.Units.WavenumberTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.Wavenumber'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.WavenumberTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.WavenumberTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.WavenumberTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.WavenumberTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.WavenumberUnit">
            <summary>
            A type for the unit <see cref="T:Gu.Units.Wavenumber"/>.
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.WavenumberUnit.ReciprocalMetres">
            <summary>
            The ReciprocalMetres unit
            Contains logic for conversion and formatting.
            </summary>
        </member>
        <member name="F:Gu.Units.WavenumberUnit.symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.WavenumberUnit"/>.
            </summary>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.#ctor(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Gu.Units.WavenumberUnit"/> struct.
            </summary>
            <param name="toReciprocalMetres">The conversion to <see cref="F:Gu.Units.WavenumberUnit.ReciprocalMetres"/></param>
            <param name="fromReciprocalMetres">The conversion to <paramref name="symbol"/></param>
            <param name="symbol">The symbol for the <see cref="F:Gu.Units.WavenumberUnit.ReciprocalMetres"/></param>
        </member>
        <member name="P:Gu.Units.WavenumberUnit.Symbol">
            <summary>
            Gets the symbol for the <see cref="T:Gu.Units.WavenumberUnit"/>.
            </summary>
        </member>
        <member name="P:Gu.Units.WavenumberUnit.SiUnit">
            <summary>
            Gets the default unit for <see cref="T:Gu.Units.WavenumberUnit"/>
            </summary>
        </member>
        <member name="P:Gu.Units.WavenumberUnit.Gu#Units#IUnit#SiUnit">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.WavenumberUnit.op_Multiply(System.Double,Gu.Units.WavenumberUnit)">
            <summary>
            Multiplies <paramref name="left"/> with <paramref name="right"/>
            </summary>
            <param name="left">The left value</param>
            <param name="right">The right value</param>
            <returns>The <see cref="T:Gu.Units.Wavenumber"/> that is the result from the multiplication.</returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.op_Equality(Gu.Units.WavenumberUnit,Gu.Units.WavenumberUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.WavenumberUnit"/> instances are equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.WavenumberUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.WavenumberUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.op_Inequality(Gu.Units.WavenumberUnit,Gu.Units.WavenumberUnit)">
            <summary>
            Indicates whether two <see cref="T:Gu.Units.WavenumberUnit"/> instances are not equal.
            </summary>
            <returns>
            true if the quantitys of <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, false.
            </returns>
            <param name="left">The left instance of <see cref="T:Gu.Units.WavenumberUnit"/>.</param>
            <param name="right">The right instance of <see cref="T:Gu.Units.WavenumberUnit"/>.</param>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Gu.Units.WavenumberUnit"/> from a string.
            Leading and trailing whitespace characters are allowed.
            </summary>
            <param name="text">The text representation of this unit.</param>
            <returns>An instance of <see cref="T:Gu.Units.WavenumberUnit"/></returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.TryParse(System.String,Gu.Units.WavenumberUnit@)">
            <summary>
            Creates an instance of <see cref="T:Gu.Units.WavenumberUnit"/> from its string representation
            </summary>
            <param name="text">The string representation of the <see cref="T:Gu.Units.WavenumberUnit"/></param>
            <param name="result">The parsed <see cref="T:Gu.Units.WavenumberUnit"/></param>
            <returns>True if an instance of <see cref="T:Gu.Units.WavenumberUnit"/> could be parsed from <paramref name="text"/></returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.ToSiUnit(System.Double)">
            <summary>
            Converts <paramref name="value"/> to ReciprocalMetres.
            </summary>
            <param name="value">The value in the unit of this instance.</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.FromSiUnit(System.Double)">
            <summary>
            Converts a value from reciprocalMetres.
            </summary>
            <param name="reciprocalMetres">The value in ReciprocalMetres</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.CreateQuantity(System.Double)">
            <summary>
            Creates a quantity with this unit
            </summary>
            <param name="value">The scalar value"</param>
            <returns>new Wavenumber(<paramref name="value"/>, this)</returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.GetScalarValue(Gu.Units.Wavenumber)">
            <summary>
            Gets the scalar value of <paramref name="quantity"/> in ReciprocalMetres
            </summary>
            <param name="quantity">The quanity.</param>
            <returns>The SI-unit value.</returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.ToString">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.WavenumberUnit.ToString(System.String)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="format">The format to use when convereting</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.ToString(Gu.Units.SymbolFormat)">
            <summary>
            Converts the unit value of this instance to its equivalent string representation.
            </summary>
            <param name="symbolFormat">Specifies the symbol format to use when creating the string representation.</param>
            <returns>The string representation of the value of this instance.</returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.Equals(Gu.Units.WavenumberUnit)">
            <summary>
            Returns a quantity indicating whether this instance is equal to a specified <see cref="T:Gu.Units.WavenumberUnit"/> object.
            </summary>
            <param name="other">An instance of <see cref="T:Gu.Units.WavenumberUnit"/> object to compare with this instance.</param>
            <returns>
            true if <paramref name="other"/> represents the same WavenumberUnit as this instance; otherwise, false.
            </returns>
        </member>
        <member name="M:Gu.Units.WavenumberUnit.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.WavenumberUnit.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Gu.Units.WavenumberUnitTypeConverter">
            <summary>
            Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
            </summary>
            <devdoc>
            <para>Provides a type converter to convert <see cref='T:Gu.Units.WavenumberUnit'/>
            objects to and from various
            other representations.</para>
            </devdoc>
        </member>
        <member name="M:Gu.Units.WavenumberUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.WavenumberUnitTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.WavenumberUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Gu.Units.WavenumberUnitTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
    </members>
</doc>
